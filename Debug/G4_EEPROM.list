
G4_EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fa4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006210  08006210  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006210  08006210  00016210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006218  08006218  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006218  08006218  00016218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000005c  0800627c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  0800627c  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b22  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002887  00000000  00000000  00031bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00034478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a54  00000000  00000000  000351e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254ea  00000000  00000000  00035c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012dac  00000000  00000000  0005b11e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eab4a  00000000  00000000  0006deca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003af0  00000000  00000000  00158a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0015c504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800616c 	.word	0x0800616c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	0800616c 	.word	0x0800616c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
bool at24_isConnected(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	2202      	movs	r2, #2
 80005c4:	21a0      	movs	r1, #160	; 0xa0
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <at24_isConnected+0x20>)
 80005c8:	f001 fb1a 	bl	8001c00 <HAL_I2C_IsDeviceReady>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d101      	bne.n	80005d6 <at24_isConnected+0x1a>
    return true;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e000      	b.n	80005d8 <at24_isConnected+0x1c>
  else
    return false;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000007c 	.word	0x2000007c

080005e0 <at24_write>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
bool at24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	607a      	str	r2, [r7, #4]
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4603      	mov	r3, r0
 80005ee:	81fb      	strh	r3, [r7, #14]
  if (at24_lock == 1)
 80005f0:	4b29      	ldr	r3, [pc, #164]	; (8000698 <at24_write+0xb8>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d101      	bne.n	80005fc <at24_write+0x1c>
    return false;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e049      	b.n	8000690 <at24_write+0xb0>

  at24_lock = 1;
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <at24_write+0xb8>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 8000602:	f000 fc7f 	bl	8000f04 <HAL_GetTick>
 8000606:	6138      	str	r0, [r7, #16]
  while (1)
  {
	#if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
	#endif
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 8000608:	89fb      	ldrh	r3, [r7, #14]
 800060a:	f003 031f 	and.w	r3, r3, #31
 800060e:	b29b      	uxth	r3, r3
 8000610:	f1c3 0320 	rsb	r3, r3, #32
 8000614:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 8000616:	8afb      	ldrh	r3, [r7, #22]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	429a      	cmp	r2, r3
 800061c:	d201      	bcs.n	8000622 <at24_write+0x42>
      w = len;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 8000622:	89fa      	ldrh	r2, [r7, #14]
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9302      	str	r3, [sp, #8]
 8000628:	8afb      	ldrh	r3, [r7, #22]
 800062a:	9301      	str	r3, [sp, #4]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	9300      	str	r3, [sp, #0]
 8000630:	2302      	movs	r3, #2
 8000632:	21a0      	movs	r1, #160	; 0xa0
 8000634:	4819      	ldr	r0, [pc, #100]	; (800069c <at24_write+0xbc>)
 8000636:	f001 f8b5 	bl	80017a4 <HAL_I2C_Mem_Write>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d123      	bne.n	8000688 <at24_write+0xa8>
    #endif
    {
      at24_delay(10);
 8000640:	200a      	movs	r0, #10
 8000642:	f000 fc6b 	bl	8000f1c <HAL_Delay>
      len -= w;
 8000646:	8afb      	ldrh	r3, [r7, #22]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	607b      	str	r3, [r7, #4]
      data += w;
 800064e:	8afb      	ldrh	r3, [r7, #22]
 8000650:	68ba      	ldr	r2, [r7, #8]
 8000652:	4413      	add	r3, r2
 8000654:	60bb      	str	r3, [r7, #8]
      address += w;
 8000656:	89fa      	ldrh	r2, [r7, #14]
 8000658:	8afb      	ldrh	r3, [r7, #22]
 800065a:	4413      	add	r3, r2
 800065c:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d104      	bne.n	800066e <at24_write+0x8e>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
        #endif
        at24_lock = 0;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <at24_write+0xb8>)
 8000666:	2200      	movs	r2, #0
 8000668:	701a      	strb	r2, [r3, #0]
        return true;
 800066a:	2301      	movs	r3, #1
 800066c:	e010      	b.n	8000690 <at24_write+0xb0>
      }
      if (HAL_GetTick() - startTime >= timeout)
 800066e:	f000 fc49 	bl	8000f04 <HAL_GetTick>
 8000672:	4602      	mov	r2, r0
 8000674:	693b      	ldr	r3, [r7, #16]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	683a      	ldr	r2, [r7, #0]
 800067a:	429a      	cmp	r2, r3
 800067c:	d8c4      	bhi.n	8000608 <at24_write+0x28>
      {
        at24_lock = 0;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <at24_write+0xb8>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
        return false;
 8000684:	2300      	movs	r3, #0
 8000686:	e003      	b.n	8000690 <at24_write+0xb0>
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
      #endif
      at24_lock = 0;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <at24_write+0xb8>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
      return false;
 800068e:	2300      	movs	r3, #0
    }
  }
}
 8000690:	4618      	mov	r0, r3
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	20000078 	.word	0x20000078
 800069c:	2000007c 	.word	0x2000007c

080006a0 <at24_read>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
bool at24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	4603      	mov	r3, r0
 80006ae:	81fb      	strh	r3, [r7, #14]
  #if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
  #endif
  if (at24_lock == 1)
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <at24_read+0x60>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d101      	bne.n	80006bc <at24_read+0x1c>
    return false;
 80006b8:	2300      	movs	r3, #0
 80006ba:	e01c      	b.n	80006f6 <at24_read+0x56>
  at24_lock = 1;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <at24_read+0x60>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	89f9      	ldrh	r1, [r7, #14]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	9202      	str	r2, [sp, #8]
 80006cc:	9301      	str	r3, [sp, #4]
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	9300      	str	r3, [sp, #0]
 80006d2:	2302      	movs	r3, #2
 80006d4:	460a      	mov	r2, r1
 80006d6:	21a0      	movs	r1, #160	; 0xa0
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <at24_read+0x64>)
 80006da:	f001 f977 	bl	80019cc <HAL_I2C_Mem_Read>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d104      	bne.n	80006ee <at24_read+0x4e>
  #endif
  {
    at24_lock = 0;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <at24_read+0x60>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
    return true;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e003      	b.n	80006f6 <at24_read+0x56>
  }
  else
  {
    at24_lock = 0;
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <at24_read+0x60>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
    return false;
 80006f4:	2300      	movs	r3, #0
  }
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000078 	.word	0x20000078
 8000704:	2000007c 	.word	0x2000007c

08000708 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b08a      	sub	sp, #40	; 0x28
 800070c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a33      	ldr	r2, [pc, #204]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000724:	f043 0320 	orr.w	r3, r3, #32
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0320 	and.w	r3, r3, #32
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b2e      	ldr	r3, [pc, #184]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a2d      	ldr	r2, [pc, #180]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b2b      	ldr	r3, [pc, #172]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000766:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000772:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b1c      	ldr	r3, [pc, #112]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <MX_GPIO_Init+0xe8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <MX_GPIO_Init+0xe8>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2120      	movs	r1, #32
 800079a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800079e:	f000 ff3f 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2104      	movs	r1, #4
 80007a6:	4813      	ldr	r0, [pc, #76]	; (80007f4 <MX_GPIO_Init+0xec>)
 80007a8:	f000 ff3a 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ac:	2320      	movs	r3, #32
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b0:	2301      	movs	r3, #1
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c6:	f000 fda9 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007ca:	2304      	movs	r3, #4
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	4619      	mov	r1, r3
 80007e0:	4804      	ldr	r0, [pc, #16]	; (80007f4 <MX_GPIO_Init+0xec>)
 80007e2:	f000 fd9b 	bl	800131c <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	; 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000
 80007f4:	48000c00 	.word	0x48000c00

080007f8 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007fc:	4b1b      	ldr	r3, [pc, #108]	; (800086c <MX_I2C4_Init+0x74>)
 80007fe:	4a1c      	ldr	r2, [pc, #112]	; (8000870 <MX_I2C4_Init+0x78>)
 8000800:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909BEB;
 8000802:	4b1a      	ldr	r3, [pc, #104]	; (800086c <MX_I2C4_Init+0x74>)
 8000804:	4a1b      	ldr	r2, [pc, #108]	; (8000874 <MX_I2C4_Init+0x7c>)
 8000806:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_I2C4_Init+0x74>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_I2C4_Init+0x74>)
 8000810:	2201      	movs	r2, #1
 8000812:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_I2C4_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_I2C4_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_I2C4_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_I2C4_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_I2C4_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000832:	480e      	ldr	r0, [pc, #56]	; (800086c <MX_I2C4_Init+0x74>)
 8000834:	f000 ff26 	bl	8001684 <HAL_I2C_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800083e:	f000 f96e 	bl	8000b1e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000842:	2100      	movs	r1, #0
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <MX_I2C4_Init+0x74>)
 8000846:	f002 fae3 	bl	8002e10 <HAL_I2CEx_ConfigAnalogFilter>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000850:	f000 f965 	bl	8000b1e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000854:	2100      	movs	r1, #0
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_I2C4_Init+0x74>)
 8000858:	f002 fb25 	bl	8002ea6 <HAL_I2CEx_ConfigDigitalFilter>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 f95c 	bl	8000b1e <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000007c 	.word	0x2000007c
 8000870:	40008400 	.word	0x40008400
 8000874:	00909beb 	.word	0x00909beb

08000878 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0a0      	sub	sp, #128	; 0x80
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000890:	f107 0318 	add.w	r3, r7, #24
 8000894:	2254      	movs	r2, #84	; 0x54
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f004 ffe3 	bl	8005864 <memset>
  if(i2cHandle->Instance==I2C4)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a35      	ldr	r2, [pc, #212]	; (8000978 <HAL_I2C_MspInit+0x100>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d162      	bne.n	800096e <HAL_I2C_MspInit+0xf6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80008a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80008ac:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b2:	f107 0318 	add.w	r3, r7, #24
 80008b6:	4618      	mov	r0, r3
 80008b8:	f003 f91a 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008c2:	f000 f92c 	bl	8000b1e <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <HAL_I2C_MspInit+0x104>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a2c      	ldr	r2, [pc, #176]	; (800097c <HAL_I2C_MspInit+0x104>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <HAL_I2C_MspInit+0x104>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <HAL_I2C_MspInit+0x104>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a26      	ldr	r2, [pc, #152]	; (800097c <HAL_I2C_MspInit+0x104>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <HAL_I2C_MspInit+0x104>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008f6:	2340      	movs	r3, #64	; 0x40
 80008f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fa:	2312      	movs	r3, #18
 80008fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8000906:	2308      	movs	r3, #8
 8000908:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800090e:	4619      	mov	r1, r3
 8000910:	481b      	ldr	r0, [pc, #108]	; (8000980 <HAL_I2C_MspInit+0x108>)
 8000912:	f000 fd03 	bl	800131c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091a:	2312      	movs	r3, #18
 800091c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8000926:	2303      	movs	r3, #3
 8000928:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800092e:	4619      	mov	r1, r3
 8000930:	4814      	ldr	r0, [pc, #80]	; (8000984 <HAL_I2C_MspInit+0x10c>)
 8000932:	f000 fcf3 	bl	800131c <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_I2C_MspInit+0x104>)
 8000938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <HAL_I2C_MspInit+0x104>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_I2C_MspInit+0x104>)
 8000944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2052      	movs	r0, #82	; 0x52
 8000954:	f000 fbdf 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000958:	2052      	movs	r0, #82	; 0x52
 800095a:	f000 fbf6 	bl	800114a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	2053      	movs	r0, #83	; 0x53
 8000964:	f000 fbd7 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 8000968:	2053      	movs	r0, #83	; 0x53
 800096a:	f000 fbee 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800096e:	bf00      	nop
 8000970:	3780      	adds	r7, #128	; 0x80
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40008400 	.word	0x40008400
 800097c:	40021000 	.word	0x40021000
 8000980:	48000800 	.word	0x48000800
 8000984:	48000400 	.word	0x48000400

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0b2      	sub	sp, #200	; 0xc8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 fa54 	bl	8000e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f879 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000996:	f7ff feb7 	bl	8000708 <MX_GPIO_Init>
  MX_I2C4_Init();
 800099a:	f7ff ff2d 	bl	80007f8 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 800099e:	f000 f977 	bl	8000c90 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  const char wmsg[] = "Some data"; //Данные которые хотим записать в EEPROM
 80009a2:	4a35      	ldr	r2, [pc, #212]	; (8000a78 <main+0xf0>)
 80009a4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80009a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80009aa:	c303      	stmia	r3!, {r0, r1}
 80009ac:	801a      	strh	r2, [r3, #0]
  char rmsg[sizeof(wmsg) + 64]; //Массив в который будем записывать прочитанные данные из EEPROM
  uint8_t str[100]; //Массив для красивого форматирования для отправки через Serial (не обязательно)

  uint16_t memAddr2 = 0x0003;
 80009ae:	2303      	movs	r3, #3
 80009b0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
  uint16_t memAddr1 = 0x0001; //Адрес в памяти EEPROM
 80009b4:	2301      	movs	r3, #1
 80009b6:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
  uint16_t memAddr0 = 0x0000; //Адрес в памяти EEPROM
 80009ba:	2300      	movs	r3, #0
 80009bc:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

  bool write_done = false;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

  while (!write_done)
 80009c6:	e013      	b.n	80009f0 <main+0x68>
  {
	  if (at24_isConnected())
 80009c8:	f7ff fdf8 	bl	80005bc <at24_isConnected>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00b      	beq.n	80009ea <main+0x62>
	  {
		  at24_write(memAddr2, wmsg, sizeof(wmsg), 100); // Записываем данные из wmsg в EEPROM
 80009d2:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 80009d6:	f8b7 00c4 	ldrh.w	r0, [r7, #196]	; 0xc4
 80009da:	2364      	movs	r3, #100	; 0x64
 80009dc:	220a      	movs	r2, #10
 80009de:	f7ff fdff 	bl	80005e0 <at24_write>
		  write_done = true;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 80009e8:	e002      	b.n	80009f0 <main+0x68>
	  }
	  else
	  {
		  HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f000 fa96 	bl	8000f1c <HAL_Delay>
  while (!write_done)
 80009f0:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 80009f4:	f083 0301 	eor.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d1e4      	bne.n	80009c8 <main+0x40>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (at24_isConnected()) //Проверяем есть ли связь EEPROM
 80009fe:	f7ff fddd 	bl	80005bc <at24_isConnected>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d005      	beq.n	8000a14 <main+0x8c>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //Если есть зажигаем LED 1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2104      	movs	r1, #4
 8000a0c:	481b      	ldr	r0, [pc, #108]	; (8000a7c <main+0xf4>)
 8000a0e:	f000 fe07 	bl	8001620 <HAL_GPIO_WritePin>
 8000a12:	e004      	b.n	8000a1e <main+0x96>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); //Если нет LED 1 не горит
 8000a14:	2200      	movs	r2, #0
 8000a16:	2104      	movs	r1, #4
 8000a18:	4818      	ldr	r0, [pc, #96]	; (8000a7c <main+0xf4>)
 8000a1a:	f000 fe01 	bl	8001620 <HAL_GPIO_WritePin>
	  }

	  if(at24_read(memAddr0, rmsg, 64, 100)) //Читаем данные из EEPROM в rmsg
 8000a1e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000a22:	f8b7 00c0 	ldrh.w	r0, [r7, #192]	; 0xc0
 8000a26:	2364      	movs	r3, #100	; 0x64
 8000a28:	2240      	movs	r2, #64	; 0x40
 8000a2a:	f7ff fe39 	bl	80006a0 <at24_read>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d016      	beq.n	8000a62 <main+0xda>
		{
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Мигаем LED 2, если все ок
 8000a34:	2120      	movs	r1, #32
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f000 fe09 	bl	8001650 <HAL_GPIO_TogglePin>
		  sprintf(str, "Data: %s \r\n", rmsg); //Собираем красивую строку для Serial
 8000a3e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	490e      	ldr	r1, [pc, #56]	; (8000a80 <main+0xf8>)
 8000a46:	4618      	mov	r0, r3
 8000a48:	f004 feec 	bl	8005824 <siprintf>
		  HAL_UART_Transmit_IT(&huart2, str, sizeof(rmsg)+8); //Отправляем по Serial
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2252      	movs	r2, #82	; 0x52
 8000a50:	4619      	mov	r1, r3
 8000a52:	480c      	ldr	r0, [pc, #48]	; (8000a84 <main+0xfc>)
 8000a54:	f003 faea 	bl	800402c <HAL_UART_Transmit_IT>
		  HAL_Delay(1000);
 8000a58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a5c:	f000 fa5e 	bl	8000f1c <HAL_Delay>
 8000a60:	e7cd      	b.n	80009fe <main+0x76>
		}
	  else
	  {
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Мигаем LED 1, если НЕ ок
 8000a62:	2120      	movs	r1, #32
 8000a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a68:	f000 fdf2 	bl	8001650 <HAL_GPIO_TogglePin>
		  HAL_Delay(1000);
 8000a6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a70:	f000 fa54 	bl	8000f1c <HAL_Delay>
	  if (at24_isConnected()) //Проверяем есть ли связь EEPROM
 8000a74:	e7c3      	b.n	80009fe <main+0x76>
 8000a76:	bf00      	nop
 8000a78:	08006190 	.word	0x08006190
 8000a7c:	48000c00 	.word	0x48000c00
 8000a80:	08006184 	.word	0x08006184
 8000a84:	200000cc 	.word	0x200000cc

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b094      	sub	sp, #80	; 0x50
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	2238      	movs	r2, #56	; 0x38
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 fee4 	bl	8005864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f002 fa48 	bl	8002f40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	2302      	movs	r3, #2
 8000abc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ac6:	2328      	movs	r3, #40	; 0x28
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fad4 	bl	8003088 <HAL_RCC_OscConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ae6:	f000 f81a 	bl	8000b1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	230f      	movs	r3, #15
 8000aec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2303      	movs	r3, #3
 8000af0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000af6:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000afa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2104      	movs	r1, #4
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 fdd6 	bl	80036b8 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000b12:	f000 f804 	bl	8000b1e <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3750      	adds	r7, #80	; 0x50
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b22:	b672      	cpsid	i
}
 8000b24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b32:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <HAL_MspInit+0x44>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6613      	str	r3, [r2, #96]	; 0x60
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <HAL_MspInit+0x44>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4a:	4a08      	ldr	r2, [pc, #32]	; (8000b6c <HAL_MspInit+0x44>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6593      	str	r3, [r2, #88]	; 0x58
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <HAL_MspInit+0x44>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <NMI_Handler+0x4>

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f990 	bl	8000ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <USART2_IRQHandler+0x10>)
 8000bca:	f003 fad7 	bl	800417c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000cc 	.word	0x200000cc

08000bd8 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <I2C4_EV_IRQHandler+0x10>)
 8000bde:	f001 f916 	bl	8001e0e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000007c 	.word	0x2000007c

08000bec <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <I2C4_ER_IRQHandler+0x10>)
 8000bf2:	f001 f926 	bl	8001e42 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	2000007c 	.word	0x2000007c

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f004 fe20 	bl	8005874 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20020000 	.word	0x20020000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	200000c8 	.word	0x200000c8
 8000c68:	200002a8 	.word	0x200002a8

08000c6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x20>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <SystemInit+0x20>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000c96:	4a23      	ldr	r2, [pc, #140]	; (8000d24 <MX_USART2_UART_Init+0x94>)
 8000c98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000c9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca2:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca8:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cae:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cb6:	220c      	movs	r2, #12
 8000cb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd8:	4811      	ldr	r0, [pc, #68]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cda:	f003 f957 	bl	8003f8c <HAL_UART_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ce4:	f7ff ff1b 	bl	8000b1e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce8:	2100      	movs	r1, #0
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cec:	f004 fccf 	bl	800568e <HAL_UARTEx_SetTxFifoThreshold>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cf6:	f7ff ff12 	bl	8000b1e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000cfe:	f004 fd04 	bl	800570a <HAL_UARTEx_SetRxFifoThreshold>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d08:	f7ff ff09 	bl	8000b1e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_USART2_UART_Init+0x90>)
 8000d0e:	f004 fc85 	bl	800561c <HAL_UARTEx_DisableFifoMode>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d18:	f7ff ff01 	bl	8000b1e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200000cc 	.word	0x200000cc
 8000d24:	40004400 	.word	0x40004400

08000d28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09e      	sub	sp, #120	; 0x78
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	2254      	movs	r2, #84	; 0x54
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fd8b 	bl	8005864 <memset>
  if(uartHandle->Instance==USART2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <HAL_UART_MspInit+0xb8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d13e      	bne.n	8000dd6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4618      	mov	r0, r3
 8000d66:	f002 fec3 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d70:	f7ff fed5 	bl	8000b1e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d78:	4a1a      	ldr	r2, [pc, #104]	; (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_UART_MspInit+0xbc>)
 8000d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000da4:	230c      	movs	r3, #12
 8000da6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000db4:	2307      	movs	r3, #7
 8000db6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc2:	f000 faab 	bl	800131c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2026      	movs	r0, #38	; 0x26
 8000dcc:	f000 f9a3 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dd0:	2026      	movs	r0, #38	; 0x26
 8000dd2:	f000 f9ba 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3778      	adds	r7, #120	; 0x78
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40021000 	.word	0x40021000

08000de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480d      	ldr	r0, [pc, #52]	; (8000e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dee:	490e      	ldr	r1, [pc, #56]	; (8000e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df0:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <LoopForever+0xe>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e04:	4c0b      	ldr	r4, [pc, #44]	; (8000e34 <LoopForever+0x16>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e12:	f7ff ff2b 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e16:	f004 fd33 	bl	8005880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e1a:	f7ff fdb5 	bl	8000988 <main>

08000e1e <LoopForever>:

LoopForever:
    b LoopForever
 8000e1e:	e7fe      	b.n	8000e1e <LoopForever>
  ldr   r0, =_estack
 8000e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e2c:	08006220 	.word	0x08006220
  ldr r2, =_sbss
 8000e30:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e34:	200002a8 	.word	0x200002a8

08000e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_2_IRQHandler>

08000e3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e40:	2300      	movs	r3, #0
 8000e42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f95b 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 f80e 	bl	8000e6c <HAL_InitTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d002      	beq.n	8000e5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
 8000e5a:	e001      	b.n	8000e60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5c:	f7ff fe64 	bl	8000b28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e60:	79fb      	ldrb	r3, [r7, #7]

}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e78:	4b16      	ldr	r3, [pc, #88]	; (8000ed4 <HAL_InitTick+0x68>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d022      	beq.n	8000ec6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_InitTick+0x6c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <HAL_InitTick+0x68>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f966 	bl	8001166 <HAL_SYSTICK_Config>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d10f      	bne.n	8000ec0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b0f      	cmp	r3, #15
 8000ea4:	d809      	bhi.n	8000eba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8000eae:	f000 f932 	bl	8001116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb2:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_InitTick+0x70>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	e007      	b.n	8000eca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	e004      	b.n	8000eca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e001      	b.n	8000eca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	20000004 	.word	0x20000004

08000ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x1c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <HAL_IncTick+0x20>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_IncTick+0x1c>)
 8000ef0:	6013      	str	r3, [r2, #0]
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	2000015c 	.word	0x2000015c
 8000f00:	20000008 	.word	0x20000008

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	2000015c 	.word	0x2000015c

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d004      	beq.n	8000f40 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_Delay+0x40>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	68fa      	ldr	r2, [r7, #12]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f40:	bf00      	nop
 8000f42:	f7ff ffdf 	bl	8000f04 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d8f7      	bhi.n	8000f42 <HAL_Delay+0x26>
  {
  }
}
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000008 	.word	0x20000008

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff40 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff33 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa4 	bl	80010bc <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800117e:	b480      	push	{r7}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d005      	beq.n	80011a2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2204      	movs	r2, #4
 800119a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e037      	b.n	8001212 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 020e 	bic.w	r2, r2, #14
 80011b0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 0201 	bic.w	r2, r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f003 021f 	and.w	r2, r3, #31
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011ee:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00c      	beq.n	8001212 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001202:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001206:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001210:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d00d      	beq.n	8001264 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2204      	movs	r2, #4
 800124c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e047      	b.n	80012f4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 020e 	bic.w	r2, r2, #14
 8001272:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f022 0201 	bic.w	r2, r2, #1
 8001282:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001292:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a0:	2101      	movs	r1, #1
 80012a2:	fa01 f202 	lsl.w	r2, r1, r2
 80012a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00c      	beq.n	80012d4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	4798      	blx	r3
    }
  }
  return status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800130c:	b2db      	uxtb	r3, r3
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b087      	sub	sp, #28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800132a:	e15a      	b.n	80015e2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2101      	movs	r1, #1
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa01 f303 	lsl.w	r3, r1, r3
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 814c 	beq.w	80015dc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d005      	beq.n	800135c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001358:	2b02      	cmp	r3, #2
 800135a:	d130      	bne.n	80013be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	2203      	movs	r2, #3
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001392:	2201      	movs	r2, #1
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	f003 0201 	and.w	r2, r3, #1
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0303 	and.w	r3, r3, #3
 80013c6:	2b03      	cmp	r3, #3
 80013c8:	d017      	beq.n	80013fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d123      	bne.n	800144e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	08da      	lsrs	r2, r3, #3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3208      	adds	r2, #8
 800140e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	220f      	movs	r2, #15
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	08da      	lsrs	r2, r3, #3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3208      	adds	r2, #8
 8001448:	6939      	ldr	r1, [r7, #16]
 800144a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0203 	and.w	r2, r3, #3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 80a6 	beq.w	80015dc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001490:	4b5b      	ldr	r3, [pc, #364]	; (8001600 <HAL_GPIO_Init+0x2e4>)
 8001492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001494:	4a5a      	ldr	r2, [pc, #360]	; (8001600 <HAL_GPIO_Init+0x2e4>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6613      	str	r3, [r2, #96]	; 0x60
 800149c:	4b58      	ldr	r3, [pc, #352]	; (8001600 <HAL_GPIO_Init+0x2e4>)
 800149e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014a8:	4a56      	ldr	r2, [pc, #344]	; (8001604 <HAL_GPIO_Init+0x2e8>)
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	3302      	adds	r3, #2
 80014b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	220f      	movs	r2, #15
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014d2:	d01f      	beq.n	8001514 <HAL_GPIO_Init+0x1f8>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a4c      	ldr	r2, [pc, #304]	; (8001608 <HAL_GPIO_Init+0x2ec>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d019      	beq.n	8001510 <HAL_GPIO_Init+0x1f4>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a4b      	ldr	r2, [pc, #300]	; (800160c <HAL_GPIO_Init+0x2f0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d013      	beq.n	800150c <HAL_GPIO_Init+0x1f0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a4a      	ldr	r2, [pc, #296]	; (8001610 <HAL_GPIO_Init+0x2f4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00d      	beq.n	8001508 <HAL_GPIO_Init+0x1ec>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_GPIO_Init+0x2f8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d007      	beq.n	8001504 <HAL_GPIO_Init+0x1e8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2fc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d101      	bne.n	8001500 <HAL_GPIO_Init+0x1e4>
 80014fc:	2305      	movs	r3, #5
 80014fe:	e00a      	b.n	8001516 <HAL_GPIO_Init+0x1fa>
 8001500:	2306      	movs	r3, #6
 8001502:	e008      	b.n	8001516 <HAL_GPIO_Init+0x1fa>
 8001504:	2304      	movs	r3, #4
 8001506:	e006      	b.n	8001516 <HAL_GPIO_Init+0x1fa>
 8001508:	2303      	movs	r3, #3
 800150a:	e004      	b.n	8001516 <HAL_GPIO_Init+0x1fa>
 800150c:	2302      	movs	r3, #2
 800150e:	e002      	b.n	8001516 <HAL_GPIO_Init+0x1fa>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <HAL_GPIO_Init+0x1fa>
 8001514:	2300      	movs	r3, #0
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	f002 0203 	and.w	r2, r2, #3
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	4093      	lsls	r3, r2
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001526:	4937      	ldr	r1, [pc, #220]	; (8001604 <HAL_GPIO_Init+0x2e8>)
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	3302      	adds	r3, #2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001534:	4b39      	ldr	r3, [pc, #228]	; (800161c <HAL_GPIO_Init+0x300>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	43db      	mvns	r3, r3
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	4013      	ands	r3, r2
 8001542:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001558:	4a30      	ldr	r2, [pc, #192]	; (800161c <HAL_GPIO_Init+0x300>)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800155e:	4b2f      	ldr	r3, [pc, #188]	; (800161c <HAL_GPIO_Init+0x300>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43db      	mvns	r3, r3
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4313      	orrs	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001582:	4a26      	ldr	r2, [pc, #152]	; (800161c <HAL_GPIO_Init+0x300>)
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001588:	4b24      	ldr	r3, [pc, #144]	; (800161c <HAL_GPIO_Init+0x300>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <HAL_GPIO_Init+0x300>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_GPIO_Init+0x300>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015d6:	4a11      	ldr	r2, [pc, #68]	; (800161c <HAL_GPIO_Init+0x300>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f ae9d 	bne.w	800132c <HAL_GPIO_Init+0x10>
  }
}
 80015f2:	bf00      	nop
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40021000 	.word	0x40021000
 8001604:	40010000 	.word	0x40010000
 8001608:	48000400 	.word	0x48000400
 800160c:	48000800 	.word	0x48000800
 8001610:	48000c00 	.word	0x48000c00
 8001614:	48001000 	.word	0x48001000
 8001618:	48001400 	.word	0x48001400
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800163c:	e002      	b.n	8001644 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	041a      	lsls	r2, r3, #16
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43d9      	mvns	r1, r3
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	400b      	ands	r3, r1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e081      	b.n	800179a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d106      	bne.n	80016b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff f8e4 	bl	8000878 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	689a      	ldr	r2, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	e006      	b.n	800170c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800170a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d104      	bne.n	800171e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800171c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800172c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001730:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001740:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69d9      	ldr	r1, [r3, #28]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1a      	ldr	r2, [r3, #32]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0201 	orr.w	r2, r2, #1
 800177a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2220      	movs	r2, #32
 8001786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
	...

080017a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af02      	add	r7, sp, #8
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	817b      	strh	r3, [r7, #10]
 80017b6:	460b      	mov	r3, r1
 80017b8:	813b      	strh	r3, [r7, #8]
 80017ba:	4613      	mov	r3, r2
 80017bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b20      	cmp	r3, #32
 80017c8:	f040 80f9 	bne.w	80019be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017cc:	6a3b      	ldr	r3, [r7, #32]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d002      	beq.n	80017d8 <HAL_I2C_Mem_Write+0x34>
 80017d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0ed      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_I2C_Mem_Write+0x4e>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e0e6      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017fa:	f7ff fb83 	bl	8000f04 <HAL_GetTick>
 80017fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	2319      	movs	r3, #25
 8001806:	2201      	movs	r2, #1
 8001808:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f001 f8c6 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e0d1      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2221      	movs	r2, #33	; 0x21
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2240      	movs	r2, #64	; 0x40
 8001828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6a3a      	ldr	r2, [r7, #32]
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800183c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001844:	88f8      	ldrh	r0, [r7, #6]
 8001846:	893a      	ldrh	r2, [r7, #8]
 8001848:	8979      	ldrh	r1, [r7, #10]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	9301      	str	r3, [sp, #4]
 800184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	4603      	mov	r3, r0
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f000 fc87 	bl	8002168 <I2C_RequestMemoryWrite>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0a9      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	2bff      	cmp	r3, #255	; 0xff
 8001874:	d90e      	bls.n	8001894 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	22ff      	movs	r2, #255	; 0xff
 800187a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001880:	b2da      	uxtb	r2, r3
 8001882:	8979      	ldrh	r1, [r7, #10]
 8001884:	2300      	movs	r3, #0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f001 fa2f 	bl	8002cf0 <I2C_TransferConfig>
 8001892:	e00f      	b.n	80018b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001898:	b29a      	uxth	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	8979      	ldrh	r1, [r7, #10]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f001 fa1e 	bl	8002cf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b4:	697a      	ldr	r2, [r7, #20]
 80018b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b8:	68f8      	ldr	r0, [r7, #12]
 80018ba:	f001 f8b0 	bl	8002a1e <I2C_WaitOnTXISFlagUntilTimeout>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e07b      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	781a      	ldrb	r2, [r3, #0]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d8:	1c5a      	adds	r2, r3, #1
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d034      	beq.n	800196c <HAL_I2C_Mem_Write+0x1c8>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001906:	2b00      	cmp	r3, #0
 8001908:	d130      	bne.n	800196c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	2200      	movs	r2, #0
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f001 f842 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e04d      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d90e      	bls.n	800194c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	22ff      	movs	r2, #255	; 0xff
 8001932:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001938:	b2da      	uxtb	r2, r3
 800193a:	8979      	ldrh	r1, [r7, #10]
 800193c:	2300      	movs	r3, #0
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f001 f9d3 	bl	8002cf0 <I2C_TransferConfig>
 800194a:	e00f      	b.n	800196c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	b2da      	uxtb	r2, r3
 800195c:	8979      	ldrh	r1, [r7, #10]
 800195e:	2300      	movs	r3, #0
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f001 f9c2 	bl	8002cf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d19e      	bne.n	80018b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f001 f88f 	bl	8002a9e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e01a      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2220      	movs	r2, #32
 8001990:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6859      	ldr	r1, [r3, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_I2C_Mem_Write+0x224>)
 800199e:	400b      	ands	r3, r1
 80019a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2220      	movs	r2, #32
 80019a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e000      	b.n	80019c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80019be:	2302      	movs	r3, #2
  }
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	fe00e800 	.word	0xfe00e800

080019cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	817b      	strh	r3, [r7, #10]
 80019de:	460b      	mov	r3, r1
 80019e0:	813b      	strh	r3, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	f040 80fd 	bne.w	8001bee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d002      	beq.n	8001a00 <HAL_I2C_Mem_Read+0x34>
 80019fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d105      	bne.n	8001a0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a06:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0f1      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_I2C_Mem_Read+0x4e>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e0ea      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x224>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a22:	f7ff fa6f 	bl	8000f04 <HAL_GetTick>
 8001a26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2319      	movs	r3, #25
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f000 ffb2 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0d5      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2222      	movs	r2, #34	; 0x22
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2240      	movs	r2, #64	; 0x40
 8001a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6a3a      	ldr	r2, [r7, #32]
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a6c:	88f8      	ldrh	r0, [r7, #6]
 8001a6e:	893a      	ldrh	r2, [r7, #8]
 8001a70:	8979      	ldrh	r1, [r7, #10]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fbc7 	bl	8002210 <I2C_RequestMemoryRead>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0ad      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	2bff      	cmp	r3, #255	; 0xff
 8001a9c:	d90e      	bls.n	8001abc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	22ff      	movs	r2, #255	; 0xff
 8001aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	8979      	ldrh	r1, [r7, #10]
 8001aac:	4b52      	ldr	r3, [pc, #328]	; (8001bf8 <HAL_I2C_Mem_Read+0x22c>)
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f001 f91b 	bl	8002cf0 <I2C_TransferConfig>
 8001aba:	e00f      	b.n	8001adc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	8979      	ldrh	r1, [r7, #10]
 8001ace:	4b4a      	ldr	r3, [pc, #296]	; (8001bf8 <HAL_I2C_Mem_Read+0x22c>)
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f001 f90a 	bl	8002cf0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 ff59 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e07c      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d034      	beq.n	8001b9c <HAL_I2C_Mem_Read+0x1d0>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d130      	bne.n	8001b9c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b40:	2200      	movs	r2, #0
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 ff2a 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e04d      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2bff      	cmp	r3, #255	; 0xff
 8001b5c:	d90e      	bls.n	8001b7c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	22ff      	movs	r2, #255	; 0xff
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	8979      	ldrh	r1, [r7, #10]
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9300      	str	r3, [sp, #0]
 8001b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f001 f8bb 	bl	8002cf0 <I2C_TransferConfig>
 8001b7a:	e00f      	b.n	8001b9c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	8979      	ldrh	r1, [r7, #10]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f001 f8aa 	bl	8002cf0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d19a      	bne.n	8001adc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f000 ff77 	bl	8002a9e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e01a      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2220      	movs	r2, #32
 8001bc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_I2C_Mem_Read+0x230>)
 8001bce:	400b      	ands	r3, r1
 8001bd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001bee:	2302      	movs	r3, #2
  }
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	80002400 	.word	0x80002400
 8001bfc:	fe00e800 	.word	0xfe00e800

08001c00 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af02      	add	r7, sp, #8
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b20      	cmp	r3, #32
 8001c1e:	f040 80f1 	bne.w	8001e04 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c30:	d101      	bne.n	8001c36 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001c32:	2302      	movs	r3, #2
 8001c34:	e0e7      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d101      	bne.n	8001c44 <HAL_I2C_IsDeviceReady+0x44>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e0e0      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x206>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2224      	movs	r2, #36	; 0x24
 8001c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d107      	bne.n	8001c72 <HAL_I2C_IsDeviceReady+0x72>
 8001c62:	897b      	ldrh	r3, [r7, #10]
 8001c64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c70:	e004      	b.n	8001c7c <HAL_I2C_IsDeviceReady+0x7c>
 8001c72:	897b      	ldrh	r3, [r7, #10]
 8001c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c78:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	6812      	ldr	r2, [r2, #0]
 8001c80:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff f93f 	bl	8000f04 <HAL_GetTick>
 8001c86:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	bf0c      	ite	eq
 8001c96:	2301      	moveq	r3, #1
 8001c98:	2300      	movne	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	f003 0310 	and.w	r3, r3, #16
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	bf0c      	ite	eq
 8001cac:	2301      	moveq	r3, #1
 8001cae:	2300      	movne	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001cb4:	e034      	b.n	8001d20 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cbe:	f7ff f921 	bl	8000f04 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d302      	bcc.n	8001cd4 <HAL_I2C_IsDeviceReady+0xd4>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10f      	bne.n	8001cf4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	f043 0220 	orr.w	r2, r3, #32
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e088      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	f003 0320 	and.w	r3, r3, #32
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b10      	cmp	r3, #16
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d20:	7ffb      	ldrb	r3, [r7, #31]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <HAL_I2C_IsDeviceReady+0x12c>
 8001d26:	7fbb      	ldrb	r3, [r7, #30]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0c4      	beq.n	8001cb6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b10      	cmp	r3, #16
 8001d38:	d01a      	beq.n	8001d70 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	2120      	movs	r1, #32
 8001d44:	68f8      	ldr	r0, [r7, #12]
 8001d46:	f000 fe2a 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e058      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e04a      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	2200      	movs	r2, #0
 8001d78:	2120      	movs	r1, #32
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fe0f 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e03d      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2210      	movs	r2, #16
 8001d90:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2220      	movs	r2, #32
 8001d98:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d118      	bne.n	8001dd4 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001db0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2200      	movs	r2, #0
 8001dba:	2120      	movs	r1, #32
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 fdee 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e01c      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	f63f af3b 	bhi.w	8001c5a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2220      	movs	r2, #32
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001e04:	2302      	movs	r3, #2
  }
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d005      	beq.n	8001e3a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e32:	68ba      	ldr	r2, [r7, #8]
 8001e34:	68f9      	ldr	r1, [r7, #12]
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	4798      	blx	r3
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00f      	beq.n	8001e84 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e82:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00f      	beq.n	8001eae <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	f043 0208 	orr.w	r2, r3, #8
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00f      	beq.n	8001ed8 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec6:	f043 0202 	orr.w	r2, r3, #2
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f003 030b 	and.w	r3, r3, #11
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 fc1e 	bl	800272c <I2C_ITError>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	70fb      	strb	r3, [r7, #3]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4e:	4770      	bx	lr

08001f50 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <I2C_Slave_ISR_IT+0x24>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	e0e1      	b.n	8002160 <I2C_Slave_ISR_IT+0x1e8>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d008      	beq.n	8001fc0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d003      	beq.n	8001fc0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001fb8:	6939      	ldr	r1, [r7, #16]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fa5c 	bl	8002478 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d04b      	beq.n	8002062 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d046      	beq.n	8002062 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d128      	bne.n	8002030 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b28      	cmp	r3, #40	; 0x28
 8001fe8:	d108      	bne.n	8001ffc <I2C_Slave_ISR_IT+0x84>
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff0:	d104      	bne.n	8001ffc <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ff2:	6939      	ldr	r1, [r7, #16]
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fb45 	bl	8002684 <I2C_ITListenCplt>
 8001ffa:	e031      	b.n	8002060 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b29      	cmp	r3, #41	; 0x29
 8002006:	d10e      	bne.n	8002026 <I2C_Slave_ISR_IT+0xae>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800200e:	d00a      	beq.n	8002026 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2210      	movs	r2, #16
 8002016:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002018:	68f8      	ldr	r0, [r7, #12]
 800201a:	f000 fc7e 	bl	800291a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f9ce 	bl	80023c0 <I2C_ITSlaveSeqCplt>
 8002024:	e01c      	b.n	8002060 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2210      	movs	r2, #16
 800202c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800202e:	e08f      	b.n	8002150 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f043 0204 	orr.w	r2, r3, #4
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <I2C_Slave_ISR_IT+0xda>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002050:	d17e      	bne.n	8002150 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002056:	4619      	mov	r1, r3
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 fb67 	bl	800272c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800205e:	e077      	b.n	8002150 <I2C_Slave_ISR_IT+0x1d8>
 8002060:	e076      	b.n	8002150 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d02f      	beq.n	80020cc <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002072:	2b00      	cmp	r3, #0
 8002074:	d02a      	beq.n	80020cc <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d018      	beq.n	80020b2 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d14b      	bne.n	8002154 <I2C_Slave_ISR_IT+0x1dc>
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020c2:	d047      	beq.n	8002154 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f97b 	bl	80023c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80020ca:	e043      	b.n	8002154 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f003 0308 	and.w	r3, r3, #8
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80020e0:	6939      	ldr	r1, [r7, #16]
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f8e8 	bl	80022b8 <I2C_ITAddrCplt>
 80020e8:	e035      	b.n	8002156 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d030      	beq.n	8002156 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d02b      	beq.n	8002156 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002102:	b29b      	uxth	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d018      	beq.n	800213a <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	781a      	ldrb	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002122:	b29b      	uxth	r3, r3
 8002124:	3b01      	subs	r3, #1
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
 8002138:	e00d      	b.n	8002156 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002140:	d002      	beq.n	8002148 <I2C_Slave_ISR_IT+0x1d0>
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d106      	bne.n	8002156 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f939 	bl	80023c0 <I2C_ITSlaveSeqCplt>
 800214e:	e002      	b.n	8002156 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8002150:	bf00      	nop
 8002152:	e000      	b.n	8002156 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8002154:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	4608      	mov	r0, r1
 8002172:	4611      	mov	r1, r2
 8002174:	461a      	mov	r2, r3
 8002176:	4603      	mov	r3, r0
 8002178:	817b      	strh	r3, [r7, #10]
 800217a:	460b      	mov	r3, r1
 800217c:	813b      	strh	r3, [r7, #8]
 800217e:	4613      	mov	r3, r2
 8002180:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002182:	88fb      	ldrh	r3, [r7, #6]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	8979      	ldrh	r1, [r7, #10]
 8002188:	4b20      	ldr	r3, [pc, #128]	; (800220c <I2C_RequestMemoryWrite+0xa4>)
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fdad 	bl	8002cf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	69b9      	ldr	r1, [r7, #24]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fc3f 	bl	8002a1e <I2C_WaitOnTXISFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e02c      	b.n	8002204 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d105      	bne.n	80021bc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021b0:	893b      	ldrh	r3, [r7, #8]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28
 80021ba:	e015      	b.n	80021e8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80021bc:	893b      	ldrh	r3, [r7, #8]
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	69fa      	ldr	r2, [r7, #28]
 80021cc:	69b9      	ldr	r1, [r7, #24]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fc25 	bl	8002a1e <I2C_WaitOnTXISFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e012      	b.n	8002204 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80021de:	893b      	ldrh	r3, [r7, #8]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2200      	movs	r2, #0
 80021f0:	2180      	movs	r1, #128	; 0x80
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 fbd3 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	80002000 	.word	0x80002000

08002210 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	4608      	mov	r0, r1
 800221a:	4611      	mov	r1, r2
 800221c:	461a      	mov	r2, r3
 800221e:	4603      	mov	r3, r0
 8002220:	817b      	strh	r3, [r7, #10]
 8002222:	460b      	mov	r3, r1
 8002224:	813b      	strh	r3, [r7, #8]
 8002226:	4613      	mov	r3, r2
 8002228:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800222a:	88fb      	ldrh	r3, [r7, #6]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	8979      	ldrh	r1, [r7, #10]
 8002230:	4b20      	ldr	r3, [pc, #128]	; (80022b4 <I2C_RequestMemoryRead+0xa4>)
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2300      	movs	r3, #0
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fd5a 	bl	8002cf0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fbec 	bl	8002a1e <I2C_WaitOnTXISFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e02c      	b.n	80022aa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d105      	bne.n	8002262 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002256:	893b      	ldrh	r3, [r7, #8]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28
 8002260:	e015      	b.n	800228e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002262:	893b      	ldrh	r3, [r7, #8]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	b29b      	uxth	r3, r3
 8002268:	b2da      	uxtb	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002270:	69fa      	ldr	r2, [r7, #28]
 8002272:	69b9      	ldr	r1, [r7, #24]
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fbd2 	bl	8002a1e <I2C_WaitOnTXISFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e012      	b.n	80022aa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002284:	893b      	ldrh	r3, [r7, #8]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2200      	movs	r2, #0
 8002296:	2140      	movs	r1, #64	; 0x40
 8002298:	68f8      	ldr	r0, [r7, #12]
 800229a:	f000 fb80 	bl	800299e <I2C_WaitOnFlagUntilTimeout>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	80002000 	.word	0x80002000

080022b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022ce:	2b28      	cmp	r3, #40	; 0x28
 80022d0:	d16a      	bne.n	80023a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	0c1b      	lsrs	r3, r3, #16
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80022f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800230c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d138      	bne.n	8002388 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002316:	897b      	ldrh	r3, [r7, #10]
 8002318:	09db      	lsrs	r3, r3, #7
 800231a:	b29a      	uxth	r2, r3
 800231c:	89bb      	ldrh	r3, [r7, #12]
 800231e:	4053      	eors	r3, r2
 8002320:	b29b      	uxth	r3, r3
 8002322:	f003 0306 	and.w	r3, r3, #6
 8002326:	2b00      	cmp	r3, #0
 8002328:	d11c      	bne.n	8002364 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800232a:	897b      	ldrh	r3, [r7, #10]
 800232c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	2b02      	cmp	r3, #2
 800233e:	d13b      	bne.n	80023b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2208      	movs	r2, #8
 800234c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002356:	89ba      	ldrh	r2, [r7, #12]
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	4619      	mov	r1, r3
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fddf 	bl	8001f20 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002362:	e029      	b.n	80023b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002364:	893b      	ldrh	r3, [r7, #8]
 8002366:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 fcf1 	bl	8002d54 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800237a:	89ba      	ldrh	r2, [r7, #12]
 800237c:	7bfb      	ldrb	r3, [r7, #15]
 800237e:	4619      	mov	r1, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fdcd 	bl	8001f20 <HAL_I2C_AddrCallback>
}
 8002386:	e017      	b.n	80023b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002388:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fce1 	bl	8002d54 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800239a:	89ba      	ldrh	r2, [r7, #12]
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	4619      	mov	r1, r3
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fdbd 	bl	8001f20 <HAL_I2C_AddrCallback>
}
 80023a6:	e007      	b.n	80023b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2208      	movs	r2, #8
 80023ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	e00c      	b.n	800240e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d007      	beq.n	800240e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800240c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b29      	cmp	r3, #41	; 0x29
 8002418:	d112      	bne.n	8002440 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2228      	movs	r2, #40	; 0x28
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2221      	movs	r2, #33	; 0x21
 8002426:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002428:	2101      	movs	r1, #1
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 fc92 	bl	8002d54 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff fd5d 	bl	8001ef8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800243e:	e017      	b.n	8002470 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b2a      	cmp	r3, #42	; 0x2a
 800244a:	d111      	bne.n	8002470 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2228      	movs	r2, #40	; 0x28
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2222      	movs	r2, #34	; 0x22
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800245a:	2102      	movs	r1, #2
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fc79 	bl	8002d54 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff fd4e 	bl	8001f0c <HAL_I2C_SlaveRxCpltCallback>
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002494:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2220      	movs	r2, #32
 800249c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b21      	cmp	r3, #33	; 0x21
 80024a2:	d002      	beq.n	80024aa <I2C_ITSlaveCplt+0x32>
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b29      	cmp	r3, #41	; 0x29
 80024a8:	d108      	bne.n	80024bc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80024aa:	f248 0101 	movw	r1, #32769	; 0x8001
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 fc50 	bl	8002d54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2221      	movs	r2, #33	; 0x21
 80024b8:	631a      	str	r2, [r3, #48]	; 0x30
 80024ba:	e00d      	b.n	80024d8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b22      	cmp	r3, #34	; 0x22
 80024c0:	d002      	beq.n	80024c8 <I2C_ITSlaveCplt+0x50>
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b2a      	cmp	r3, #42	; 0x2a
 80024c6:	d107      	bne.n	80024d8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80024c8:	f248 0102 	movw	r1, #32770	; 0x8002
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 fc41 	bl	8002d54 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2222      	movs	r2, #34	; 0x22
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4b62      	ldr	r3, [pc, #392]	; (800267c <I2C_ITSlaveCplt+0x204>)
 80024f4:	400b      	ands	r3, r1
 80024f6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 fa0e 	bl	800291a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002516:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01f      	beq.n	8002560 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	b29a      	uxth	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800252e:	e017      	b.n	8002560 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d012      	beq.n	8002560 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002548:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800254e:	2b00      	cmp	r3, #0
 8002550:	d006      	beq.n	8002560 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	b29a      	uxth	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f023 0304 	bic.w	r3, r3, #4
 8002570:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d005      	beq.n	80025c2 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ba:	f043 0204 	orr.w	r2, r3, #4
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d010      	beq.n	80025fa <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025dc:	4619      	mov	r1, r3
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f8a4 	bl	800272c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b28      	cmp	r3, #40	; 0x28
 80025ee:	d141      	bne.n	8002674 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80025f0:	6979      	ldr	r1, [r7, #20]
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f846 	bl	8002684 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80025f8:	e03c      	b.n	8002674 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002602:	d014      	beq.n	800262e <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fedb 	bl	80023c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a1c      	ldr	r2, [pc, #112]	; (8002680 <I2C_ITSlaveCplt+0x208>)
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fc88 	bl	8001f3c <HAL_I2C_ListenCpltCallback>
}
 800262c:	e022      	b.n	8002674 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b22      	cmp	r3, #34	; 0x22
 8002638:	d10e      	bne.n	8002658 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff fc5b 	bl	8001f0c <HAL_I2C_SlaveRxCpltCallback>
}
 8002656:	e00d      	b.n	8002674 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7ff fc42 	bl	8001ef8 <HAL_I2C_SlaveTxCpltCallback>
}
 8002674:	bf00      	nop
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	fe00e800 	.word	0xfe00e800
 8002680:	ffff0000 	.word	0xffff0000

08002684 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a25      	ldr	r2, [pc, #148]	; (8002728 <I2C_ITListenCplt+0xa4>)
 8002692:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d022      	beq.n	8002700 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d012      	beq.n	8002700 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026de:	3b01      	subs	r3, #1
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	f043 0204 	orr.w	r2, r3, #4
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002700:	f248 0103 	movw	r1, #32771	; 0x8003
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 fb25 	bl	8002d54 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2210      	movs	r2, #16
 8002710:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fc0e 	bl	8001f3c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002720:	bf00      	nop
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	ffff0000 	.word	0xffff0000

0800272c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800273c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a5d      	ldr	r2, [pc, #372]	; (80028c0 <I2C_ITError+0x194>)
 800274a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b28      	cmp	r3, #40	; 0x28
 8002762:	d005      	beq.n	8002770 <I2C_ITError+0x44>
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b29      	cmp	r3, #41	; 0x29
 8002768:	d002      	beq.n	8002770 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b2a      	cmp	r3, #42	; 0x2a
 800276e:	d10b      	bne.n	8002788 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002770:	2103      	movs	r1, #3
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 faee 	bl	8002d54 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2228      	movs	r2, #40	; 0x28
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <I2C_ITError+0x198>)
 8002784:	635a      	str	r2, [r3, #52]	; 0x34
 8002786:	e011      	b.n	80027ac <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002788:	f248 0103 	movw	r1, #32771	; 0x8003
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fae1 	bl	8002d54 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b60      	cmp	r3, #96	; 0x60
 800279c:	d003      	beq.n	80027a6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d039      	beq.n	800282e <I2C_ITError+0x102>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b11      	cmp	r3, #17
 80027be:	d002      	beq.n	80027c6 <I2C_ITError+0x9a>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2b21      	cmp	r3, #33	; 0x21
 80027c4:	d133      	bne.n	800282e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d4:	d107      	bne.n	80027e6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027e4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fd87 	bl	80012fe <HAL_DMA_GetState>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d017      	beq.n	8002826 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	4a33      	ldr	r2, [pc, #204]	; (80028c8 <I2C_ITError+0x19c>)
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fd10 	bl	8001230 <HAL_DMA_Abort_IT>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d04d      	beq.n	80028b2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002820:	4610      	mov	r0, r2
 8002822:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002824:	e045      	b.n	80028b2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f850 	bl	80028cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800282c:	e041      	b.n	80028b2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d039      	beq.n	80028aa <I2C_ITError+0x17e>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b12      	cmp	r3, #18
 800283a:	d002      	beq.n	8002842 <I2C_ITError+0x116>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b22      	cmp	r3, #34	; 0x22
 8002840:	d133      	bne.n	80028aa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800284c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002850:	d107      	bne.n	8002862 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002860:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe fd49 	bl	80012fe <HAL_DMA_GetState>
 800286c:	4603      	mov	r3, r0
 800286e:	2b01      	cmp	r3, #1
 8002870:	d017      	beq.n	80028a2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002876:	4a14      	ldr	r2, [pc, #80]	; (80028c8 <I2C_ITError+0x19c>)
 8002878:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fcd2 	bl	8001230 <HAL_DMA_Abort_IT>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d011      	beq.n	80028b6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800289c:	4610      	mov	r0, r2
 800289e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028a0:	e009      	b.n	80028b6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f812 	bl	80028cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028a8:	e005      	b.n	80028b6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f80e 	bl	80028cc <I2C_TreatErrorCallback>
  }
}
 80028b0:	e002      	b.n	80028b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80028b2:	bf00      	nop
 80028b4:	e000      	b.n	80028b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80028b6:	bf00      	nop
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	ffff0000 	.word	0xffff0000
 80028c4:	08001f79 	.word	0x08001f79
 80028c8:	08002963 	.word	0x08002963

080028cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b60      	cmp	r3, #96	; 0x60
 80028de:	d10e      	bne.n	80028fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fb34 	bl	8001f64 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028fc:	e009      	b.n	8002912 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff fb1f 	bl	8001f50 <HAL_I2C_ErrorCallback>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b02      	cmp	r3, #2
 800292e:	d103      	bne.n	8002938 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2200      	movs	r2, #0
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b01      	cmp	r3, #1
 8002944:	d007      	beq.n	8002956 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699a      	ldr	r2, [r3, #24]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	619a      	str	r2, [r3, #24]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800297c:	2200      	movs	r2, #0
 800297e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	2200      	movs	r2, #0
 800298e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f7ff ff9b 	bl	80028cc <I2C_TreatErrorCallback>
}
 8002996:	bf00      	nop
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	603b      	str	r3, [r7, #0]
 80029aa:	4613      	mov	r3, r2
 80029ac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029ae:	e022      	b.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b6:	d01e      	beq.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b8:	f7fe faa4 	bl	8000f04 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d302      	bcc.n	80029ce <I2C_WaitOnFlagUntilTimeout+0x30>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2220      	movs	r2, #32
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e00f      	b.n	8002a16 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699a      	ldr	r2, [r3, #24]
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	4013      	ands	r3, r2
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	bf0c      	ite	eq
 8002a06:	2301      	moveq	r3, #1
 8002a08:	2300      	movne	r3, #0
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d0cd      	beq.n	80029b0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a2a:	e02c      	b.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f871 	bl	8002b18 <I2C_IsErrorOccurred>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e02a      	b.n	8002a96 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d01e      	beq.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a48:	f7fe fa5c 	bl	8000f04 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d302      	bcc.n	8002a5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d113      	bne.n	8002a86 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f043 0220 	orr.w	r2, r3, #32
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d1cb      	bne.n	8002a2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aaa:	e028      	b.n	8002afe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 f831 	bl	8002b18 <I2C_IsErrorOccurred>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e026      	b.n	8002b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac0:	f7fe fa20 	bl	8000f04 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d302      	bcc.n	8002ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d113      	bne.n	8002afe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	f043 0220 	orr.w	r2, r3, #32
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e007      	b.n	8002b0e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0320 	and.w	r3, r3, #32
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	d1cf      	bne.n	8002aac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d075      	beq.n	8002c30 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b4c:	e056      	b.n	8002bfc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d052      	beq.n	8002bfc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7fe f9d5 	bl	8000f04 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <I2C_IsErrorOccurred+0x54>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d147      	bne.n	8002bfc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b8e:	d12e      	bne.n	8002bee <I2C_IsErrorOccurred+0xd6>
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b96:	d02a      	beq.n	8002bee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b98:	7cfb      	ldrb	r3, [r7, #19]
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	d027      	beq.n	8002bee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bac:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002bae:	f7fe f9a9 	bl	8000f04 <HAL_GetTick>
 8002bb2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bb4:	e01b      	b.n	8002bee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002bb6:	f7fe f9a5 	bl	8000f04 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b19      	cmp	r3, #25
 8002bc2:	d914      	bls.n	8002bee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f043 0220 	orr.w	r2, r3, #32
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f003 0320 	and.w	r3, r3, #32
 8002bf8:	2b20      	cmp	r3, #32
 8002bfa:	d1dc      	bne.n	8002bb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d003      	beq.n	8002c12 <I2C_IsErrorOccurred+0xfa>
 8002c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d09d      	beq.n	8002b4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	f043 0308 	orr.w	r3, r3, #8
 8002c6a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f043 0302 	orr.w	r3, r3, #2
 8002c8c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01c      	beq.n	8002ce0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff fe37 	bl	800291a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <I2C_IsErrorOccurred+0x1d4>)
 8002cb8:	400b      	ands	r3, r1
 8002cba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cc0:	6a3b      	ldr	r3, [r7, #32]
 8002cc2:	431a      	orrs	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3728      	adds	r7, #40	; 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	fe00e800 	.word	0xfe00e800

08002cf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	817b      	strh	r3, [r7, #10]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d02:	897b      	ldrh	r3, [r7, #10]
 8002d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d08:	7a7b      	ldrb	r3, [r7, #9]
 8002d0a:	041b      	lsls	r3, r3, #16
 8002d0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d10:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d1e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	0d5b      	lsrs	r3, r3, #21
 8002d2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <I2C_TransferConfig+0x60>)
 8002d30:	430b      	orrs	r3, r1
 8002d32:	43db      	mvns	r3, r3
 8002d34:	ea02 0103 	and.w	r1, r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	03ff63ff 	.word	0x03ff63ff

08002d54 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00f      	beq.n	8002d8e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002d74:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d82:	2b28      	cmp	r3, #40	; 0x28
 8002d84:	d003      	beq.n	8002d8e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002d8c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00f      	beq.n	8002db8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002d9e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dac:	2b28      	cmp	r3, #40	; 0x28
 8002dae:	d003      	beq.n	8002db8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002db6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002db8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	da03      	bge.n	8002dc8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002dc6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002dc8:	887b      	ldrh	r3, [r7, #2]
 8002dca:	2b10      	cmp	r3, #16
 8002dcc:	d103      	bne.n	8002dd6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002dd4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002dd6:	887b      	ldrh	r3, [r7, #2]
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d103      	bne.n	8002de4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f043 0320 	orr.w	r3, r3, #32
 8002de2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d103      	bne.n	8002df2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6819      	ldr	r1, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	400a      	ands	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
}
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b20      	cmp	r3, #32
 8002e24:	d138      	bne.n	8002e98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e032      	b.n	8002e9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2224      	movs	r2, #36	; 0x24
 8002e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	683a      	ldr	r2, [r7, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	e000      	b.n	8002e9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e98:	2302      	movs	r3, #2
  }
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b085      	sub	sp, #20
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d139      	bne.n	8002f30 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e033      	b.n	8002f32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2224      	movs	r2, #36	; 0x24
 8002ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0201 	bic.w	r2, r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ef8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e000      	b.n	8002f32 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f30:	2302      	movs	r3, #2
  }
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d141      	bne.n	8002fd2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5a:	d131      	bne.n	8002fc0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f5c:	4b47      	ldr	r3, [pc, #284]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f62:	4a46      	ldr	r2, [pc, #280]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f6c:	4b43      	ldr	r3, [pc, #268]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f74:	4a41      	ldr	r2, [pc, #260]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f7c:	4b40      	ldr	r3, [pc, #256]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2232      	movs	r2, #50	; 0x32
 8002f82:	fb02 f303 	mul.w	r3, r2, r3
 8002f86:	4a3f      	ldr	r2, [pc, #252]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	0c9b      	lsrs	r3, r3, #18
 8002f8e:	3301      	adds	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f92:	e002      	b.n	8002f9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f9a:	4b38      	ldr	r3, [pc, #224]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fa6:	d102      	bne.n	8002fae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f2      	bne.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fae:	4b33      	ldr	r3, [pc, #204]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d158      	bne.n	800306e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e057      	b.n	8003070 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fc0:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc6:	4a2d      	ldr	r2, [pc, #180]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002fd0:	e04d      	b.n	800306e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd8:	d141      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fda:	4b28      	ldr	r3, [pc, #160]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe6:	d131      	bne.n	800304c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe8:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fee:	4a23      	ldr	r2, [pc, #140]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003000:	4a1e      	ldr	r2, [pc, #120]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2232      	movs	r2, #50	; 0x32
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	4a1c      	ldr	r2, [pc, #112]	; (8003084 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	0c9b      	lsrs	r3, r3, #18
 800301a:	3301      	adds	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301e:	e002      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b01      	subs	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003032:	d102      	bne.n	800303a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f2      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800303a:	4b10      	ldr	r3, [pc, #64]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003046:	d112      	bne.n	800306e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e011      	b.n	8003070 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800305c:	e007      	b.n	800306e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003066:	4a05      	ldr	r2, [pc, #20]	; (800307c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800306c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40007000 	.word	0x40007000
 8003080:	20000000 	.word	0x20000000
 8003084:	431bde83 	.word	0x431bde83

08003088 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e306      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a6:	4b97      	ldr	r3, [pc, #604]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b0:	4b94      	ldr	r3, [pc, #592]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	d102      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3e>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_OscConfig+0x44>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030cc:	4b8d      	ldr	r3, [pc, #564]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05b      	beq.n	8003190 <HAL_RCC_OscConfig+0x108>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d157      	bne.n	8003190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e2e1      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ec:	d106      	bne.n	80030fc <HAL_RCC_OscConfig+0x74>
 80030ee:	4b85      	ldr	r3, [pc, #532]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a84      	ldr	r2, [pc, #528]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x98>
 8003106:	4b7f      	ldr	r3, [pc, #508]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7e      	ldr	r2, [pc, #504]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b7c      	ldr	r3, [pc, #496]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a7b      	ldr	r2, [pc, #492]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xb0>
 8003120:	4b78      	ldr	r3, [pc, #480]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a77      	ldr	r2, [pc, #476]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b75      	ldr	r3, [pc, #468]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a74      	ldr	r2, [pc, #464]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fd fee0 	bl	8000f04 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7fd fedc 	bl	8000f04 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e2a6      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800315a:	4b6a      	ldr	r3, [pc, #424]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xc0>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fd fecc 	bl	8000f04 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7fd fec8 	bl	8000f04 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e292      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003182:	4b60      	ldr	r3, [pc, #384]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0xe8>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d075      	beq.n	800328a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319e:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a8:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	2b0c      	cmp	r3, #12
 80031b6:	d102      	bne.n	80031be <HAL_RCC_OscConfig+0x136>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_OscConfig+0x13c>
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d11f      	bne.n	8003204 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031c4:	4b4f      	ldr	r3, [pc, #316]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_OscConfig+0x154>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e265      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b49      	ldr	r3, [pc, #292]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	061b      	lsls	r3, r3, #24
 80031ea:	4946      	ldr	r1, [pc, #280]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031f0:	4b45      	ldr	r3, [pc, #276]	; (8003308 <HAL_RCC_OscConfig+0x280>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd fe39 	bl	8000e6c <HAL_InitTick>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d043      	beq.n	8003288 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e251      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d023      	beq.n	8003254 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320c:	4b3d      	ldr	r3, [pc, #244]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a3c      	ldr	r2, [pc, #240]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003216:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003218:	f7fd fe74 	bl	8000f04 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003220:	f7fd fe70 	bl	8000f04 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e23a      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003232:	4b34      	ldr	r3, [pc, #208]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	061b      	lsls	r3, r3, #24
 800324c:	492d      	ldr	r1, [pc, #180]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 800324e:	4313      	orrs	r3, r2
 8003250:	604b      	str	r3, [r1, #4]
 8003252:	e01a      	b.n	800328a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2a      	ldr	r2, [pc, #168]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 800325a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fd fe50 	bl	8000f04 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7fd fe4c 	bl	8000f04 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e216      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800327a:	4b22      	ldr	r3, [pc, #136]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x1e0>
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003288:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0308 	and.w	r3, r3, #8
 8003292:	2b00      	cmp	r3, #0
 8003294:	d041      	beq.n	800331a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d01c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329e:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a4:	4a17      	ldr	r2, [pc, #92]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ae:	f7fd fe29 	bl	8000f04 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b6:	f7fd fe25 	bl	8000f04 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1ef      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d0ef      	beq.n	80032b6 <HAL_RCC_OscConfig+0x22e>
 80032d6:	e020      	b.n	800331a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d8:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032de:	4a09      	ldr	r2, [pc, #36]	; (8003304 <HAL_RCC_OscConfig+0x27c>)
 80032e0:	f023 0301 	bic.w	r3, r3, #1
 80032e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e8:	f7fd fe0c 	bl	8000f04 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ee:	e00d      	b.n	800330c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f0:	f7fd fe08 	bl	8000f04 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d906      	bls.n	800330c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e1d2      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800330c:	4b8c      	ldr	r3, [pc, #560]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800330e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1ea      	bne.n	80032f0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80a6 	beq.w	8003474 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800332c:	4b84      	ldr	r3, [pc, #528]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_OscConfig+0x2b4>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x2b6>
 800333c:	2300      	movs	r3, #0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00d      	beq.n	800335e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	4b7f      	ldr	r3, [pc, #508]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003346:	4a7e      	ldr	r2, [pc, #504]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334c:	6593      	str	r3, [r2, #88]	; 0x58
 800334e:	4b7c      	ldr	r3, [pc, #496]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800335a:	2301      	movs	r3, #1
 800335c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335e:	4b79      	ldr	r3, [pc, #484]	; (8003544 <HAL_RCC_OscConfig+0x4bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d118      	bne.n	800339c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336a:	4b76      	ldr	r3, [pc, #472]	; (8003544 <HAL_RCC_OscConfig+0x4bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a75      	ldr	r2, [pc, #468]	; (8003544 <HAL_RCC_OscConfig+0x4bc>)
 8003370:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003374:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003376:	f7fd fdc5 	bl	8000f04 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800337e:	f7fd fdc1 	bl	8000f04 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e18b      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003390:	4b6c      	ldr	r3, [pc, #432]	; (8003544 <HAL_RCC_OscConfig+0x4bc>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d108      	bne.n	80033b6 <HAL_RCC_OscConfig+0x32e>
 80033a4:	4b66      	ldr	r3, [pc, #408]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033aa:	4a65      	ldr	r2, [pc, #404]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b4:	e024      	b.n	8003400 <HAL_RCC_OscConfig+0x378>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d110      	bne.n	80033e0 <HAL_RCC_OscConfig+0x358>
 80033be:	4b60      	ldr	r3, [pc, #384]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c4:	4a5e      	ldr	r2, [pc, #376]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033c6:	f043 0304 	orr.w	r3, r3, #4
 80033ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033ce:	4b5c      	ldr	r3, [pc, #368]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	4a5a      	ldr	r2, [pc, #360]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033de:	e00f      	b.n	8003400 <HAL_RCC_OscConfig+0x378>
 80033e0:	4b57      	ldr	r3, [pc, #348]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e6:	4a56      	ldr	r2, [pc, #344]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033e8:	f023 0301 	bic.w	r3, r3, #1
 80033ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f6:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f023 0304 	bic.w	r3, r3, #4
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d016      	beq.n	8003436 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003408:	f7fd fd7c 	bl	8000f04 <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fd fd78 	bl	8000f04 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e140      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003426:	4b46      	ldr	r3, [pc, #280]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d0ed      	beq.n	8003410 <HAL_RCC_OscConfig+0x388>
 8003434:	e015      	b.n	8003462 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003436:	f7fd fd65 	bl	8000f04 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800343e:	f7fd fd61 	bl	8000f04 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f241 3288 	movw	r2, #5000	; 0x1388
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e129      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003454:	4b3a      	ldr	r3, [pc, #232]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ed      	bne.n	800343e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003462:	7ffb      	ldrb	r3, [r7, #31]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b35      	ldr	r3, [pc, #212]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800346a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800346c:	4a34      	ldr	r2, [pc, #208]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003472:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d03c      	beq.n	80034fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003488:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800348a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800348e:	4a2c      	ldr	r2, [pc, #176]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003498:	f7fd fd34 	bl	8000f04 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034a0:	f7fd fd30 	bl	8000f04 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e0fa      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80034b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0ef      	beq.n	80034a0 <HAL_RCC_OscConfig+0x418>
 80034c0:	e01b      	b.n	80034fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034c2:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80034c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d2:	f7fd fd17 	bl	8000f04 <HAL_GetTick>
 80034d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034d8:	e008      	b.n	80034ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034da:	f7fd fd13 	bl	8000f04 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e0dd      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 80034ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ef      	bne.n	80034da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80d1 	beq.w	80036a6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003504:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b0c      	cmp	r3, #12
 800350e:	f000 808b 	beq.w	8003628 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d15e      	bne.n	80035d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351a:	4b09      	ldr	r3, [pc, #36]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a08      	ldr	r2, [pc, #32]	; (8003540 <HAL_RCC_OscConfig+0x4b8>)
 8003520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003526:	f7fd fced 	bl	8000f04 <HAL_GetTick>
 800352a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352c:	e00c      	b.n	8003548 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352e:	f7fd fce9 	bl	8000f04 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d905      	bls.n	8003548 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0b3      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
 8003540:	40021000 	.word	0x40021000
 8003544:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003548:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ec      	bne.n	800352e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003554:	4b56      	ldr	r3, [pc, #344]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <HAL_RCC_OscConfig+0x62c>)
 800355a:	4013      	ands	r3, r2
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	6a11      	ldr	r1, [r2, #32]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003564:	3a01      	subs	r2, #1
 8003566:	0112      	lsls	r2, r2, #4
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800356e:	0212      	lsls	r2, r2, #8
 8003570:	4311      	orrs	r1, r2
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003576:	0852      	lsrs	r2, r2, #1
 8003578:	3a01      	subs	r2, #1
 800357a:	0552      	lsls	r2, r2, #21
 800357c:	4311      	orrs	r1, r2
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003582:	0852      	lsrs	r2, r2, #1
 8003584:	3a01      	subs	r2, #1
 8003586:	0652      	lsls	r2, r2, #25
 8003588:	4311      	orrs	r1, r2
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800358e:	06d2      	lsls	r2, r2, #27
 8003590:	430a      	orrs	r2, r1
 8003592:	4947      	ldr	r1, [pc, #284]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 8003594:	4313      	orrs	r3, r2
 8003596:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003598:	4b45      	ldr	r3, [pc, #276]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a44      	ldr	r2, [pc, #272]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 800359e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035a4:	4b42      	ldr	r3, [pc, #264]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a41      	ldr	r2, [pc, #260]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 80035aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd fca8 	bl	8000f04 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fd fca4 	bl	8000f04 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e06e      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0x530>
 80035d6:	e066      	b.n	80036a6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a34      	ldr	r2, [pc, #208]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 80035de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035e2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035e4:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a31      	ldr	r2, [pc, #196]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4a2e      	ldr	r2, [pc, #184]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 80035f6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003600:	f7fd fc80 	bl	8000f04 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fd fc7c 	bl	8000f04 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e046      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1f0      	bne.n	8003608 <HAL_RCC_OscConfig+0x580>
 8003626:	e03e      	b.n	80036a6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e039      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003634:	4b1e      	ldr	r3, [pc, #120]	; (80036b0 <HAL_RCC_OscConfig+0x628>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0203 	and.w	r2, r3, #3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	429a      	cmp	r2, r3
 8003646:	d12c      	bne.n	80036a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	3b01      	subs	r3, #1
 8003654:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d123      	bne.n	80036a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d11b      	bne.n	80036a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003674:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d113      	bne.n	80036a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800368a:	429a      	cmp	r2, r3
 800368c:	d109      	bne.n	80036a2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003698:	085b      	lsrs	r3, r3, #1
 800369a:	3b01      	subs	r3, #1
 800369c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3720      	adds	r7, #32
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	019f800c 	.word	0x019f800c

080036b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e11e      	b.n	800390e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b91      	ldr	r3, [pc, #580]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d910      	bls.n	8003700 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b8e      	ldr	r3, [pc, #568]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 020f 	bic.w	r2, r3, #15
 80036e6:	498c      	ldr	r1, [pc, #560]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b8a      	ldr	r3, [pc, #552]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 030f 	and.w	r3, r3, #15
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e106      	b.n	800390e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d073      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d129      	bne.n	8003768 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003714:	4b81      	ldr	r3, [pc, #516]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0f4      	b.n	800390e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003724:	f000 f99e 	bl	8003a64 <RCC_GetSysClockFreqFromPLLSource>
 8003728:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4a7c      	ldr	r2, [pc, #496]	; (8003920 <HAL_RCC_ClockConfig+0x268>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d93f      	bls.n	80037b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003732:	4b7a      	ldr	r3, [pc, #488]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d009      	beq.n	8003752 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003746:	2b00      	cmp	r3, #0
 8003748:	d033      	beq.n	80037b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800374e:	2b00      	cmp	r3, #0
 8003750:	d12f      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003752:	4b72      	ldr	r3, [pc, #456]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375a:	4a70      	ldr	r2, [pc, #448]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 800375c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003760:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e024      	b.n	80037b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d107      	bne.n	8003780 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003770:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d109      	bne.n	8003790 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0c6      	b.n	800390e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003780:	4b66      	ldr	r3, [pc, #408]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0be      	b.n	800390e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003790:	f000 f8ce 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 8003794:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4a61      	ldr	r2, [pc, #388]	; (8003920 <HAL_RCC_ClockConfig+0x268>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d909      	bls.n	80037b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800379e:	4b5f      	ldr	r3, [pc, #380]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037a6:	4a5d      	ldr	r2, [pc, #372]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80037a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80037ae:	2380      	movs	r3, #128	; 0x80
 80037b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b2:	4b5a      	ldr	r3, [pc, #360]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 0203 	bic.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4957      	ldr	r1, [pc, #348]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c4:	f7fd fb9e 	bl	8000f04 <HAL_GetTick>
 80037c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037cc:	f7fd fb9a 	bl	8000f04 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e095      	b.n	800390e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	4b4e      	ldr	r3, [pc, #312]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 020c 	and.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d1eb      	bne.n	80037cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d023      	beq.n	8003848 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a42      	ldr	r2, [pc, #264]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003812:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003816:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003824:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800382c:	4a3b      	ldr	r2, [pc, #236]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 800382e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003832:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003834:	4b39      	ldr	r3, [pc, #228]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	4936      	ldr	r1, [pc, #216]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003842:	4313      	orrs	r3, r2
 8003844:	608b      	str	r3, [r1, #8]
 8003846:	e008      	b.n	800385a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d105      	bne.n	800385a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800384e:	4b33      	ldr	r3, [pc, #204]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	4a32      	ldr	r2, [pc, #200]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 8003854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003858:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800385a:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d21d      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 020f 	bic.w	r2, r3, #15
 8003870:	4929      	ldr	r1, [pc, #164]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	4313      	orrs	r3, r2
 8003876:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003878:	f7fd fb44 	bl	8000f04 <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fd fb40 	bl	8000f04 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e03b      	b.n	800390e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b20      	ldr	r3, [pc, #128]	; (8003918 <HAL_RCC_ClockConfig+0x260>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d1ed      	bne.n	8003880 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4917      	ldr	r1, [pc, #92]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d009      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	490f      	ldr	r1, [pc, #60]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038e2:	f000 f825 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 80038e6:	4602      	mov	r2, r0
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_RCC_ClockConfig+0x264>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 030f 	and.w	r3, r3, #15
 80038f2:	490c      	ldr	r1, [pc, #48]	; (8003924 <HAL_RCC_ClockConfig+0x26c>)
 80038f4:	5ccb      	ldrb	r3, [r1, r3]
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	fa22 f303 	lsr.w	r3, r2, r3
 80038fe:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_RCC_ClockConfig+0x270>)
 8003900:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <HAL_RCC_ClockConfig+0x274>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7fd fab0 	bl	8000e6c <HAL_InitTick>
 800390c:	4603      	mov	r3, r0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	40022000 	.word	0x40022000
 800391c:	40021000 	.word	0x40021000
 8003920:	04c4b400 	.word	0x04c4b400
 8003924:	0800619c 	.word	0x0800619c
 8003928:	20000000 	.word	0x20000000
 800392c:	20000004 	.word	0x20000004

08003930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003936:	4b2c      	ldr	r3, [pc, #176]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b04      	cmp	r3, #4
 8003940:	d102      	bne.n	8003948 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003942:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	e047      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 030c 	and.w	r3, r3, #12
 8003950:	2b08      	cmp	r3, #8
 8003952:	d102      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003954:	4b26      	ldr	r3, [pc, #152]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	e03e      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800395a:	4b23      	ldr	r3, [pc, #140]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b0c      	cmp	r3, #12
 8003964:	d136      	bne.n	80039d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003970:	4b1d      	ldr	r3, [pc, #116]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	091b      	lsrs	r3, r3, #4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	3301      	adds	r3, #1
 800397c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d10c      	bne.n	800399e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003984:	4a1a      	ldr	r2, [pc, #104]	; (80039f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	fbb2 f3f3 	udiv	r3, r2, r3
 800398c:	4a16      	ldr	r2, [pc, #88]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800398e:	68d2      	ldr	r2, [r2, #12]
 8003990:	0a12      	lsrs	r2, r2, #8
 8003992:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003996:	fb02 f303 	mul.w	r3, r2, r3
 800399a:	617b      	str	r3, [r7, #20]
      break;
 800399c:	e00c      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800399e:	4a13      	ldr	r2, [pc, #76]	; (80039ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a6:	4a10      	ldr	r2, [pc, #64]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039a8:	68d2      	ldr	r2, [r2, #12]
 80039aa:	0a12      	lsrs	r2, r2, #8
 80039ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80039b0:	fb02 f303 	mul.w	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
      break;
 80039b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039b8:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	0e5b      	lsrs	r3, r3, #25
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	3301      	adds	r3, #1
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e001      	b.n	80039d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039d8:	693b      	ldr	r3, [r7, #16]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	007a1200 	.word	0x007a1200

080039f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f8:	4b03      	ldr	r3, [pc, #12]	; (8003a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000000 	.word	0x20000000

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a10:	f7ff fff0 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4904      	ldr	r1, [pc, #16]	; (8003a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000
 8003a34:	080061ac 	.word	0x080061ac

08003a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a3c:	f7ff ffda 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0adb      	lsrs	r3, r3, #11
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4904      	ldr	r1, [pc, #16]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	080061ac 	.word	0x080061ac

08003a64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	091b      	lsrs	r3, r3, #4
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	3301      	adds	r3, #1
 8003a80:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b03      	cmp	r3, #3
 8003a86:	d10c      	bne.n	8003aa2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a88:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a92:	68d2      	ldr	r2, [r2, #12]
 8003a94:	0a12      	lsrs	r2, r2, #8
 8003a96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a9a:	fb02 f303 	mul.w	r3, r2, r3
 8003a9e:	617b      	str	r3, [r7, #20]
    break;
 8003aa0:	e00c      	b.n	8003abc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	4a0e      	ldr	r2, [pc, #56]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003aac:	68d2      	ldr	r2, [r2, #12]
 8003aae:	0a12      	lsrs	r2, r2, #8
 8003ab0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	617b      	str	r3, [r7, #20]
    break;
 8003aba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003abc:	4b09      	ldr	r3, [pc, #36]	; (8003ae4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	0e5b      	lsrs	r3, r3, #25
 8003ac2:	f003 0303 	and.w	r3, r3, #3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ad6:	687b      	ldr	r3, [r7, #4]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40021000 	.word	0x40021000
 8003ae8:	007a1200 	.word	0x007a1200
 8003aec:	00f42400 	.word	0x00f42400

08003af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003af8:	2300      	movs	r3, #0
 8003afa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003afc:	2300      	movs	r3, #0
 8003afe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 8098 	beq.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b12:	4b43      	ldr	r3, [pc, #268]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	4b40      	ldr	r3, [pc, #256]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	4a3f      	ldr	r2, [pc, #252]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6593      	str	r3, [r2, #88]	; 0x58
 8003b2a:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b32:	60bb      	str	r3, [r7, #8]
 8003b34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b36:	2301      	movs	r3, #1
 8003b38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b3a:	4b3a      	ldr	r3, [pc, #232]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a39      	ldr	r2, [pc, #228]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b46:	f7fd f9dd 	bl	8000f04 <HAL_GetTick>
 8003b4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b4c:	e009      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4e:	f7fd f9d9 	bl	8000f04 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d902      	bls.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	74fb      	strb	r3, [r7, #19]
        break;
 8003b60:	e005      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b62:	4b30      	ldr	r3, [pc, #192]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0ef      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d159      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b74:	4b2a      	ldr	r3, [pc, #168]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01e      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d019      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b90:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b9c:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba2:	4a1f      	ldr	r2, [pc, #124]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bac:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb2:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003bbc:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d016      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bce:	f7fd f999 	bl	8000f04 <HAL_GetTick>
 8003bd2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bd4:	e00b      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fd f995 	bl	8000f04 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d902      	bls.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	74fb      	strb	r3, [r7, #19]
            break;
 8003bec:	e006      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0ec      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c02:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c10:	4903      	ldr	r1, [pc, #12]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c18:	e008      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c1a:	7cfb      	ldrb	r3, [r7, #19]
 8003c1c:	74bb      	strb	r3, [r7, #18]
 8003c1e:	e005      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003c20:	40021000 	.word	0x40021000
 8003c24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c2c:	7c7b      	ldrb	r3, [r7, #17]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d105      	bne.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c32:	4ba7      	ldr	r3, [pc, #668]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	4aa6      	ldr	r2, [pc, #664]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0301 	and.w	r3, r3, #1
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00a      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c4a:	4ba1      	ldr	r3, [pc, #644]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	f023 0203 	bic.w	r2, r3, #3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	499d      	ldr	r1, [pc, #628]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00a      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c6c:	4b98      	ldr	r3, [pc, #608]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	f023 020c 	bic.w	r2, r3, #12
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4995      	ldr	r1, [pc, #596]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00a      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c8e:	4b90      	ldr	r3, [pc, #576]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	498c      	ldr	r1, [pc, #560]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0308 	and.w	r3, r3, #8
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cb0:	4b87      	ldr	r3, [pc, #540]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	4984      	ldr	r1, [pc, #528]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003cd2:	4b7f      	ldr	r3, [pc, #508]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	497b      	ldr	r1, [pc, #492]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cf4:	4b76      	ldr	r3, [pc, #472]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	4973      	ldr	r1, [pc, #460]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d16:	4b6e      	ldr	r3, [pc, #440]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	496a      	ldr	r1, [pc, #424]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d38:	4b65      	ldr	r3, [pc, #404]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	4962      	ldr	r1, [pc, #392]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	4959      	ldr	r1, [pc, #356]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d7c:	4b54      	ldr	r3, [pc, #336]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	4951      	ldr	r1, [pc, #324]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d9e:	4b4c      	ldr	r3, [pc, #304]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	4948      	ldr	r1, [pc, #288]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d015      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc0:	4b43      	ldr	r3, [pc, #268]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	4940      	ldr	r1, [pc, #256]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dde:	d105      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003de0:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	4a3a      	ldr	r2, [pc, #232]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d015      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003df8:	4b35      	ldr	r3, [pc, #212]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	4932      	ldr	r1, [pc, #200]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e16:	d105      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e18:	4b2d      	ldr	r3, [pc, #180]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	4a2c      	ldr	r2, [pc, #176]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e22:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d015      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	4924      	ldr	r1, [pc, #144]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e50:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d015      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e76:	4916      	ldr	r1, [pc, #88]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e86:	d105      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e88:	4b11      	ldr	r3, [pc, #68]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	4a10      	ldr	r2, [pc, #64]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d019      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4908      	ldr	r1, [pc, #32]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ebe:	d109      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a02      	ldr	r2, [pc, #8]	; (8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eca:	60d3      	str	r3, [r2, #12]
 8003ecc:	e002      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ece:	bf00      	nop
 8003ed0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d015      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003ee0:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	4926      	ldr	r1, [pc, #152]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003efe:	d105      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d015      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003f18:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f1e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f26:	4918      	ldr	r1, [pc, #96]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d105      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f38:	4b13      	ldr	r3, [pc, #76]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a12      	ldr	r2, [pc, #72]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f42:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d015      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f5e:	490a      	ldr	r1, [pc, #40]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f6e:	d105      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e042      	b.n	8004024 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fc feb9 	bl	8000d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2224      	movs	r2, #36	; 0x24
 8003fba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 fc0c 	bl	80047ec <UART_SetConfig>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e022      	b.n	8004024 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d002      	beq.n	8003fec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 fefc 	bl	8004de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800400a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 ff83 	bl	8004f28 <UART_CheckIdleState>
 8004022:	4603      	mov	r3, r0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800402c:	b480      	push	{r7}
 800402e:	b091      	sub	sp, #68	; 0x44
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004040:	2b20      	cmp	r3, #32
 8004042:	f040 808c 	bne.w	800415e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <HAL_UART_Transmit_IT+0x26>
 800404c:	88fb      	ldrh	r3, [r7, #6]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e084      	b.n	8004160 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_UART_Transmit_IT+0x38>
 8004060:	2302      	movs	r3, #2
 8004062:	e07d      	b.n	8004160 <HAL_UART_Transmit_IT+0x134>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	88fa      	ldrh	r2, [r7, #6]
 800407e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2221      	movs	r2, #33	; 0x21
 8004094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a0:	d12e      	bne.n	8004100 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040aa:	d107      	bne.n	80040bc <HAL_UART_Transmit_IT+0x90>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d103      	bne.n	80040bc <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4a2d      	ldr	r2, [pc, #180]	; (800416c <HAL_UART_Transmit_IT+0x140>)
 80040b8:	675a      	str	r2, [r3, #116]	; 0x74
 80040ba:	e002      	b.n	80040c2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <HAL_UART_Transmit_IT+0x144>)
 80040c0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3308      	adds	r3, #8
 80040e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040ea:	637a      	str	r2, [r7, #52]	; 0x34
 80040ec:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e5      	bne.n	80040ca <HAL_UART_Transmit_IT+0x9e>
 80040fe:	e02c      	b.n	800415a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	d107      	bne.n	800411a <HAL_UART_Transmit_IT+0xee>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d103      	bne.n	800411a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_UART_Transmit_IT+0x148>)
 8004116:	675a      	str	r2, [r3, #116]	; 0x74
 8004118:	e002      	b.n	8004120 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	4a16      	ldr	r2, [pc, #88]	; (8004178 <HAL_UART_Transmit_IT+0x14c>)
 800411e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	e853 3f00 	ldrex	r3, [r3]
 8004134:	613b      	str	r3, [r7, #16]
   return(result);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004146:	623b      	str	r3, [r7, #32]
 8004148:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414a:	69f9      	ldr	r1, [r7, #28]
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	61bb      	str	r3, [r7, #24]
   return(result);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1e6      	bne.n	8004128 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3744      	adds	r7, #68	; 0x44
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	080054a1 	.word	0x080054a1
 8004170:	080053c1 	.word	0x080053c1
 8004174:	080052ff 	.word	0x080052ff
 8004178:	08005247 	.word	0x08005247

0800417c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b0ba      	sub	sp, #232	; 0xe8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80041aa:	4013      	ands	r3, r2
 80041ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d11b      	bne.n	80041f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80041b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80041c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d105      	bne.n	80041dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80041d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d009      	beq.n	80041f0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 82d6 	beq.w	8004792 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4798      	blx	r3
      }
      return;
 80041ee:	e2d0      	b.n	8004792 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80041f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 811f 	beq.w	8004438 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80041fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80041fe:	4b8b      	ldr	r3, [pc, #556]	; (800442c <HAL_UART_IRQHandler+0x2b0>)
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004206:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800420a:	4b89      	ldr	r3, [pc, #548]	; (8004430 <HAL_UART_IRQHandler+0x2b4>)
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 8112 	beq.w	8004438 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d011      	beq.n	8004244 <HAL_UART_IRQHandler+0xc8>
 8004220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00b      	beq.n	8004244 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2201      	movs	r2, #1
 8004232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800423a:	f043 0201 	orr.w	r2, r3, #1
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d011      	beq.n	8004274 <HAL_UART_IRQHandler+0xf8>
 8004250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2202      	movs	r2, #2
 8004262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426a:	f043 0204 	orr.w	r2, r3, #4
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d011      	beq.n	80042a4 <HAL_UART_IRQHandler+0x128>
 8004280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00b      	beq.n	80042a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2204      	movs	r2, #4
 8004292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800429a:	f043 0202 	orr.w	r2, r3, #2
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d017      	beq.n	80042e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042b4:	f003 0320 	and.w	r3, r3, #32
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80042bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80042c0:	4b5a      	ldr	r3, [pc, #360]	; (800442c <HAL_UART_IRQHandler+0x2b0>)
 80042c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2208      	movs	r2, #8
 80042ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d6:	f043 0208 	orr.w	r2, r3, #8
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80042e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d012      	beq.n	8004312 <HAL_UART_IRQHandler+0x196>
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00c      	beq.n	8004312 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004300:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004308:	f043 0220 	orr.w	r2, r3, #32
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 823c 	beq.w	8004796 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800431e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	2b00      	cmp	r3, #0
 8004328:	d013      	beq.n	8004352 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800432a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d105      	bne.n	8004342 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800433a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004358:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004366:	2b40      	cmp	r3, #64	; 0x40
 8004368:	d005      	beq.n	8004376 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800436a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800436e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004372:	2b00      	cmp	r3, #0
 8004374:	d04f      	beq.n	8004416 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fee9 	bl	800514e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004386:	2b40      	cmp	r3, #64	; 0x40
 8004388:	d141      	bne.n	800440e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3308      	adds	r3, #8
 8004390:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3308      	adds	r3, #8
 80043b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1d9      	bne.n	800438a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d013      	beq.n	8004406 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043e2:	4a14      	ldr	r2, [pc, #80]	; (8004434 <HAL_UART_IRQHandler+0x2b8>)
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fc ff20 	bl	8001230 <HAL_DMA_Abort_IT>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d017      	beq.n	8004426 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004400:	4610      	mov	r0, r2
 8004402:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004404:	e00f      	b.n	8004426 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f9da 	bl	80047c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	e00b      	b.n	8004426 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 f9d6 	bl	80047c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004414:	e007      	b.n	8004426 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f9d2 	bl	80047c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004424:	e1b7      	b.n	8004796 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004426:	bf00      	nop
    return;
 8004428:	e1b5      	b.n	8004796 <HAL_UART_IRQHandler+0x61a>
 800442a:	bf00      	nop
 800442c:	10000001 	.word	0x10000001
 8004430:	04000120 	.word	0x04000120
 8004434:	0800521b 	.word	0x0800521b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800443c:	2b01      	cmp	r3, #1
 800443e:	f040 814a 	bne.w	80046d6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004446:	f003 0310 	and.w	r3, r3, #16
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8143 	beq.w	80046d6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 813c 	beq.w	80046d6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2210      	movs	r2, #16
 8004464:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	f040 80b5 	bne.w	80045e0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004482:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8187 	beq.w	800479a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004492:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004496:	429a      	cmp	r2, r3
 8004498:	f080 817f 	bcs.w	800479a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0320 	and.w	r3, r3, #32
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 8086 	bne.w	80045c4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	461a      	mov	r2, r3
 80044de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044f2:	e841 2300 	strex	r3, r2, [r1]
 80044f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80044fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1da      	bne.n	80044b8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3308      	adds	r3, #8
 8004508:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004512:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004514:	f023 0301 	bic.w	r3, r3, #1
 8004518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3308      	adds	r3, #8
 8004522:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004526:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800452a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800452e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004532:	e841 2300 	strex	r3, r2, [r1]
 8004536:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004538:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1e1      	bne.n	8004502 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3308      	adds	r3, #8
 8004544:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004548:	e853 3f00 	ldrex	r3, [r3]
 800454c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800454e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	3308      	adds	r3, #8
 800455e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004562:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004564:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004568:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e3      	bne.n	800453e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004594:	f023 0310 	bic.w	r3, r3, #16
 8004598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	461a      	mov	r2, r3
 80045a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80045a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e4      	bne.n	8004584 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fc fddd 	bl	800117e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f8fb 	bl	80047d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045de:	e0dc      	b.n	800479a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f000 80ce 	beq.w	800479e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004602:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80c9 	beq.w	800479e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004620:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	461a      	mov	r2, r3
 800462a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800462e:	647b      	str	r3, [r7, #68]	; 0x44
 8004630:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800463c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e4      	bne.n	800460c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3308      	adds	r3, #8
 8004648:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	623b      	str	r3, [r7, #32]
   return(result);
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004658:	f023 0301 	bic.w	r3, r3, #1
 800465c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3308      	adds	r3, #8
 8004666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800466a:	633a      	str	r2, [r7, #48]	; 0x30
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e1      	bne.n	8004642 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	60fb      	str	r3, [r7, #12]
   return(result);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f023 0310 	bic.w	r3, r3, #16
 80046a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046b4:	61fb      	str	r3, [r7, #28]
 80046b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	69b9      	ldr	r1, [r7, #24]
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	617b      	str	r3, [r7, #20]
   return(result);
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e4      	bne.n	8004692 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f880 	bl	80047d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046d4:	e063      	b.n	800479e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00e      	beq.n	8004700 <HAL_UART_IRQHandler+0x584>
 80046e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80046f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 ff71 	bl	80055e0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80046fe:	e051      	b.n	80047a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d014      	beq.n	8004736 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004714:	2b00      	cmp	r3, #0
 8004716:	d105      	bne.n	8004724 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800471c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004728:	2b00      	cmp	r3, #0
 800472a:	d03a      	beq.n	80047a2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	4798      	blx	r3
    }
    return;
 8004734:	e035      	b.n	80047a2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800473a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_UART_IRQHandler+0x5da>
 8004742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 ff1b 	bl	800558a <UART_EndTransmit_IT>
    return;
 8004754:	e026      	b.n	80047a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_UART_IRQHandler+0x5fa>
 8004762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004766:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 ff4a 	bl	8005608 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004774:	e016      	b.n	80047a4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d010      	beq.n	80047a4 <HAL_UART_IRQHandler+0x628>
 8004782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004786:	2b00      	cmp	r3, #0
 8004788:	da0c      	bge.n	80047a4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 ff32 	bl	80055f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004790:	e008      	b.n	80047a4 <HAL_UART_IRQHandler+0x628>
      return;
 8004792:	bf00      	nop
 8004794:	e006      	b.n	80047a4 <HAL_UART_IRQHandler+0x628>
    return;
 8004796:	bf00      	nop
 8004798:	e004      	b.n	80047a4 <HAL_UART_IRQHandler+0x628>
      return;
 800479a:	bf00      	nop
 800479c:	e002      	b.n	80047a4 <HAL_UART_IRQHandler+0x628>
      return;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <HAL_UART_IRQHandler+0x628>
    return;
 80047a2:	bf00      	nop
  }
}
 80047a4:	37e8      	adds	r7, #232	; 0xe8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop

080047ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	460b      	mov	r3, r1
 80047de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f0:	b08c      	sub	sp, #48	; 0x30
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	431a      	orrs	r2, r3
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	431a      	orrs	r2, r3
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	69db      	ldr	r3, [r3, #28]
 8004810:	4313      	orrs	r3, r2
 8004812:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4baa      	ldr	r3, [pc, #680]	; (8004ac4 <UART_SetConfig+0x2d8>)
 800481c:	4013      	ands	r3, r2
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004824:	430b      	orrs	r3, r1
 8004826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a9f      	ldr	r2, [pc, #636]	; (8004ac8 <UART_SetConfig+0x2dc>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004854:	4313      	orrs	r3, r2
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004862:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800486c:	430b      	orrs	r3, r1
 800486e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	f023 010f 	bic.w	r1, r3, #15
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a90      	ldr	r2, [pc, #576]	; (8004acc <UART_SetConfig+0x2e0>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d125      	bne.n	80048dc <UART_SetConfig+0xf0>
 8004890:	4b8f      	ldr	r3, [pc, #572]	; (8004ad0 <UART_SetConfig+0x2e4>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004896:	f003 0303 	and.w	r3, r3, #3
 800489a:	2b03      	cmp	r3, #3
 800489c:	d81a      	bhi.n	80048d4 <UART_SetConfig+0xe8>
 800489e:	a201      	add	r2, pc, #4	; (adr r2, 80048a4 <UART_SetConfig+0xb8>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048b5 	.word	0x080048b5
 80048a8:	080048c5 	.word	0x080048c5
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	080048cd 	.word	0x080048cd
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ba:	e116      	b.n	8004aea <UART_SetConfig+0x2fe>
 80048bc:	2302      	movs	r3, #2
 80048be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048c2:	e112      	b.n	8004aea <UART_SetConfig+0x2fe>
 80048c4:	2304      	movs	r3, #4
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ca:	e10e      	b.n	8004aea <UART_SetConfig+0x2fe>
 80048cc:	2308      	movs	r3, #8
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d2:	e10a      	b.n	8004aea <UART_SetConfig+0x2fe>
 80048d4:	2310      	movs	r3, #16
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048da:	e106      	b.n	8004aea <UART_SetConfig+0x2fe>
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a7c      	ldr	r2, [pc, #496]	; (8004ad4 <UART_SetConfig+0x2e8>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d138      	bne.n	8004958 <UART_SetConfig+0x16c>
 80048e6:	4b7a      	ldr	r3, [pc, #488]	; (8004ad0 <UART_SetConfig+0x2e4>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b0c      	cmp	r3, #12
 80048f2:	d82d      	bhi.n	8004950 <UART_SetConfig+0x164>
 80048f4:	a201      	add	r2, pc, #4	; (adr r2, 80048fc <UART_SetConfig+0x110>)
 80048f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fa:	bf00      	nop
 80048fc:	08004931 	.word	0x08004931
 8004900:	08004951 	.word	0x08004951
 8004904:	08004951 	.word	0x08004951
 8004908:	08004951 	.word	0x08004951
 800490c:	08004941 	.word	0x08004941
 8004910:	08004951 	.word	0x08004951
 8004914:	08004951 	.word	0x08004951
 8004918:	08004951 	.word	0x08004951
 800491c:	08004939 	.word	0x08004939
 8004920:	08004951 	.word	0x08004951
 8004924:	08004951 	.word	0x08004951
 8004928:	08004951 	.word	0x08004951
 800492c:	08004949 	.word	0x08004949
 8004930:	2300      	movs	r3, #0
 8004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004936:	e0d8      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004938:	2302      	movs	r3, #2
 800493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493e:	e0d4      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004940:	2304      	movs	r3, #4
 8004942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004946:	e0d0      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004948:	2308      	movs	r3, #8
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494e:	e0cc      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004950:	2310      	movs	r3, #16
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004956:	e0c8      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a5e      	ldr	r2, [pc, #376]	; (8004ad8 <UART_SetConfig+0x2ec>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d125      	bne.n	80049ae <UART_SetConfig+0x1c2>
 8004962:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <UART_SetConfig+0x2e4>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800496c:	2b30      	cmp	r3, #48	; 0x30
 800496e:	d016      	beq.n	800499e <UART_SetConfig+0x1b2>
 8004970:	2b30      	cmp	r3, #48	; 0x30
 8004972:	d818      	bhi.n	80049a6 <UART_SetConfig+0x1ba>
 8004974:	2b20      	cmp	r3, #32
 8004976:	d00a      	beq.n	800498e <UART_SetConfig+0x1a2>
 8004978:	2b20      	cmp	r3, #32
 800497a:	d814      	bhi.n	80049a6 <UART_SetConfig+0x1ba>
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <UART_SetConfig+0x19a>
 8004980:	2b10      	cmp	r3, #16
 8004982:	d008      	beq.n	8004996 <UART_SetConfig+0x1aa>
 8004984:	e00f      	b.n	80049a6 <UART_SetConfig+0x1ba>
 8004986:	2300      	movs	r3, #0
 8004988:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800498c:	e0ad      	b.n	8004aea <UART_SetConfig+0x2fe>
 800498e:	2302      	movs	r3, #2
 8004990:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004994:	e0a9      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004996:	2304      	movs	r3, #4
 8004998:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800499c:	e0a5      	b.n	8004aea <UART_SetConfig+0x2fe>
 800499e:	2308      	movs	r3, #8
 80049a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a4:	e0a1      	b.n	8004aea <UART_SetConfig+0x2fe>
 80049a6:	2310      	movs	r3, #16
 80049a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ac:	e09d      	b.n	8004aea <UART_SetConfig+0x2fe>
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a4a      	ldr	r2, [pc, #296]	; (8004adc <UART_SetConfig+0x2f0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d125      	bne.n	8004a04 <UART_SetConfig+0x218>
 80049b8:	4b45      	ldr	r3, [pc, #276]	; (8004ad0 <UART_SetConfig+0x2e4>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049c2:	2bc0      	cmp	r3, #192	; 0xc0
 80049c4:	d016      	beq.n	80049f4 <UART_SetConfig+0x208>
 80049c6:	2bc0      	cmp	r3, #192	; 0xc0
 80049c8:	d818      	bhi.n	80049fc <UART_SetConfig+0x210>
 80049ca:	2b80      	cmp	r3, #128	; 0x80
 80049cc:	d00a      	beq.n	80049e4 <UART_SetConfig+0x1f8>
 80049ce:	2b80      	cmp	r3, #128	; 0x80
 80049d0:	d814      	bhi.n	80049fc <UART_SetConfig+0x210>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <UART_SetConfig+0x1f0>
 80049d6:	2b40      	cmp	r3, #64	; 0x40
 80049d8:	d008      	beq.n	80049ec <UART_SetConfig+0x200>
 80049da:	e00f      	b.n	80049fc <UART_SetConfig+0x210>
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049e2:	e082      	b.n	8004aea <UART_SetConfig+0x2fe>
 80049e4:	2302      	movs	r3, #2
 80049e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ea:	e07e      	b.n	8004aea <UART_SetConfig+0x2fe>
 80049ec:	2304      	movs	r3, #4
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049f2:	e07a      	b.n	8004aea <UART_SetConfig+0x2fe>
 80049f4:	2308      	movs	r3, #8
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049fa:	e076      	b.n	8004aea <UART_SetConfig+0x2fe>
 80049fc:	2310      	movs	r3, #16
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a02:	e072      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a35      	ldr	r2, [pc, #212]	; (8004ae0 <UART_SetConfig+0x2f4>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d12a      	bne.n	8004a64 <UART_SetConfig+0x278>
 8004a0e:	4b30      	ldr	r3, [pc, #192]	; (8004ad0 <UART_SetConfig+0x2e4>)
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a1c:	d01a      	beq.n	8004a54 <UART_SetConfig+0x268>
 8004a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a22:	d81b      	bhi.n	8004a5c <UART_SetConfig+0x270>
 8004a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a28:	d00c      	beq.n	8004a44 <UART_SetConfig+0x258>
 8004a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a2e:	d815      	bhi.n	8004a5c <UART_SetConfig+0x270>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <UART_SetConfig+0x250>
 8004a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a38:	d008      	beq.n	8004a4c <UART_SetConfig+0x260>
 8004a3a:	e00f      	b.n	8004a5c <UART_SetConfig+0x270>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a42:	e052      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004a44:	2302      	movs	r3, #2
 8004a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a4a:	e04e      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a52:	e04a      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004a54:	2308      	movs	r3, #8
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a5a:	e046      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004a5c:	2310      	movs	r3, #16
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a62:	e042      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <UART_SetConfig+0x2dc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d13a      	bne.n	8004ae4 <UART_SetConfig+0x2f8>
 8004a6e:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <UART_SetConfig+0x2e4>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a7c:	d01a      	beq.n	8004ab4 <UART_SetConfig+0x2c8>
 8004a7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a82:	d81b      	bhi.n	8004abc <UART_SetConfig+0x2d0>
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a88:	d00c      	beq.n	8004aa4 <UART_SetConfig+0x2b8>
 8004a8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8e:	d815      	bhi.n	8004abc <UART_SetConfig+0x2d0>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <UART_SetConfig+0x2b0>
 8004a94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a98:	d008      	beq.n	8004aac <UART_SetConfig+0x2c0>
 8004a9a:	e00f      	b.n	8004abc <UART_SetConfig+0x2d0>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aa2:	e022      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aaa:	e01e      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004aac:	2304      	movs	r3, #4
 8004aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ab2:	e01a      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004ab4:	2308      	movs	r3, #8
 8004ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aba:	e016      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004abc:	2310      	movs	r3, #16
 8004abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ac2:	e012      	b.n	8004aea <UART_SetConfig+0x2fe>
 8004ac4:	cfff69f3 	.word	0xcfff69f3
 8004ac8:	40008000 	.word	0x40008000
 8004acc:	40013800 	.word	0x40013800
 8004ad0:	40021000 	.word	0x40021000
 8004ad4:	40004400 	.word	0x40004400
 8004ad8:	40004800 	.word	0x40004800
 8004adc:	40004c00 	.word	0x40004c00
 8004ae0:	40005000 	.word	0x40005000
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4aae      	ldr	r2, [pc, #696]	; (8004da8 <UART_SetConfig+0x5bc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	f040 8097 	bne.w	8004c24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004af6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d823      	bhi.n	8004b46 <UART_SetConfig+0x35a>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <UART_SetConfig+0x318>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b29 	.word	0x08004b29
 8004b08:	08004b47 	.word	0x08004b47
 8004b0c:	08004b31 	.word	0x08004b31
 8004b10:	08004b47 	.word	0x08004b47
 8004b14:	08004b37 	.word	0x08004b37
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b47 	.word	0x08004b47
 8004b20:	08004b47 	.word	0x08004b47
 8004b24:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b28:	f7fe ff70 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004b2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b2e:	e010      	b.n	8004b52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b9e      	ldr	r3, [pc, #632]	; (8004dac <UART_SetConfig+0x5c0>)
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b34:	e00d      	b.n	8004b52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fe fefb 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 8004b3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b3c:	e009      	b.n	8004b52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b44:	e005      	b.n	8004b52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8130 	beq.w	8004dba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	4a94      	ldr	r2, [pc, #592]	; (8004db0 <UART_SetConfig+0x5c4>)
 8004b60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	4413      	add	r3, r2
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d305      	bcc.n	8004b8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d903      	bls.n	8004b92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b90:	e113      	b.n	8004dba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	2200      	movs	r2, #0
 8004b96:	60bb      	str	r3, [r7, #8]
 8004b98:	60fa      	str	r2, [r7, #12]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	4a84      	ldr	r2, [pc, #528]	; (8004db0 <UART_SetConfig+0x5c4>)
 8004ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	607a      	str	r2, [r7, #4]
 8004bac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bb4:	f7fb fb84 	bl	80002c0 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	020b      	lsls	r3, r1, #8
 8004bca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bce:	0202      	lsls	r2, r0, #8
 8004bd0:	6979      	ldr	r1, [r7, #20]
 8004bd2:	6849      	ldr	r1, [r1, #4]
 8004bd4:	0849      	lsrs	r1, r1, #1
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	4605      	mov	r5, r0
 8004bdc:	eb12 0804 	adds.w	r8, r2, r4
 8004be0:	eb43 0905 	adc.w	r9, r3, r5
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	469a      	mov	sl, r3
 8004bec:	4693      	mov	fp, r2
 8004bee:	4652      	mov	r2, sl
 8004bf0:	465b      	mov	r3, fp
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	f7fb fb63 	bl	80002c0 <__aeabi_uldivmod>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4613      	mov	r3, r2
 8004c00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c08:	d308      	bcc.n	8004c1c <UART_SetConfig+0x430>
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c10:	d204      	bcs.n	8004c1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a3a      	ldr	r2, [r7, #32]
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	e0ce      	b.n	8004dba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c22:	e0ca      	b.n	8004dba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c2c:	d166      	bne.n	8004cfc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004c2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c32:	2b08      	cmp	r3, #8
 8004c34:	d827      	bhi.n	8004c86 <UART_SetConfig+0x49a>
 8004c36:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <UART_SetConfig+0x450>)
 8004c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c71 	.word	0x08004c71
 8004c48:	08004c87 	.word	0x08004c87
 8004c4c:	08004c77 	.word	0x08004c77
 8004c50:	08004c87 	.word	0x08004c87
 8004c54:	08004c87 	.word	0x08004c87
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fe fed4 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004c64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c66:	e014      	b.n	8004c92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7fe fee6 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8004c6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c6e:	e010      	b.n	8004c92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b4e      	ldr	r3, [pc, #312]	; (8004dac <UART_SetConfig+0x5c0>)
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c74:	e00d      	b.n	8004c92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fe fe5b 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 8004c7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c7c:	e009      	b.n	8004c92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c84:	e005      	b.n	8004c92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8090 	beq.w	8004dba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	4a44      	ldr	r2, [pc, #272]	; (8004db0 <UART_SetConfig+0x5c4>)
 8004ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cac:	005a      	lsls	r2, r3, #1
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	441a      	add	r2, r3
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2b0f      	cmp	r3, #15
 8004cc4:	d916      	bls.n	8004cf4 <UART_SetConfig+0x508>
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ccc:	d212      	bcs.n	8004cf4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	f023 030f 	bic.w	r3, r3, #15
 8004cd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cd8:	6a3b      	ldr	r3, [r7, #32]
 8004cda:	085b      	lsrs	r3, r3, #1
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	b29a      	uxth	r2, r3
 8004ce4:	8bfb      	ldrh	r3, [r7, #30]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	8bfa      	ldrh	r2, [r7, #30]
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	e062      	b.n	8004dba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cfa:	e05e      	b.n	8004dba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d828      	bhi.n	8004d56 <UART_SetConfig+0x56a>
 8004d04:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <UART_SetConfig+0x520>)
 8004d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0a:	bf00      	nop
 8004d0c:	08004d31 	.word	0x08004d31
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d41 	.word	0x08004d41
 8004d18:	08004d57 	.word	0x08004d57
 8004d1c:	08004d47 	.word	0x08004d47
 8004d20:	08004d57 	.word	0x08004d57
 8004d24:	08004d57 	.word	0x08004d57
 8004d28:	08004d57 	.word	0x08004d57
 8004d2c:	08004d4f 	.word	0x08004d4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d30:	f7fe fe6c 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004d34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d36:	e014      	b.n	8004d62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d38:	f7fe fe7e 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8004d3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d3e:	e010      	b.n	8004d62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d40:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <UART_SetConfig+0x5c0>)
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d44:	e00d      	b.n	8004d62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d46:	f7fe fdf3 	bl	8003930 <HAL_RCC_GetSysClockFreq>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d4c:	e009      	b.n	8004d62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d54:	e005      	b.n	8004d62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d60:	bf00      	nop
    }

    if (pclk != 0U)
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d028      	beq.n	8004dba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	4a10      	ldr	r2, [pc, #64]	; (8004db0 <UART_SetConfig+0x5c4>)
 8004d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d72:	461a      	mov	r2, r3
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	085b      	lsrs	r3, r3, #1
 8004d80:	441a      	add	r2, r3
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	2b0f      	cmp	r3, #15
 8004d90:	d910      	bls.n	8004db4 <UART_SetConfig+0x5c8>
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d98:	d20c      	bcs.n	8004db4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d9a:	6a3b      	ldr	r3, [r7, #32]
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60da      	str	r2, [r3, #12]
 8004da4:	e009      	b.n	8004dba <UART_SetConfig+0x5ce>
 8004da6:	bf00      	nop
 8004da8:	40008000 	.word	0x40008000
 8004dac:	00f42400 	.word	0x00f42400
 8004db0:	080061b4 	.word	0x080061b4
      }
      else
      {
        ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004dd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3730      	adds	r7, #48	; 0x30
 8004dde:	46bd      	mov	sp, r7
 8004de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01a      	beq.n	8004efa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee2:	d10a      	bne.n	8004efa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	605a      	str	r2, [r3, #4]
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f38:	f7fb ffe4 	bl	8000f04 <HAL_GetTick>
 8004f3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b08      	cmp	r3, #8
 8004f4a:	d10e      	bne.n	8004f6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f82f 	bl	8004fbe <UART_WaitOnFlagUntilTimeout>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e025      	b.n	8004fb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d10e      	bne.n	8004f96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f819 	bl	8004fbe <UART_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e00f      	b.n	8004fb6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b09c      	sub	sp, #112	; 0x70
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	60f8      	str	r0, [r7, #12]
 8004fc6:	60b9      	str	r1, [r7, #8]
 8004fc8:	603b      	str	r3, [r7, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fce:	e0a9      	b.n	8005124 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd6:	f000 80a5 	beq.w	8005124 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fda:	f7fb ff93 	bl	8000f04 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d302      	bcc.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d140      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff8:	e853 3f00 	ldrex	r3, [r3]
 8004ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005004:	667b      	str	r3, [r7, #100]	; 0x64
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800500e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005010:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005016:	e841 2300 	strex	r3, r2, [r1]
 800501a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800501c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1e6      	bne.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	3308      	adds	r3, #8
 8005028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800502c:	e853 3f00 	ldrex	r3, [r3]
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	f023 0301 	bic.w	r3, r3, #1
 8005038:	663b      	str	r3, [r7, #96]	; 0x60
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3308      	adds	r3, #8
 8005040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005042:	64ba      	str	r2, [r7, #72]	; 0x48
 8005044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e5      	bne.n	8005022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2220      	movs	r2, #32
 8005062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e069      	b.n	8005146 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d051      	beq.n	8005124 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800508a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800508e:	d149      	bne.n	8005124 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005098:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b8:	637b      	str	r3, [r7, #52]	; 0x34
 80050ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e6      	bne.n	800509a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3308      	adds	r3, #8
 80050d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	613b      	str	r3, [r7, #16]
   return(result);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f023 0301 	bic.w	r3, r3, #1
 80050e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80050ec:	623a      	str	r2, [r7, #32]
 80050ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f0:	69f9      	ldr	r1, [r7, #28]
 80050f2:	6a3a      	ldr	r2, [r7, #32]
 80050f4:	e841 2300 	strex	r3, r2, [r1]
 80050f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e5      	bne.n	80050cc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2220      	movs	r2, #32
 800510c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e010      	b.n	8005146 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	4013      	ands	r3, r2
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	429a      	cmp	r2, r3
 8005132:	bf0c      	ite	eq
 8005134:	2301      	moveq	r3, #1
 8005136:	2300      	movne	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	429a      	cmp	r2, r3
 8005140:	f43f af46 	beq.w	8004fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3770      	adds	r7, #112	; 0x70
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800514e:	b480      	push	{r7}
 8005150:	b095      	sub	sp, #84	; 0x54
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800516a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	461a      	mov	r2, r3
 8005172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005174:	643b      	str	r3, [r7, #64]	; 0x40
 8005176:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005178:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800517a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800517c:	e841 2300 	strex	r3, r2, [r1]
 8005180:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	2b00      	cmp	r3, #0
 8005186:	d1e6      	bne.n	8005156 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	6a3b      	ldr	r3, [r7, #32]
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	61fb      	str	r3, [r7, #28]
   return(result);
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3308      	adds	r3, #8
 80051aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e3      	bne.n	8005188 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d118      	bne.n	80051fa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f023 0310 	bic.w	r3, r3, #16
 80051dc:	647b      	str	r3, [r7, #68]	; 0x44
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ea:	6979      	ldr	r1, [r7, #20]
 80051ec:	69ba      	ldr	r2, [r7, #24]
 80051ee:	e841 2300 	strex	r3, r2, [r1]
 80051f2:	613b      	str	r3, [r7, #16]
   return(result);
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1e6      	bne.n	80051c8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800520e:	bf00      	nop
 8005210:	3754      	adds	r7, #84	; 0x54
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f7ff fac1 	bl	80047c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800523e:	bf00      	nop
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005246:	b480      	push	{r7}
 8005248:	b08f      	sub	sp, #60	; 0x3c
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005254:	2b21      	cmp	r3, #33	; 0x21
 8005256:	d14c      	bne.n	80052f2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d132      	bne.n	80052ca <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	61fb      	str	r3, [r7, #28]
   return(result);
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005284:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800528a:	e841 2300 	strex	r3, r2, [r1]
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1e6      	bne.n	8005264 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052aa:	633b      	str	r3, [r7, #48]	; 0x30
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	61bb      	str	r3, [r7, #24]
 80052b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6979      	ldr	r1, [r7, #20]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	613b      	str	r3, [r7, #16]
   return(result);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e6      	bne.n	8005296 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80052c8:	e013      	b.n	80052f2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ce:	781a      	ldrb	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80052f2:	bf00      	nop
 80052f4:	373c      	adds	r7, #60	; 0x3c
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80052fe:	b480      	push	{r7}
 8005300:	b091      	sub	sp, #68	; 0x44
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530c:	2b21      	cmp	r3, #33	; 0x21
 800530e:	d151      	bne.n	80053b4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d132      	bne.n	8005382 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	623b      	str	r3, [r7, #32]
   return(result);
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005330:	63bb      	str	r3, [r7, #56]	; 0x38
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
 800533c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e6      	bne.n	800531c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	e853 3f00 	ldrex	r3, [r3]
 800535a:	60fb      	str	r3, [r7, #12]
   return(result);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005370:	69b9      	ldr	r1, [r7, #24]
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	e841 2300 	strex	r3, r2, [r1]
 8005378:	617b      	str	r3, [r7, #20]
   return(result);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1e6      	bne.n	800534e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005380:	e018      	b.n	80053b4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005386:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	461a      	mov	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005396:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80053b4:	bf00      	nop
 80053b6:	3744      	adds	r7, #68	; 0x44
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b091      	sub	sp, #68	; 0x44
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ce:	2b21      	cmp	r3, #33	; 0x21
 80053d0:	d160      	bne.n	8005494 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80053d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80053da:	e057      	b.n	800548c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d133      	bne.n	8005450 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3308      	adds	r3, #8
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	e853 3f00 	ldrex	r3, [r3]
 80053f6:	623b      	str	r3, [r7, #32]
   return(result);
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3308      	adds	r3, #8
 8005406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005408:	633a      	str	r2, [r7, #48]	; 0x30
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800540e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005410:	e841 2300 	strex	r3, r2, [r1]
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e5      	bne.n	80053e8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	60fb      	str	r3, [r7, #12]
   return(result);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005430:	637b      	str	r3, [r7, #52]	; 0x34
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	61fb      	str	r3, [r7, #28]
 800543c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543e:	69b9      	ldr	r1, [r7, #24]
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	617b      	str	r3, [r7, #20]
   return(result);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e6      	bne.n	800541c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800544e:	e021      	b.n	8005494 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545a:	2b00      	cmp	r3, #0
 800545c:	d013      	beq.n	8005486 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005462:	781a      	ldrb	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800546e:	1c5a      	adds	r2, r3, #1
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005486:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005488:	3b01      	subs	r3, #1
 800548a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800548c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1a4      	bne.n	80053dc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8005492:	e7ff      	b.n	8005494 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8005494:	bf00      	nop
 8005496:	3744      	adds	r7, #68	; 0x44
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b091      	sub	sp, #68	; 0x44
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ae:	2b21      	cmp	r3, #33	; 0x21
 80054b0:	d165      	bne.n	800557e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80054b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80054ba:	e05c      	b.n	8005576 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d133      	bne.n	8005530 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3308      	adds	r3, #8
 80054ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3308      	adds	r3, #8
 80054e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e5      	bne.n	80054c8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	60bb      	str	r3, [r7, #8]
   return(result);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005510:	633b      	str	r3, [r7, #48]	; 0x30
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	61bb      	str	r3, [r7, #24]
 800551c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6979      	ldr	r1, [r7, #20]
 8005520:	69ba      	ldr	r2, [r7, #24]
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	613b      	str	r3, [r7, #16]
   return(result);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e6      	bne.n	80054fc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800552e:	e026      	b.n	800557e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553a:	2b00      	cmp	r3, #0
 800553c:	d018      	beq.n	8005570 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005542:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005558:	1c9a      	adds	r2, r3, #2
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005570:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005572:	3b01      	subs	r3, #1
 8005574:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005576:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005578:	2b00      	cmp	r3, #0
 800557a:	d19f      	bne.n	80054bc <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800557c:	e7ff      	b.n	800557e <UART_TxISR_16BIT_FIFOEN+0xde>
 800557e:	bf00      	nop
 8005580:	3744      	adds	r7, #68	; 0x44
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b088      	sub	sp, #32
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	e853 3f00 	ldrex	r3, [r3]
 800559e:	60bb      	str	r3, [r7, #8]
   return(result);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	61bb      	str	r3, [r7, #24]
 80055b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b4:	6979      	ldr	r1, [r7, #20]
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	e841 2300 	strex	r3, r2, [r1]
 80055bc:	613b      	str	r3, [r7, #16]
   return(result);
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1e6      	bne.n	8005592 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff f8ea 	bl	80047ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d8:	bf00      	nop
 80055da:	3720      	adds	r7, #32
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800562a:	2b01      	cmp	r3, #1
 800562c:	d101      	bne.n	8005632 <HAL_UARTEx_DisableFifoMode+0x16>
 800562e:	2302      	movs	r3, #2
 8005630:	e027      	b.n	8005682 <HAL_UARTEx_DisableFifoMode+0x66>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2224      	movs	r2, #36	; 0x24
 800563e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005660:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2220      	movs	r2, #32
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3714      	adds	r7, #20
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b084      	sub	sp, #16
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d101      	bne.n	80056a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e02d      	b.n	8005702 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2224      	movs	r2, #36	; 0x24
 80056b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f850 	bl	8005788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800570a:	b580      	push	{r7, lr}
 800570c:	b084      	sub	sp, #16
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800571e:	2302      	movs	r3, #2
 8005720:	e02d      	b.n	800577e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2224      	movs	r2, #36	; 0x24
 800572e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0201 	bic.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f812 	bl	8005788 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057a8:	e031      	b.n	800580e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057aa:	2308      	movs	r3, #8
 80057ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057ae:	2308      	movs	r3, #8
 80057b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	0e5b      	lsrs	r3, r3, #25
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	0f5b      	lsrs	r3, r3, #29
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057d2:	7bbb      	ldrb	r3, [r7, #14]
 80057d4:	7b3a      	ldrb	r2, [r7, #12]
 80057d6:	4911      	ldr	r1, [pc, #68]	; (800581c <UARTEx_SetNbDataToProcess+0x94>)
 80057d8:	5c8a      	ldrb	r2, [r1, r2]
 80057da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057de:	7b3a      	ldrb	r2, [r7, #12]
 80057e0:	490f      	ldr	r1, [pc, #60]	; (8005820 <UARTEx_SetNbDataToProcess+0x98>)
 80057e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	7b7a      	ldrb	r2, [r7, #13]
 80057f4:	4909      	ldr	r1, [pc, #36]	; (800581c <UARTEx_SetNbDataToProcess+0x94>)
 80057f6:	5c8a      	ldrb	r2, [r1, r2]
 80057f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057fc:	7b7a      	ldrb	r2, [r7, #13]
 80057fe:	4908      	ldr	r1, [pc, #32]	; (8005820 <UARTEx_SetNbDataToProcess+0x98>)
 8005800:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005802:	fb93 f3f2 	sdiv	r3, r3, r2
 8005806:	b29a      	uxth	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	080061cc 	.word	0x080061cc
 8005820:	080061d4 	.word	0x080061d4

08005824 <siprintf>:
 8005824:	b40e      	push	{r1, r2, r3}
 8005826:	b500      	push	{lr}
 8005828:	b09c      	sub	sp, #112	; 0x70
 800582a:	ab1d      	add	r3, sp, #116	; 0x74
 800582c:	9002      	str	r0, [sp, #8]
 800582e:	9006      	str	r0, [sp, #24]
 8005830:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005834:	4809      	ldr	r0, [pc, #36]	; (800585c <siprintf+0x38>)
 8005836:	9107      	str	r1, [sp, #28]
 8005838:	9104      	str	r1, [sp, #16]
 800583a:	4909      	ldr	r1, [pc, #36]	; (8005860 <siprintf+0x3c>)
 800583c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005840:	9105      	str	r1, [sp, #20]
 8005842:	6800      	ldr	r0, [r0, #0]
 8005844:	9301      	str	r3, [sp, #4]
 8005846:	a902      	add	r1, sp, #8
 8005848:	f000 f992 	bl	8005b70 <_svfiprintf_r>
 800584c:	9b02      	ldr	r3, [sp, #8]
 800584e:	2200      	movs	r2, #0
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	b01c      	add	sp, #112	; 0x70
 8005854:	f85d eb04 	ldr.w	lr, [sp], #4
 8005858:	b003      	add	sp, #12
 800585a:	4770      	bx	lr
 800585c:	20000058 	.word	0x20000058
 8005860:	ffff0208 	.word	0xffff0208

08005864 <memset>:
 8005864:	4402      	add	r2, r0
 8005866:	4603      	mov	r3, r0
 8005868:	4293      	cmp	r3, r2
 800586a:	d100      	bne.n	800586e <memset+0xa>
 800586c:	4770      	bx	lr
 800586e:	f803 1b01 	strb.w	r1, [r3], #1
 8005872:	e7f9      	b.n	8005868 <memset+0x4>

08005874 <__errno>:
 8005874:	4b01      	ldr	r3, [pc, #4]	; (800587c <__errno+0x8>)
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	20000058 	.word	0x20000058

08005880 <__libc_init_array>:
 8005880:	b570      	push	{r4, r5, r6, lr}
 8005882:	4d0d      	ldr	r5, [pc, #52]	; (80058b8 <__libc_init_array+0x38>)
 8005884:	4c0d      	ldr	r4, [pc, #52]	; (80058bc <__libc_init_array+0x3c>)
 8005886:	1b64      	subs	r4, r4, r5
 8005888:	10a4      	asrs	r4, r4, #2
 800588a:	2600      	movs	r6, #0
 800588c:	42a6      	cmp	r6, r4
 800588e:	d109      	bne.n	80058a4 <__libc_init_array+0x24>
 8005890:	4d0b      	ldr	r5, [pc, #44]	; (80058c0 <__libc_init_array+0x40>)
 8005892:	4c0c      	ldr	r4, [pc, #48]	; (80058c4 <__libc_init_array+0x44>)
 8005894:	f000 fc6a 	bl	800616c <_init>
 8005898:	1b64      	subs	r4, r4, r5
 800589a:	10a4      	asrs	r4, r4, #2
 800589c:	2600      	movs	r6, #0
 800589e:	42a6      	cmp	r6, r4
 80058a0:	d105      	bne.n	80058ae <__libc_init_array+0x2e>
 80058a2:	bd70      	pop	{r4, r5, r6, pc}
 80058a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058a8:	4798      	blx	r3
 80058aa:	3601      	adds	r6, #1
 80058ac:	e7ee      	b.n	800588c <__libc_init_array+0xc>
 80058ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b2:	4798      	blx	r3
 80058b4:	3601      	adds	r6, #1
 80058b6:	e7f2      	b.n	800589e <__libc_init_array+0x1e>
 80058b8:	08006218 	.word	0x08006218
 80058bc:	08006218 	.word	0x08006218
 80058c0:	08006218 	.word	0x08006218
 80058c4:	0800621c 	.word	0x0800621c

080058c8 <__retarget_lock_acquire_recursive>:
 80058c8:	4770      	bx	lr

080058ca <__retarget_lock_release_recursive>:
 80058ca:	4770      	bx	lr

080058cc <_free_r>:
 80058cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ce:	2900      	cmp	r1, #0
 80058d0:	d044      	beq.n	800595c <_free_r+0x90>
 80058d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d6:	9001      	str	r0, [sp, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f1a1 0404 	sub.w	r4, r1, #4
 80058de:	bfb8      	it	lt
 80058e0:	18e4      	addlt	r4, r4, r3
 80058e2:	f000 f8df 	bl	8005aa4 <__malloc_lock>
 80058e6:	4a1e      	ldr	r2, [pc, #120]	; (8005960 <_free_r+0x94>)
 80058e8:	9801      	ldr	r0, [sp, #4]
 80058ea:	6813      	ldr	r3, [r2, #0]
 80058ec:	b933      	cbnz	r3, 80058fc <_free_r+0x30>
 80058ee:	6063      	str	r3, [r4, #4]
 80058f0:	6014      	str	r4, [r2, #0]
 80058f2:	b003      	add	sp, #12
 80058f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058f8:	f000 b8da 	b.w	8005ab0 <__malloc_unlock>
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d908      	bls.n	8005912 <_free_r+0x46>
 8005900:	6825      	ldr	r5, [r4, #0]
 8005902:	1961      	adds	r1, r4, r5
 8005904:	428b      	cmp	r3, r1
 8005906:	bf01      	itttt	eq
 8005908:	6819      	ldreq	r1, [r3, #0]
 800590a:	685b      	ldreq	r3, [r3, #4]
 800590c:	1949      	addeq	r1, r1, r5
 800590e:	6021      	streq	r1, [r4, #0]
 8005910:	e7ed      	b.n	80058ee <_free_r+0x22>
 8005912:	461a      	mov	r2, r3
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	b10b      	cbz	r3, 800591c <_free_r+0x50>
 8005918:	42a3      	cmp	r3, r4
 800591a:	d9fa      	bls.n	8005912 <_free_r+0x46>
 800591c:	6811      	ldr	r1, [r2, #0]
 800591e:	1855      	adds	r5, r2, r1
 8005920:	42a5      	cmp	r5, r4
 8005922:	d10b      	bne.n	800593c <_free_r+0x70>
 8005924:	6824      	ldr	r4, [r4, #0]
 8005926:	4421      	add	r1, r4
 8005928:	1854      	adds	r4, r2, r1
 800592a:	42a3      	cmp	r3, r4
 800592c:	6011      	str	r1, [r2, #0]
 800592e:	d1e0      	bne.n	80058f2 <_free_r+0x26>
 8005930:	681c      	ldr	r4, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	6053      	str	r3, [r2, #4]
 8005936:	440c      	add	r4, r1
 8005938:	6014      	str	r4, [r2, #0]
 800593a:	e7da      	b.n	80058f2 <_free_r+0x26>
 800593c:	d902      	bls.n	8005944 <_free_r+0x78>
 800593e:	230c      	movs	r3, #12
 8005940:	6003      	str	r3, [r0, #0]
 8005942:	e7d6      	b.n	80058f2 <_free_r+0x26>
 8005944:	6825      	ldr	r5, [r4, #0]
 8005946:	1961      	adds	r1, r4, r5
 8005948:	428b      	cmp	r3, r1
 800594a:	bf04      	itt	eq
 800594c:	6819      	ldreq	r1, [r3, #0]
 800594e:	685b      	ldreq	r3, [r3, #4]
 8005950:	6063      	str	r3, [r4, #4]
 8005952:	bf04      	itt	eq
 8005954:	1949      	addeq	r1, r1, r5
 8005956:	6021      	streq	r1, [r4, #0]
 8005958:	6054      	str	r4, [r2, #4]
 800595a:	e7ca      	b.n	80058f2 <_free_r+0x26>
 800595c:	b003      	add	sp, #12
 800595e:	bd30      	pop	{r4, r5, pc}
 8005960:	200002a0 	.word	0x200002a0

08005964 <sbrk_aligned>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	4e0e      	ldr	r6, [pc, #56]	; (80059a0 <sbrk_aligned+0x3c>)
 8005968:	460c      	mov	r4, r1
 800596a:	6831      	ldr	r1, [r6, #0]
 800596c:	4605      	mov	r5, r0
 800596e:	b911      	cbnz	r1, 8005976 <sbrk_aligned+0x12>
 8005970:	f000 fba6 	bl	80060c0 <_sbrk_r>
 8005974:	6030      	str	r0, [r6, #0]
 8005976:	4621      	mov	r1, r4
 8005978:	4628      	mov	r0, r5
 800597a:	f000 fba1 	bl	80060c0 <_sbrk_r>
 800597e:	1c43      	adds	r3, r0, #1
 8005980:	d00a      	beq.n	8005998 <sbrk_aligned+0x34>
 8005982:	1cc4      	adds	r4, r0, #3
 8005984:	f024 0403 	bic.w	r4, r4, #3
 8005988:	42a0      	cmp	r0, r4
 800598a:	d007      	beq.n	800599c <sbrk_aligned+0x38>
 800598c:	1a21      	subs	r1, r4, r0
 800598e:	4628      	mov	r0, r5
 8005990:	f000 fb96 	bl	80060c0 <_sbrk_r>
 8005994:	3001      	adds	r0, #1
 8005996:	d101      	bne.n	800599c <sbrk_aligned+0x38>
 8005998:	f04f 34ff 	mov.w	r4, #4294967295
 800599c:	4620      	mov	r0, r4
 800599e:	bd70      	pop	{r4, r5, r6, pc}
 80059a0:	200002a4 	.word	0x200002a4

080059a4 <_malloc_r>:
 80059a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059a8:	1ccd      	adds	r5, r1, #3
 80059aa:	f025 0503 	bic.w	r5, r5, #3
 80059ae:	3508      	adds	r5, #8
 80059b0:	2d0c      	cmp	r5, #12
 80059b2:	bf38      	it	cc
 80059b4:	250c      	movcc	r5, #12
 80059b6:	2d00      	cmp	r5, #0
 80059b8:	4607      	mov	r7, r0
 80059ba:	db01      	blt.n	80059c0 <_malloc_r+0x1c>
 80059bc:	42a9      	cmp	r1, r5
 80059be:	d905      	bls.n	80059cc <_malloc_r+0x28>
 80059c0:	230c      	movs	r3, #12
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	2600      	movs	r6, #0
 80059c6:	4630      	mov	r0, r6
 80059c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005aa0 <_malloc_r+0xfc>
 80059d0:	f000 f868 	bl	8005aa4 <__malloc_lock>
 80059d4:	f8d8 3000 	ldr.w	r3, [r8]
 80059d8:	461c      	mov	r4, r3
 80059da:	bb5c      	cbnz	r4, 8005a34 <_malloc_r+0x90>
 80059dc:	4629      	mov	r1, r5
 80059de:	4638      	mov	r0, r7
 80059e0:	f7ff ffc0 	bl	8005964 <sbrk_aligned>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	4604      	mov	r4, r0
 80059e8:	d155      	bne.n	8005a96 <_malloc_r+0xf2>
 80059ea:	f8d8 4000 	ldr.w	r4, [r8]
 80059ee:	4626      	mov	r6, r4
 80059f0:	2e00      	cmp	r6, #0
 80059f2:	d145      	bne.n	8005a80 <_malloc_r+0xdc>
 80059f4:	2c00      	cmp	r4, #0
 80059f6:	d048      	beq.n	8005a8a <_malloc_r+0xe6>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	4631      	mov	r1, r6
 80059fc:	4638      	mov	r0, r7
 80059fe:	eb04 0903 	add.w	r9, r4, r3
 8005a02:	f000 fb5d 	bl	80060c0 <_sbrk_r>
 8005a06:	4581      	cmp	r9, r0
 8005a08:	d13f      	bne.n	8005a8a <_malloc_r+0xe6>
 8005a0a:	6821      	ldr	r1, [r4, #0]
 8005a0c:	1a6d      	subs	r5, r5, r1
 8005a0e:	4629      	mov	r1, r5
 8005a10:	4638      	mov	r0, r7
 8005a12:	f7ff ffa7 	bl	8005964 <sbrk_aligned>
 8005a16:	3001      	adds	r0, #1
 8005a18:	d037      	beq.n	8005a8a <_malloc_r+0xe6>
 8005a1a:	6823      	ldr	r3, [r4, #0]
 8005a1c:	442b      	add	r3, r5
 8005a1e:	6023      	str	r3, [r4, #0]
 8005a20:	f8d8 3000 	ldr.w	r3, [r8]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d038      	beq.n	8005a9a <_malloc_r+0xf6>
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	42a2      	cmp	r2, r4
 8005a2c:	d12b      	bne.n	8005a86 <_malloc_r+0xe2>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	e00f      	b.n	8005a54 <_malloc_r+0xb0>
 8005a34:	6822      	ldr	r2, [r4, #0]
 8005a36:	1b52      	subs	r2, r2, r5
 8005a38:	d41f      	bmi.n	8005a7a <_malloc_r+0xd6>
 8005a3a:	2a0b      	cmp	r2, #11
 8005a3c:	d917      	bls.n	8005a6e <_malloc_r+0xca>
 8005a3e:	1961      	adds	r1, r4, r5
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	6025      	str	r5, [r4, #0]
 8005a44:	bf18      	it	ne
 8005a46:	6059      	strne	r1, [r3, #4]
 8005a48:	6863      	ldr	r3, [r4, #4]
 8005a4a:	bf08      	it	eq
 8005a4c:	f8c8 1000 	streq.w	r1, [r8]
 8005a50:	5162      	str	r2, [r4, r5]
 8005a52:	604b      	str	r3, [r1, #4]
 8005a54:	4638      	mov	r0, r7
 8005a56:	f104 060b 	add.w	r6, r4, #11
 8005a5a:	f000 f829 	bl	8005ab0 <__malloc_unlock>
 8005a5e:	f026 0607 	bic.w	r6, r6, #7
 8005a62:	1d23      	adds	r3, r4, #4
 8005a64:	1af2      	subs	r2, r6, r3
 8005a66:	d0ae      	beq.n	80059c6 <_malloc_r+0x22>
 8005a68:	1b9b      	subs	r3, r3, r6
 8005a6a:	50a3      	str	r3, [r4, r2]
 8005a6c:	e7ab      	b.n	80059c6 <_malloc_r+0x22>
 8005a6e:	42a3      	cmp	r3, r4
 8005a70:	6862      	ldr	r2, [r4, #4]
 8005a72:	d1dd      	bne.n	8005a30 <_malloc_r+0x8c>
 8005a74:	f8c8 2000 	str.w	r2, [r8]
 8005a78:	e7ec      	b.n	8005a54 <_malloc_r+0xb0>
 8005a7a:	4623      	mov	r3, r4
 8005a7c:	6864      	ldr	r4, [r4, #4]
 8005a7e:	e7ac      	b.n	80059da <_malloc_r+0x36>
 8005a80:	4634      	mov	r4, r6
 8005a82:	6876      	ldr	r6, [r6, #4]
 8005a84:	e7b4      	b.n	80059f0 <_malloc_r+0x4c>
 8005a86:	4613      	mov	r3, r2
 8005a88:	e7cc      	b.n	8005a24 <_malloc_r+0x80>
 8005a8a:	230c      	movs	r3, #12
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	4638      	mov	r0, r7
 8005a90:	f000 f80e 	bl	8005ab0 <__malloc_unlock>
 8005a94:	e797      	b.n	80059c6 <_malloc_r+0x22>
 8005a96:	6025      	str	r5, [r4, #0]
 8005a98:	e7dc      	b.n	8005a54 <_malloc_r+0xb0>
 8005a9a:	605b      	str	r3, [r3, #4]
 8005a9c:	deff      	udf	#255	; 0xff
 8005a9e:	bf00      	nop
 8005aa0:	200002a0 	.word	0x200002a0

08005aa4 <__malloc_lock>:
 8005aa4:	4801      	ldr	r0, [pc, #4]	; (8005aac <__malloc_lock+0x8>)
 8005aa6:	f7ff bf0f 	b.w	80058c8 <__retarget_lock_acquire_recursive>
 8005aaa:	bf00      	nop
 8005aac:	2000029c 	.word	0x2000029c

08005ab0 <__malloc_unlock>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	; (8005ab8 <__malloc_unlock+0x8>)
 8005ab2:	f7ff bf0a 	b.w	80058ca <__retarget_lock_release_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	2000029c 	.word	0x2000029c

08005abc <__ssputs_r>:
 8005abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac0:	688e      	ldr	r6, [r1, #8]
 8005ac2:	461f      	mov	r7, r3
 8005ac4:	42be      	cmp	r6, r7
 8005ac6:	680b      	ldr	r3, [r1, #0]
 8005ac8:	4682      	mov	sl, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	4690      	mov	r8, r2
 8005ace:	d82c      	bhi.n	8005b2a <__ssputs_r+0x6e>
 8005ad0:	898a      	ldrh	r2, [r1, #12]
 8005ad2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ad6:	d026      	beq.n	8005b26 <__ssputs_r+0x6a>
 8005ad8:	6965      	ldr	r5, [r4, #20]
 8005ada:	6909      	ldr	r1, [r1, #16]
 8005adc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ae0:	eba3 0901 	sub.w	r9, r3, r1
 8005ae4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ae8:	1c7b      	adds	r3, r7, #1
 8005aea:	444b      	add	r3, r9
 8005aec:	106d      	asrs	r5, r5, #1
 8005aee:	429d      	cmp	r5, r3
 8005af0:	bf38      	it	cc
 8005af2:	461d      	movcc	r5, r3
 8005af4:	0553      	lsls	r3, r2, #21
 8005af6:	d527      	bpl.n	8005b48 <__ssputs_r+0x8c>
 8005af8:	4629      	mov	r1, r5
 8005afa:	f7ff ff53 	bl	80059a4 <_malloc_r>
 8005afe:	4606      	mov	r6, r0
 8005b00:	b360      	cbz	r0, 8005b5c <__ssputs_r+0xa0>
 8005b02:	6921      	ldr	r1, [r4, #16]
 8005b04:	464a      	mov	r2, r9
 8005b06:	f000 faeb 	bl	80060e0 <memcpy>
 8005b0a:	89a3      	ldrh	r3, [r4, #12]
 8005b0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b14:	81a3      	strh	r3, [r4, #12]
 8005b16:	6126      	str	r6, [r4, #16]
 8005b18:	6165      	str	r5, [r4, #20]
 8005b1a:	444e      	add	r6, r9
 8005b1c:	eba5 0509 	sub.w	r5, r5, r9
 8005b20:	6026      	str	r6, [r4, #0]
 8005b22:	60a5      	str	r5, [r4, #8]
 8005b24:	463e      	mov	r6, r7
 8005b26:	42be      	cmp	r6, r7
 8005b28:	d900      	bls.n	8005b2c <__ssputs_r+0x70>
 8005b2a:	463e      	mov	r6, r7
 8005b2c:	6820      	ldr	r0, [r4, #0]
 8005b2e:	4632      	mov	r2, r6
 8005b30:	4641      	mov	r1, r8
 8005b32:	f000 faab 	bl	800608c <memmove>
 8005b36:	68a3      	ldr	r3, [r4, #8]
 8005b38:	1b9b      	subs	r3, r3, r6
 8005b3a:	60a3      	str	r3, [r4, #8]
 8005b3c:	6823      	ldr	r3, [r4, #0]
 8005b3e:	4433      	add	r3, r6
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	2000      	movs	r0, #0
 8005b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b48:	462a      	mov	r2, r5
 8005b4a:	f000 fad7 	bl	80060fc <_realloc_r>
 8005b4e:	4606      	mov	r6, r0
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d1e0      	bne.n	8005b16 <__ssputs_r+0x5a>
 8005b54:	6921      	ldr	r1, [r4, #16]
 8005b56:	4650      	mov	r0, sl
 8005b58:	f7ff feb8 	bl	80058cc <_free_r>
 8005b5c:	230c      	movs	r3, #12
 8005b5e:	f8ca 3000 	str.w	r3, [sl]
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6e:	e7e9      	b.n	8005b44 <__ssputs_r+0x88>

08005b70 <_svfiprintf_r>:
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	4698      	mov	r8, r3
 8005b76:	898b      	ldrh	r3, [r1, #12]
 8005b78:	061b      	lsls	r3, r3, #24
 8005b7a:	b09d      	sub	sp, #116	; 0x74
 8005b7c:	4607      	mov	r7, r0
 8005b7e:	460d      	mov	r5, r1
 8005b80:	4614      	mov	r4, r2
 8005b82:	d50e      	bpl.n	8005ba2 <_svfiprintf_r+0x32>
 8005b84:	690b      	ldr	r3, [r1, #16]
 8005b86:	b963      	cbnz	r3, 8005ba2 <_svfiprintf_r+0x32>
 8005b88:	2140      	movs	r1, #64	; 0x40
 8005b8a:	f7ff ff0b 	bl	80059a4 <_malloc_r>
 8005b8e:	6028      	str	r0, [r5, #0]
 8005b90:	6128      	str	r0, [r5, #16]
 8005b92:	b920      	cbnz	r0, 8005b9e <_svfiprintf_r+0x2e>
 8005b94:	230c      	movs	r3, #12
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9c:	e0d0      	b.n	8005d40 <_svfiprintf_r+0x1d0>
 8005b9e:	2340      	movs	r3, #64	; 0x40
 8005ba0:	616b      	str	r3, [r5, #20]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ba6:	2320      	movs	r3, #32
 8005ba8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bac:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bb0:	2330      	movs	r3, #48	; 0x30
 8005bb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d58 <_svfiprintf_r+0x1e8>
 8005bb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bba:	f04f 0901 	mov.w	r9, #1
 8005bbe:	4623      	mov	r3, r4
 8005bc0:	469a      	mov	sl, r3
 8005bc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bc6:	b10a      	cbz	r2, 8005bcc <_svfiprintf_r+0x5c>
 8005bc8:	2a25      	cmp	r2, #37	; 0x25
 8005bca:	d1f9      	bne.n	8005bc0 <_svfiprintf_r+0x50>
 8005bcc:	ebba 0b04 	subs.w	fp, sl, r4
 8005bd0:	d00b      	beq.n	8005bea <_svfiprintf_r+0x7a>
 8005bd2:	465b      	mov	r3, fp
 8005bd4:	4622      	mov	r2, r4
 8005bd6:	4629      	mov	r1, r5
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f7ff ff6f 	bl	8005abc <__ssputs_r>
 8005bde:	3001      	adds	r0, #1
 8005be0:	f000 80a9 	beq.w	8005d36 <_svfiprintf_r+0x1c6>
 8005be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005be6:	445a      	add	r2, fp
 8005be8:	9209      	str	r2, [sp, #36]	; 0x24
 8005bea:	f89a 3000 	ldrb.w	r3, [sl]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f000 80a1 	beq.w	8005d36 <_svfiprintf_r+0x1c6>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bfe:	f10a 0a01 	add.w	sl, sl, #1
 8005c02:	9304      	str	r3, [sp, #16]
 8005c04:	9307      	str	r3, [sp, #28]
 8005c06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c0a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c0c:	4654      	mov	r4, sl
 8005c0e:	2205      	movs	r2, #5
 8005c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c14:	4850      	ldr	r0, [pc, #320]	; (8005d58 <_svfiprintf_r+0x1e8>)
 8005c16:	f7fa fb03 	bl	8000220 <memchr>
 8005c1a:	9a04      	ldr	r2, [sp, #16]
 8005c1c:	b9d8      	cbnz	r0, 8005c56 <_svfiprintf_r+0xe6>
 8005c1e:	06d0      	lsls	r0, r2, #27
 8005c20:	bf44      	itt	mi
 8005c22:	2320      	movmi	r3, #32
 8005c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c28:	0711      	lsls	r1, r2, #28
 8005c2a:	bf44      	itt	mi
 8005c2c:	232b      	movmi	r3, #43	; 0x2b
 8005c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c32:	f89a 3000 	ldrb.w	r3, [sl]
 8005c36:	2b2a      	cmp	r3, #42	; 0x2a
 8005c38:	d015      	beq.n	8005c66 <_svfiprintf_r+0xf6>
 8005c3a:	9a07      	ldr	r2, [sp, #28]
 8005c3c:	4654      	mov	r4, sl
 8005c3e:	2000      	movs	r0, #0
 8005c40:	f04f 0c0a 	mov.w	ip, #10
 8005c44:	4621      	mov	r1, r4
 8005c46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c4a:	3b30      	subs	r3, #48	; 0x30
 8005c4c:	2b09      	cmp	r3, #9
 8005c4e:	d94d      	bls.n	8005cec <_svfiprintf_r+0x17c>
 8005c50:	b1b0      	cbz	r0, 8005c80 <_svfiprintf_r+0x110>
 8005c52:	9207      	str	r2, [sp, #28]
 8005c54:	e014      	b.n	8005c80 <_svfiprintf_r+0x110>
 8005c56:	eba0 0308 	sub.w	r3, r0, r8
 8005c5a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	9304      	str	r3, [sp, #16]
 8005c62:	46a2      	mov	sl, r4
 8005c64:	e7d2      	b.n	8005c0c <_svfiprintf_r+0x9c>
 8005c66:	9b03      	ldr	r3, [sp, #12]
 8005c68:	1d19      	adds	r1, r3, #4
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	9103      	str	r1, [sp, #12]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bfbb      	ittet	lt
 8005c72:	425b      	neglt	r3, r3
 8005c74:	f042 0202 	orrlt.w	r2, r2, #2
 8005c78:	9307      	strge	r3, [sp, #28]
 8005c7a:	9307      	strlt	r3, [sp, #28]
 8005c7c:	bfb8      	it	lt
 8005c7e:	9204      	strlt	r2, [sp, #16]
 8005c80:	7823      	ldrb	r3, [r4, #0]
 8005c82:	2b2e      	cmp	r3, #46	; 0x2e
 8005c84:	d10c      	bne.n	8005ca0 <_svfiprintf_r+0x130>
 8005c86:	7863      	ldrb	r3, [r4, #1]
 8005c88:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8a:	d134      	bne.n	8005cf6 <_svfiprintf_r+0x186>
 8005c8c:	9b03      	ldr	r3, [sp, #12]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	9203      	str	r2, [sp, #12]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	bfb8      	it	lt
 8005c98:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c9c:	3402      	adds	r4, #2
 8005c9e:	9305      	str	r3, [sp, #20]
 8005ca0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005d68 <_svfiprintf_r+0x1f8>
 8005ca4:	7821      	ldrb	r1, [r4, #0]
 8005ca6:	2203      	movs	r2, #3
 8005ca8:	4650      	mov	r0, sl
 8005caa:	f7fa fab9 	bl	8000220 <memchr>
 8005cae:	b138      	cbz	r0, 8005cc0 <_svfiprintf_r+0x150>
 8005cb0:	9b04      	ldr	r3, [sp, #16]
 8005cb2:	eba0 000a 	sub.w	r0, r0, sl
 8005cb6:	2240      	movs	r2, #64	; 0x40
 8005cb8:	4082      	lsls	r2, r0
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	3401      	adds	r4, #1
 8005cbe:	9304      	str	r3, [sp, #16]
 8005cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc4:	4825      	ldr	r0, [pc, #148]	; (8005d5c <_svfiprintf_r+0x1ec>)
 8005cc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cca:	2206      	movs	r2, #6
 8005ccc:	f7fa faa8 	bl	8000220 <memchr>
 8005cd0:	2800      	cmp	r0, #0
 8005cd2:	d038      	beq.n	8005d46 <_svfiprintf_r+0x1d6>
 8005cd4:	4b22      	ldr	r3, [pc, #136]	; (8005d60 <_svfiprintf_r+0x1f0>)
 8005cd6:	bb1b      	cbnz	r3, 8005d20 <_svfiprintf_r+0x1b0>
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	3307      	adds	r3, #7
 8005cdc:	f023 0307 	bic.w	r3, r3, #7
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	9303      	str	r3, [sp, #12]
 8005ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ce6:	4433      	add	r3, r6
 8005ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8005cea:	e768      	b.n	8005bbe <_svfiprintf_r+0x4e>
 8005cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	e7a6      	b.n	8005c44 <_svfiprintf_r+0xd4>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	3401      	adds	r4, #1
 8005cfa:	9305      	str	r3, [sp, #20]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	f04f 0c0a 	mov.w	ip, #10
 8005d02:	4620      	mov	r0, r4
 8005d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d08:	3a30      	subs	r2, #48	; 0x30
 8005d0a:	2a09      	cmp	r2, #9
 8005d0c:	d903      	bls.n	8005d16 <_svfiprintf_r+0x1a6>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0c6      	beq.n	8005ca0 <_svfiprintf_r+0x130>
 8005d12:	9105      	str	r1, [sp, #20]
 8005d14:	e7c4      	b.n	8005ca0 <_svfiprintf_r+0x130>
 8005d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e7f0      	b.n	8005d02 <_svfiprintf_r+0x192>
 8005d20:	ab03      	add	r3, sp, #12
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	462a      	mov	r2, r5
 8005d26:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <_svfiprintf_r+0x1f4>)
 8005d28:	a904      	add	r1, sp, #16
 8005d2a:	4638      	mov	r0, r7
 8005d2c:	f3af 8000 	nop.w
 8005d30:	1c42      	adds	r2, r0, #1
 8005d32:	4606      	mov	r6, r0
 8005d34:	d1d6      	bne.n	8005ce4 <_svfiprintf_r+0x174>
 8005d36:	89ab      	ldrh	r3, [r5, #12]
 8005d38:	065b      	lsls	r3, r3, #25
 8005d3a:	f53f af2d 	bmi.w	8005b98 <_svfiprintf_r+0x28>
 8005d3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d40:	b01d      	add	sp, #116	; 0x74
 8005d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d46:	ab03      	add	r3, sp, #12
 8005d48:	9300      	str	r3, [sp, #0]
 8005d4a:	462a      	mov	r2, r5
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <_svfiprintf_r+0x1f4>)
 8005d4e:	a904      	add	r1, sp, #16
 8005d50:	4638      	mov	r0, r7
 8005d52:	f000 f879 	bl	8005e48 <_printf_i>
 8005d56:	e7eb      	b.n	8005d30 <_svfiprintf_r+0x1c0>
 8005d58:	080061dc 	.word	0x080061dc
 8005d5c:	080061e6 	.word	0x080061e6
 8005d60:	00000000 	.word	0x00000000
 8005d64:	08005abd 	.word	0x08005abd
 8005d68:	080061e2 	.word	0x080061e2

08005d6c <_printf_common>:
 8005d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d70:	4616      	mov	r6, r2
 8005d72:	4699      	mov	r9, r3
 8005d74:	688a      	ldr	r2, [r1, #8]
 8005d76:	690b      	ldr	r3, [r1, #16]
 8005d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	bfb8      	it	lt
 8005d80:	4613      	movlt	r3, r2
 8005d82:	6033      	str	r3, [r6, #0]
 8005d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d88:	4607      	mov	r7, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	b10a      	cbz	r2, 8005d92 <_printf_common+0x26>
 8005d8e:	3301      	adds	r3, #1
 8005d90:	6033      	str	r3, [r6, #0]
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	0699      	lsls	r1, r3, #26
 8005d96:	bf42      	ittt	mi
 8005d98:	6833      	ldrmi	r3, [r6, #0]
 8005d9a:	3302      	addmi	r3, #2
 8005d9c:	6033      	strmi	r3, [r6, #0]
 8005d9e:	6825      	ldr	r5, [r4, #0]
 8005da0:	f015 0506 	ands.w	r5, r5, #6
 8005da4:	d106      	bne.n	8005db4 <_printf_common+0x48>
 8005da6:	f104 0a19 	add.w	sl, r4, #25
 8005daa:	68e3      	ldr	r3, [r4, #12]
 8005dac:	6832      	ldr	r2, [r6, #0]
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	42ab      	cmp	r3, r5
 8005db2:	dc26      	bgt.n	8005e02 <_printf_common+0x96>
 8005db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005db8:	1e13      	subs	r3, r2, #0
 8005dba:	6822      	ldr	r2, [r4, #0]
 8005dbc:	bf18      	it	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	0692      	lsls	r2, r2, #26
 8005dc2:	d42b      	bmi.n	8005e1c <_printf_common+0xb0>
 8005dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4638      	mov	r0, r7
 8005dcc:	47c0      	blx	r8
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d01e      	beq.n	8005e10 <_printf_common+0xa4>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	6922      	ldr	r2, [r4, #16]
 8005dd6:	f003 0306 	and.w	r3, r3, #6
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	bf02      	ittt	eq
 8005dde:	68e5      	ldreq	r5, [r4, #12]
 8005de0:	6833      	ldreq	r3, [r6, #0]
 8005de2:	1aed      	subeq	r5, r5, r3
 8005de4:	68a3      	ldr	r3, [r4, #8]
 8005de6:	bf0c      	ite	eq
 8005de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dec:	2500      	movne	r5, #0
 8005dee:	4293      	cmp	r3, r2
 8005df0:	bfc4      	itt	gt
 8005df2:	1a9b      	subgt	r3, r3, r2
 8005df4:	18ed      	addgt	r5, r5, r3
 8005df6:	2600      	movs	r6, #0
 8005df8:	341a      	adds	r4, #26
 8005dfa:	42b5      	cmp	r5, r6
 8005dfc:	d11a      	bne.n	8005e34 <_printf_common+0xc8>
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e008      	b.n	8005e14 <_printf_common+0xa8>
 8005e02:	2301      	movs	r3, #1
 8005e04:	4652      	mov	r2, sl
 8005e06:	4649      	mov	r1, r9
 8005e08:	4638      	mov	r0, r7
 8005e0a:	47c0      	blx	r8
 8005e0c:	3001      	adds	r0, #1
 8005e0e:	d103      	bne.n	8005e18 <_printf_common+0xac>
 8005e10:	f04f 30ff 	mov.w	r0, #4294967295
 8005e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e18:	3501      	adds	r5, #1
 8005e1a:	e7c6      	b.n	8005daa <_printf_common+0x3e>
 8005e1c:	18e1      	adds	r1, r4, r3
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	2030      	movs	r0, #48	; 0x30
 8005e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e26:	4422      	add	r2, r4
 8005e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e30:	3302      	adds	r3, #2
 8005e32:	e7c7      	b.n	8005dc4 <_printf_common+0x58>
 8005e34:	2301      	movs	r3, #1
 8005e36:	4622      	mov	r2, r4
 8005e38:	4649      	mov	r1, r9
 8005e3a:	4638      	mov	r0, r7
 8005e3c:	47c0      	blx	r8
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d0e6      	beq.n	8005e10 <_printf_common+0xa4>
 8005e42:	3601      	adds	r6, #1
 8005e44:	e7d9      	b.n	8005dfa <_printf_common+0x8e>
	...

08005e48 <_printf_i>:
 8005e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	7e0f      	ldrb	r7, [r1, #24]
 8005e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e50:	2f78      	cmp	r7, #120	; 0x78
 8005e52:	4691      	mov	r9, r2
 8005e54:	4680      	mov	r8, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	469a      	mov	sl, r3
 8005e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e5e:	d807      	bhi.n	8005e70 <_printf_i+0x28>
 8005e60:	2f62      	cmp	r7, #98	; 0x62
 8005e62:	d80a      	bhi.n	8005e7a <_printf_i+0x32>
 8005e64:	2f00      	cmp	r7, #0
 8005e66:	f000 80d4 	beq.w	8006012 <_printf_i+0x1ca>
 8005e6a:	2f58      	cmp	r7, #88	; 0x58
 8005e6c:	f000 80c0 	beq.w	8005ff0 <_printf_i+0x1a8>
 8005e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e78:	e03a      	b.n	8005ef0 <_printf_i+0xa8>
 8005e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e7e:	2b15      	cmp	r3, #21
 8005e80:	d8f6      	bhi.n	8005e70 <_printf_i+0x28>
 8005e82:	a101      	add	r1, pc, #4	; (adr r1, 8005e88 <_printf_i+0x40>)
 8005e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e88:	08005ee1 	.word	0x08005ee1
 8005e8c:	08005ef5 	.word	0x08005ef5
 8005e90:	08005e71 	.word	0x08005e71
 8005e94:	08005e71 	.word	0x08005e71
 8005e98:	08005e71 	.word	0x08005e71
 8005e9c:	08005e71 	.word	0x08005e71
 8005ea0:	08005ef5 	.word	0x08005ef5
 8005ea4:	08005e71 	.word	0x08005e71
 8005ea8:	08005e71 	.word	0x08005e71
 8005eac:	08005e71 	.word	0x08005e71
 8005eb0:	08005e71 	.word	0x08005e71
 8005eb4:	08005ff9 	.word	0x08005ff9
 8005eb8:	08005f21 	.word	0x08005f21
 8005ebc:	08005fb3 	.word	0x08005fb3
 8005ec0:	08005e71 	.word	0x08005e71
 8005ec4:	08005e71 	.word	0x08005e71
 8005ec8:	0800601b 	.word	0x0800601b
 8005ecc:	08005e71 	.word	0x08005e71
 8005ed0:	08005f21 	.word	0x08005f21
 8005ed4:	08005e71 	.word	0x08005e71
 8005ed8:	08005e71 	.word	0x08005e71
 8005edc:	08005fbb 	.word	0x08005fbb
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	1d1a      	adds	r2, r3, #4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	602a      	str	r2, [r5, #0]
 8005ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e09f      	b.n	8006034 <_printf_i+0x1ec>
 8005ef4:	6820      	ldr	r0, [r4, #0]
 8005ef6:	682b      	ldr	r3, [r5, #0]
 8005ef8:	0607      	lsls	r7, r0, #24
 8005efa:	f103 0104 	add.w	r1, r3, #4
 8005efe:	6029      	str	r1, [r5, #0]
 8005f00:	d501      	bpl.n	8005f06 <_printf_i+0xbe>
 8005f02:	681e      	ldr	r6, [r3, #0]
 8005f04:	e003      	b.n	8005f0e <_printf_i+0xc6>
 8005f06:	0646      	lsls	r6, r0, #25
 8005f08:	d5fb      	bpl.n	8005f02 <_printf_i+0xba>
 8005f0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	da03      	bge.n	8005f1a <_printf_i+0xd2>
 8005f12:	232d      	movs	r3, #45	; 0x2d
 8005f14:	4276      	negs	r6, r6
 8005f16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f1a:	485a      	ldr	r0, [pc, #360]	; (8006084 <_printf_i+0x23c>)
 8005f1c:	230a      	movs	r3, #10
 8005f1e:	e012      	b.n	8005f46 <_printf_i+0xfe>
 8005f20:	682b      	ldr	r3, [r5, #0]
 8005f22:	6820      	ldr	r0, [r4, #0]
 8005f24:	1d19      	adds	r1, r3, #4
 8005f26:	6029      	str	r1, [r5, #0]
 8005f28:	0605      	lsls	r5, r0, #24
 8005f2a:	d501      	bpl.n	8005f30 <_printf_i+0xe8>
 8005f2c:	681e      	ldr	r6, [r3, #0]
 8005f2e:	e002      	b.n	8005f36 <_printf_i+0xee>
 8005f30:	0641      	lsls	r1, r0, #25
 8005f32:	d5fb      	bpl.n	8005f2c <_printf_i+0xe4>
 8005f34:	881e      	ldrh	r6, [r3, #0]
 8005f36:	4853      	ldr	r0, [pc, #332]	; (8006084 <_printf_i+0x23c>)
 8005f38:	2f6f      	cmp	r7, #111	; 0x6f
 8005f3a:	bf0c      	ite	eq
 8005f3c:	2308      	moveq	r3, #8
 8005f3e:	230a      	movne	r3, #10
 8005f40:	2100      	movs	r1, #0
 8005f42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f46:	6865      	ldr	r5, [r4, #4]
 8005f48:	60a5      	str	r5, [r4, #8]
 8005f4a:	2d00      	cmp	r5, #0
 8005f4c:	bfa2      	ittt	ge
 8005f4e:	6821      	ldrge	r1, [r4, #0]
 8005f50:	f021 0104 	bicge.w	r1, r1, #4
 8005f54:	6021      	strge	r1, [r4, #0]
 8005f56:	b90e      	cbnz	r6, 8005f5c <_printf_i+0x114>
 8005f58:	2d00      	cmp	r5, #0
 8005f5a:	d04b      	beq.n	8005ff4 <_printf_i+0x1ac>
 8005f5c:	4615      	mov	r5, r2
 8005f5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f62:	fb03 6711 	mls	r7, r3, r1, r6
 8005f66:	5dc7      	ldrb	r7, [r0, r7]
 8005f68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f6c:	4637      	mov	r7, r6
 8005f6e:	42bb      	cmp	r3, r7
 8005f70:	460e      	mov	r6, r1
 8005f72:	d9f4      	bls.n	8005f5e <_printf_i+0x116>
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d10b      	bne.n	8005f90 <_printf_i+0x148>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	07de      	lsls	r6, r3, #31
 8005f7c:	d508      	bpl.n	8005f90 <_printf_i+0x148>
 8005f7e:	6923      	ldr	r3, [r4, #16]
 8005f80:	6861      	ldr	r1, [r4, #4]
 8005f82:	4299      	cmp	r1, r3
 8005f84:	bfde      	ittt	le
 8005f86:	2330      	movle	r3, #48	; 0x30
 8005f88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f90:	1b52      	subs	r2, r2, r5
 8005f92:	6122      	str	r2, [r4, #16]
 8005f94:	f8cd a000 	str.w	sl, [sp]
 8005f98:	464b      	mov	r3, r9
 8005f9a:	aa03      	add	r2, sp, #12
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	f7ff fee4 	bl	8005d6c <_printf_common>
 8005fa4:	3001      	adds	r0, #1
 8005fa6:	d14a      	bne.n	800603e <_printf_i+0x1f6>
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	b004      	add	sp, #16
 8005fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	f043 0320 	orr.w	r3, r3, #32
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	4833      	ldr	r0, [pc, #204]	; (8006088 <_printf_i+0x240>)
 8005fbc:	2778      	movs	r7, #120	; 0x78
 8005fbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	6829      	ldr	r1, [r5, #0]
 8005fc6:	061f      	lsls	r7, r3, #24
 8005fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fcc:	d402      	bmi.n	8005fd4 <_printf_i+0x18c>
 8005fce:	065f      	lsls	r7, r3, #25
 8005fd0:	bf48      	it	mi
 8005fd2:	b2b6      	uxthmi	r6, r6
 8005fd4:	07df      	lsls	r7, r3, #31
 8005fd6:	bf48      	it	mi
 8005fd8:	f043 0320 	orrmi.w	r3, r3, #32
 8005fdc:	6029      	str	r1, [r5, #0]
 8005fde:	bf48      	it	mi
 8005fe0:	6023      	strmi	r3, [r4, #0]
 8005fe2:	b91e      	cbnz	r6, 8005fec <_printf_i+0x1a4>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	f023 0320 	bic.w	r3, r3, #32
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	2310      	movs	r3, #16
 8005fee:	e7a7      	b.n	8005f40 <_printf_i+0xf8>
 8005ff0:	4824      	ldr	r0, [pc, #144]	; (8006084 <_printf_i+0x23c>)
 8005ff2:	e7e4      	b.n	8005fbe <_printf_i+0x176>
 8005ff4:	4615      	mov	r5, r2
 8005ff6:	e7bd      	b.n	8005f74 <_printf_i+0x12c>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	6826      	ldr	r6, [r4, #0]
 8005ffc:	6961      	ldr	r1, [r4, #20]
 8005ffe:	1d18      	adds	r0, r3, #4
 8006000:	6028      	str	r0, [r5, #0]
 8006002:	0635      	lsls	r5, r6, #24
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	d501      	bpl.n	800600c <_printf_i+0x1c4>
 8006008:	6019      	str	r1, [r3, #0]
 800600a:	e002      	b.n	8006012 <_printf_i+0x1ca>
 800600c:	0670      	lsls	r0, r6, #25
 800600e:	d5fb      	bpl.n	8006008 <_printf_i+0x1c0>
 8006010:	8019      	strh	r1, [r3, #0]
 8006012:	2300      	movs	r3, #0
 8006014:	6123      	str	r3, [r4, #16]
 8006016:	4615      	mov	r5, r2
 8006018:	e7bc      	b.n	8005f94 <_printf_i+0x14c>
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	1d1a      	adds	r2, r3, #4
 800601e:	602a      	str	r2, [r5, #0]
 8006020:	681d      	ldr	r5, [r3, #0]
 8006022:	6862      	ldr	r2, [r4, #4]
 8006024:	2100      	movs	r1, #0
 8006026:	4628      	mov	r0, r5
 8006028:	f7fa f8fa 	bl	8000220 <memchr>
 800602c:	b108      	cbz	r0, 8006032 <_printf_i+0x1ea>
 800602e:	1b40      	subs	r0, r0, r5
 8006030:	6060      	str	r0, [r4, #4]
 8006032:	6863      	ldr	r3, [r4, #4]
 8006034:	6123      	str	r3, [r4, #16]
 8006036:	2300      	movs	r3, #0
 8006038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800603c:	e7aa      	b.n	8005f94 <_printf_i+0x14c>
 800603e:	6923      	ldr	r3, [r4, #16]
 8006040:	462a      	mov	r2, r5
 8006042:	4649      	mov	r1, r9
 8006044:	4640      	mov	r0, r8
 8006046:	47d0      	blx	sl
 8006048:	3001      	adds	r0, #1
 800604a:	d0ad      	beq.n	8005fa8 <_printf_i+0x160>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	079b      	lsls	r3, r3, #30
 8006050:	d413      	bmi.n	800607a <_printf_i+0x232>
 8006052:	68e0      	ldr	r0, [r4, #12]
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	4298      	cmp	r0, r3
 8006058:	bfb8      	it	lt
 800605a:	4618      	movlt	r0, r3
 800605c:	e7a6      	b.n	8005fac <_printf_i+0x164>
 800605e:	2301      	movs	r3, #1
 8006060:	4632      	mov	r2, r6
 8006062:	4649      	mov	r1, r9
 8006064:	4640      	mov	r0, r8
 8006066:	47d0      	blx	sl
 8006068:	3001      	adds	r0, #1
 800606a:	d09d      	beq.n	8005fa8 <_printf_i+0x160>
 800606c:	3501      	adds	r5, #1
 800606e:	68e3      	ldr	r3, [r4, #12]
 8006070:	9903      	ldr	r1, [sp, #12]
 8006072:	1a5b      	subs	r3, r3, r1
 8006074:	42ab      	cmp	r3, r5
 8006076:	dcf2      	bgt.n	800605e <_printf_i+0x216>
 8006078:	e7eb      	b.n	8006052 <_printf_i+0x20a>
 800607a:	2500      	movs	r5, #0
 800607c:	f104 0619 	add.w	r6, r4, #25
 8006080:	e7f5      	b.n	800606e <_printf_i+0x226>
 8006082:	bf00      	nop
 8006084:	080061ed 	.word	0x080061ed
 8006088:	080061fe 	.word	0x080061fe

0800608c <memmove>:
 800608c:	4288      	cmp	r0, r1
 800608e:	b510      	push	{r4, lr}
 8006090:	eb01 0402 	add.w	r4, r1, r2
 8006094:	d902      	bls.n	800609c <memmove+0x10>
 8006096:	4284      	cmp	r4, r0
 8006098:	4623      	mov	r3, r4
 800609a:	d807      	bhi.n	80060ac <memmove+0x20>
 800609c:	1e43      	subs	r3, r0, #1
 800609e:	42a1      	cmp	r1, r4
 80060a0:	d008      	beq.n	80060b4 <memmove+0x28>
 80060a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060aa:	e7f8      	b.n	800609e <memmove+0x12>
 80060ac:	4402      	add	r2, r0
 80060ae:	4601      	mov	r1, r0
 80060b0:	428a      	cmp	r2, r1
 80060b2:	d100      	bne.n	80060b6 <memmove+0x2a>
 80060b4:	bd10      	pop	{r4, pc}
 80060b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060be:	e7f7      	b.n	80060b0 <memmove+0x24>

080060c0 <_sbrk_r>:
 80060c0:	b538      	push	{r3, r4, r5, lr}
 80060c2:	4d06      	ldr	r5, [pc, #24]	; (80060dc <_sbrk_r+0x1c>)
 80060c4:	2300      	movs	r3, #0
 80060c6:	4604      	mov	r4, r0
 80060c8:	4608      	mov	r0, r1
 80060ca:	602b      	str	r3, [r5, #0]
 80060cc:	f7fa fd98 	bl	8000c00 <_sbrk>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	d102      	bne.n	80060da <_sbrk_r+0x1a>
 80060d4:	682b      	ldr	r3, [r5, #0]
 80060d6:	b103      	cbz	r3, 80060da <_sbrk_r+0x1a>
 80060d8:	6023      	str	r3, [r4, #0]
 80060da:	bd38      	pop	{r3, r4, r5, pc}
 80060dc:	20000298 	.word	0x20000298

080060e0 <memcpy>:
 80060e0:	440a      	add	r2, r1
 80060e2:	4291      	cmp	r1, r2
 80060e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060e8:	d100      	bne.n	80060ec <memcpy+0xc>
 80060ea:	4770      	bx	lr
 80060ec:	b510      	push	{r4, lr}
 80060ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060f6:	4291      	cmp	r1, r2
 80060f8:	d1f9      	bne.n	80060ee <memcpy+0xe>
 80060fa:	bd10      	pop	{r4, pc}

080060fc <_realloc_r>:
 80060fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006100:	4680      	mov	r8, r0
 8006102:	4614      	mov	r4, r2
 8006104:	460e      	mov	r6, r1
 8006106:	b921      	cbnz	r1, 8006112 <_realloc_r+0x16>
 8006108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800610c:	4611      	mov	r1, r2
 800610e:	f7ff bc49 	b.w	80059a4 <_malloc_r>
 8006112:	b92a      	cbnz	r2, 8006120 <_realloc_r+0x24>
 8006114:	f7ff fbda 	bl	80058cc <_free_r>
 8006118:	4625      	mov	r5, r4
 800611a:	4628      	mov	r0, r5
 800611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006120:	f000 f81b 	bl	800615a <_malloc_usable_size_r>
 8006124:	4284      	cmp	r4, r0
 8006126:	4607      	mov	r7, r0
 8006128:	d802      	bhi.n	8006130 <_realloc_r+0x34>
 800612a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800612e:	d812      	bhi.n	8006156 <_realloc_r+0x5a>
 8006130:	4621      	mov	r1, r4
 8006132:	4640      	mov	r0, r8
 8006134:	f7ff fc36 	bl	80059a4 <_malloc_r>
 8006138:	4605      	mov	r5, r0
 800613a:	2800      	cmp	r0, #0
 800613c:	d0ed      	beq.n	800611a <_realloc_r+0x1e>
 800613e:	42bc      	cmp	r4, r7
 8006140:	4622      	mov	r2, r4
 8006142:	4631      	mov	r1, r6
 8006144:	bf28      	it	cs
 8006146:	463a      	movcs	r2, r7
 8006148:	f7ff ffca 	bl	80060e0 <memcpy>
 800614c:	4631      	mov	r1, r6
 800614e:	4640      	mov	r0, r8
 8006150:	f7ff fbbc 	bl	80058cc <_free_r>
 8006154:	e7e1      	b.n	800611a <_realloc_r+0x1e>
 8006156:	4635      	mov	r5, r6
 8006158:	e7df      	b.n	800611a <_realloc_r+0x1e>

0800615a <_malloc_usable_size_r>:
 800615a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615e:	1f18      	subs	r0, r3, #4
 8006160:	2b00      	cmp	r3, #0
 8006162:	bfbc      	itt	lt
 8006164:	580b      	ldrlt	r3, [r1, r0]
 8006166:	18c0      	addlt	r0, r0, r3
 8006168:	4770      	bx	lr
	...

0800616c <_init>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	bf00      	nop
 8006170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006172:	bc08      	pop	{r3}
 8006174:	469e      	mov	lr, r3
 8006176:	4770      	bx	lr

08006178 <_fini>:
 8006178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800617a:	bf00      	nop
 800617c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617e:	bc08      	pop	{r3}
 8006180:	469e      	mov	lr, r3
 8006182:	4770      	bx	lr
