
G4_EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005dd0  08005dd0  00015dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e5c  08005e5c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e64  08005e64  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e68  08005e68  00015e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000005c  08005ec8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08005ec8  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011ae5  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002885  00000000  00000000  00031bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  00034440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a54  00000000  00000000  000351a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000254ea  00000000  00000000  00035bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012da9  00000000  00000000  0005b0e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eab33  00000000  00000000  0006de8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003af0  00000000  00000000  001589c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0015c4b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005db8 	.word	0x08005db8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005db8 	.word	0x08005db8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
bool at24_isConnected(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(_EEPROM_WP_GPIO,_EEPROM_WP_PIN,GPIO_PIN_SET);
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	2202      	movs	r2, #2
 80005c4:	21a0      	movs	r1, #160	; 0xa0
 80005c6:	4805      	ldr	r0, [pc, #20]	; (80005dc <at24_isConnected+0x20>)
 80005c8:	f001 f994 	bl	80018f4 <HAL_I2C_IsDeviceReady>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d101      	bne.n	80005d6 <at24_isConnected+0x1a>
    return true;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e000      	b.n	80005d8 <at24_isConnected+0x1c>
  else
    return false;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	2000007c 	.word	0x2000007c

080005e0 <at24_read>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
bool at24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af04      	add	r7, sp, #16
 80005e6:	60b9      	str	r1, [r7, #8]
 80005e8:	607a      	str	r2, [r7, #4]
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4603      	mov	r3, r0
 80005ee:	81fb      	strh	r3, [r7, #14]
  #if (EEPROM_USE_IWDG)
		HAL_IWDG_Refresh(&_EEPROM_IWDG);
  #endif
  if (at24_lock == 1)
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <at24_read+0x60>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d101      	bne.n	80005fc <at24_read+0x1c>
    return false;
 80005f8:	2300      	movs	r3, #0
 80005fa:	e01c      	b.n	8000636 <at24_read+0x56>
  at24_lock = 1;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <at24_read+0x60>)
 80005fe:	2201      	movs	r2, #1
 8000600:	701a      	strb	r2, [r3, #0]
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	b29b      	uxth	r3, r3
 8000606:	89f9      	ldrh	r1, [r7, #14]
 8000608:	683a      	ldr	r2, [r7, #0]
 800060a:	9202      	str	r2, [sp, #8]
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2302      	movs	r3, #2
 8000614:	460a      	mov	r2, r1
 8000616:	21a0      	movs	r1, #160	; 0xa0
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <at24_read+0x64>)
 800061a:	f001 f851 	bl	80016c0 <HAL_I2C_Mem_Read>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d104      	bne.n	800062e <at24_read+0x4e>
  #endif
  {
    at24_lock = 0;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <at24_read+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
    return true;
 800062a:	2301      	movs	r3, #1
 800062c:	e003      	b.n	8000636 <at24_read+0x56>
  }
  else
  {
    at24_lock = 0;
 800062e:	4b04      	ldr	r3, [pc, #16]	; (8000640 <at24_read+0x60>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
    return false;
 8000634:	2300      	movs	r3, #0
  }
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000078 	.word	0x20000078
 8000644:	2000007c 	.word	0x2000007c

08000648 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800065e:	4b34      	ldr	r3, [pc, #208]	; (8000730 <MX_GPIO_Init+0xe8>)
 8000660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000662:	4a33      	ldr	r2, [pc, #204]	; (8000730 <MX_GPIO_Init+0xe8>)
 8000664:	f043 0320 	orr.w	r3, r3, #32
 8000668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066a:	4b31      	ldr	r3, [pc, #196]	; (8000730 <MX_GPIO_Init+0xe8>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	f003 0320 	and.w	r3, r3, #32
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b2e      	ldr	r3, [pc, #184]	; (8000730 <MX_GPIO_Init+0xe8>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	4a2d      	ldr	r2, [pc, #180]	; (8000730 <MX_GPIO_Init+0xe8>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000682:	4b2b      	ldr	r3, [pc, #172]	; (8000730 <MX_GPIO_Init+0xe8>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068e:	4b28      	ldr	r3, [pc, #160]	; (8000730 <MX_GPIO_Init+0xe8>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a27      	ldr	r2, [pc, #156]	; (8000730 <MX_GPIO_Init+0xe8>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b25      	ldr	r3, [pc, #148]	; (8000730 <MX_GPIO_Init+0xe8>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a6:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_GPIO_Init+0xe8>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a21      	ldr	r2, [pc, #132]	; (8000730 <MX_GPIO_Init+0xe8>)
 80006ac:	f043 0308 	orr.w	r3, r3, #8
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_GPIO_Init+0xe8>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0308 	and.w	r3, r3, #8
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_GPIO_Init+0xe8>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <MX_GPIO_Init+0xe8>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_GPIO_Init+0xe8>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2120      	movs	r1, #32
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f000 ff2d 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	4813      	ldr	r0, [pc, #76]	; (8000734 <MX_GPIO_Init+0xec>)
 80006e8:	f000 ff28 	bl	800153c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80006ec:	2320      	movs	r3, #32
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f000 fd97 	bl	8001238 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800070a:	2304      	movs	r3, #4
 800070c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0xec>)
 8000722:	f000 fd89 	bl	8001238 <HAL_GPIO_Init>

}
 8000726:	bf00      	nop
 8000728:	3728      	adds	r7, #40	; 0x28
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	48000c00 	.word	0x48000c00

08000738 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800073c:	4b1b      	ldr	r3, [pc, #108]	; (80007ac <MX_I2C4_Init+0x74>)
 800073e:	4a1c      	ldr	r2, [pc, #112]	; (80007b0 <MX_I2C4_Init+0x78>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00909BEB;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_I2C4_Init+0x74>)
 8000744:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <MX_I2C4_Init+0x7c>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <MX_I2C4_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_I2C4_Init+0x74>)
 8000750:	2201      	movs	r2, #1
 8000752:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_I2C4_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_I2C4_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2C4_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_I2C4_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_I2C4_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000772:	480e      	ldr	r0, [pc, #56]	; (80007ac <MX_I2C4_Init+0x74>)
 8000774:	f000 ff14 	bl	80015a0 <HAL_I2C_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800077e:	f000 f95c 	bl	8000a3a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <MX_I2C4_Init+0x74>)
 8000786:	f002 f969 	bl	8002a5c <HAL_I2CEx_ConfigAnalogFilter>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000790:	f000 f953 	bl	8000a3a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000794:	2100      	movs	r1, #0
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_I2C4_Init+0x74>)
 8000798:	f002 f9ab 	bl	8002af2 <HAL_I2CEx_ConfigDigitalFilter>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80007a2:	f000 f94a 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000007c 	.word	0x2000007c
 80007b0:	40008400 	.word	0x40008400
 80007b4:	00909beb 	.word	0x00909beb

080007b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0a0      	sub	sp, #128	; 0x80
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007d0:	f107 0318 	add.w	r3, r7, #24
 80007d4:	2254      	movs	r2, #84	; 0x54
 80007d6:	2100      	movs	r1, #0
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 fe69 	bl	80054b0 <memset>
  if(i2cHandle->Instance==I2C4)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a35      	ldr	r2, [pc, #212]	; (80008b8 <HAL_I2C_MspInit+0x100>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d162      	bne.n	80008ae <HAL_I2C_MspInit+0xf6>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80007e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 ffa0 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000802:	f000 f91a 	bl	8000a3a <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b2d      	ldr	r3, [pc, #180]	; (80008bc <HAL_I2C_MspInit+0x104>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	4a2c      	ldr	r2, [pc, #176]	; (80008bc <HAL_I2C_MspInit+0x104>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000812:	4b2a      	ldr	r3, [pc, #168]	; (80008bc <HAL_I2C_MspInit+0x104>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	617b      	str	r3, [r7, #20]
 800081c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <HAL_I2C_MspInit+0x104>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a26      	ldr	r2, [pc, #152]	; (80008bc <HAL_I2C_MspInit+0x104>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b24      	ldr	r3, [pc, #144]	; (80008bc <HAL_I2C_MspInit+0x104>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PC6     ------> I2C4_SCL
    PB7     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083a:	2312      	movs	r3, #18
 800083c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C4;
 8000846:	2308      	movs	r3, #8
 8000848:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800084e:	4619      	mov	r1, r3
 8000850:	481b      	ldr	r0, [pc, #108]	; (80008c0 <HAL_I2C_MspInit+0x108>)
 8000852:	f000 fcf1 	bl	8001238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085a:	2312      	movs	r3, #18
 800085c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_I2C4;
 8000866:	2303      	movs	r3, #3
 8000868:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800086e:	4619      	mov	r1, r3
 8000870:	4814      	ldr	r0, [pc, #80]	; (80008c4 <HAL_I2C_MspInit+0x10c>)
 8000872:	f000 fce1 	bl	8001238 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <HAL_I2C_MspInit+0x104>)
 8000878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <HAL_I2C_MspInit+0x104>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <HAL_I2C_MspInit+0x104>)
 8000884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	68fb      	ldr	r3, [r7, #12]

    /* I2C4 interrupt Init */
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2052      	movs	r0, #82	; 0x52
 8000894:	f000 fbcd 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 8000898:	2052      	movs	r0, #82	; 0x52
 800089a:	f000 fbe4 	bl	8001066 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2053      	movs	r0, #83	; 0x53
 80008a4:	f000 fbc5 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80008a8:	2053      	movs	r0, #83	; 0x53
 80008aa:	f000 fbdc 	bl	8001066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80008ae:	bf00      	nop
 80008b0:	3780      	adds	r7, #128	; 0x80
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40008400 	.word	0x40008400
 80008bc:	40021000 	.word	0x40021000
 80008c0:	48000800 	.word	0x48000800
 80008c4:	48000400 	.word	0x48000400

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b0a0      	sub	sp, #128	; 0x80
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ce:	f000 fa42 	bl	8000d56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d2:	f000 f867 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d6:	f7ff feb7 	bl	8000648 <MX_GPIO_Init>
  MX_I2C4_Init();
 80008da:	f7ff ff2d 	bl	8000738 <MX_I2C4_Init>
  MX_USART2_UART_Init();
 80008de:	f000 f965 	bl	8000bac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  const char wmsg[] = "Some data"; //Данные которые хотим записать в EEPROM
 80008e2:	4a2c      	ldr	r2, [pc, #176]	; (8000994 <main+0xcc>)
 80008e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80008e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80008ea:	c303      	stmia	r3!, {r0, r1}
 80008ec:	801a      	strh	r2, [r3, #0]
  char rmsg[sizeof(wmsg)]; //Массив в который будем записывать прочитанные данные из EEPROM
  uint8_t str[100]; //Массив для красивого форматирования для отправки через Serial (не обязательно)
  uint8_t simbol = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  uint16_t memAddr = 0x0000; //Адрес в байтах с нулевого значения в памяти EEPROM
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (at24_isConnected()) //Проверяем есть ли связь EEPROM
 80008fa:	f7ff fe5f 	bl	80005bc <at24_isConnected>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d005      	beq.n	8000910 <main+0x48>
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1); //Если есть зажигаем LED 1
 8000904:	2201      	movs	r2, #1
 8000906:	2104      	movs	r1, #4
 8000908:	4823      	ldr	r0, [pc, #140]	; (8000998 <main+0xd0>)
 800090a:	f000 fe17 	bl	800153c <HAL_GPIO_WritePin>
 800090e:	e004      	b.n	800091a <main+0x52>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 0); //Если нет LED 1 не горит
 8000910:	2200      	movs	r2, #0
 8000912:	2104      	movs	r1, #4
 8000914:	4820      	ldr	r0, [pc, #128]	; (8000998 <main+0xd0>)
 8000916:	f000 fe11 	bl	800153c <HAL_GPIO_WritePin>
	  }

	  for(simbol = 0; simbol < sizeof(wmsg)+1; simbol++) //Пробегаем по значениям
 800091a:	2300      	movs	r3, #0
 800091c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000920:	e032      	b.n	8000988 <main+0xc0>
	  {
		  if(at24_read(memAddr + simbol, rmsg, 1, 100)) //Читаем данные из EEPROM в rmsg посимвольно
 8000922:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000926:	b29a      	uxth	r2, r3
 8000928:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800092c:	4413      	add	r3, r2
 800092e:	b298      	uxth	r0, r3
 8000930:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000934:	2364      	movs	r3, #100	; 0x64
 8000936:	2201      	movs	r2, #1
 8000938:	f7ff fe52 	bl	80005e0 <at24_read>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d015      	beq.n	800096e <main+0xa6>
			{
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Мигаем LED 2, если все ок
 8000942:	2120      	movs	r1, #32
 8000944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000948:	f000 fe10 	bl	800156c <HAL_GPIO_TogglePin>
			  sprintf(str, "Data: %s \r\n", rmsg); //Собираем красивую строку для Serial
 800094c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000950:	463b      	mov	r3, r7
 8000952:	4912      	ldr	r1, [pc, #72]	; (800099c <main+0xd4>)
 8000954:	4618      	mov	r0, r3
 8000956:	f004 fd8b 	bl	8005470 <siprintf>
			  HAL_UART_Transmit_IT(&huart2, str, sizeof(rmsg)+8); //Отправляем по Serial
 800095a:	463b      	mov	r3, r7
 800095c:	2212      	movs	r2, #18
 800095e:	4619      	mov	r1, r3
 8000960:	480f      	ldr	r0, [pc, #60]	; (80009a0 <main+0xd8>)
 8000962:	f003 f989 	bl	8003c78 <HAL_UART_Transmit_IT>
			  HAL_Delay(200);
 8000966:	20c8      	movs	r0, #200	; 0xc8
 8000968:	f000 fa66 	bl	8000e38 <HAL_Delay>
 800096c:	e007      	b.n	800097e <main+0xb6>
			}
		  else
		  {
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); //Мигаем LED 1, если НЕ ок
 800096e:	2120      	movs	r1, #32
 8000970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000974:	f000 fdfa 	bl	800156c <HAL_GPIO_TogglePin>
			  HAL_Delay(200);
 8000978:	20c8      	movs	r0, #200	; 0xc8
 800097a:	f000 fa5d 	bl	8000e38 <HAL_Delay>
	  for(simbol = 0; simbol < sizeof(wmsg)+1; simbol++) //Пробегаем по значениям
 800097e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000982:	3301      	adds	r3, #1
 8000984:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000988:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800098c:	2b0a      	cmp	r3, #10
 800098e:	d9c8      	bls.n	8000922 <main+0x5a>
	  if (at24_isConnected()) //Проверяем есть ли связь EEPROM
 8000990:	e7b3      	b.n	80008fa <main+0x32>
 8000992:	bf00      	nop
 8000994:	08005ddc 	.word	0x08005ddc
 8000998:	48000c00 	.word	0x48000c00
 800099c:	08005dd0 	.word	0x08005dd0
 80009a0:	200000cc 	.word	0x200000cc

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	2238      	movs	r2, #56	; 0x38
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f004 fd7c 	bl	80054b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f002 f8e0 	bl	8002b8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	2303      	movs	r3, #3
 80009dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009de:	2301      	movs	r3, #1
 80009e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009e2:	2328      	movs	r3, #40	; 0x28
 80009e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ea:	2302      	movs	r3, #2
 80009ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0318 	add.w	r3, r7, #24
 80009f6:	4618      	mov	r0, r3
 80009f8:	f002 f96c 	bl	8002cd4 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000a02:	f000 f81a 	bl	8000a3a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a12:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2104      	movs	r1, #4
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 fc6e 	bl	8003304 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a2e:	f000 f804 	bl	8000a3a <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	; 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a3e:	b672      	cpsid	i
}
 8000a40:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <Error_Handler+0x8>

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x44>)
 8000a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x44>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6613      	str	r3, [r2, #96]	; 0x60
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x44>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x44>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <NMI_Handler+0x4>

08000a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <MemManage_Handler+0x4>

08000a9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <BusFault_Handler+0x4>

08000aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <UsageFault_Handler+0x4>

08000aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr

08000ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f990 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <USART2_IRQHandler+0x10>)
 8000ae6:	f003 f96f 	bl	8003dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000cc 	.word	0x200000cc

08000af4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt / I2C4 wake-up interrupt through EXTI line 42.
  */
void I2C4_EV_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <I2C4_EV_IRQHandler+0x10>)
 8000afa:	f001 f802 	bl	8001b02 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	2000007c 	.word	0x2000007c

08000b08 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <I2C4_ER_IRQHandler+0x10>)
 8000b0e:	f001 f812 	bl	8001b36 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	2000007c 	.word	0x2000007c

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f004 fcb8 	bl	80054c0 <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20020000 	.word	0x20020000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	200000c8 	.word	0x200000c8
 8000b84:	200002a8 	.word	0x200002a8

08000b88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <MX_USART2_UART_Init+0x94>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bf6:	f002 ffef 	bl	8003bd8 <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f7ff ff1b 	bl	8000a3a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000c08:	f004 fb67 	bl	80052da <HAL_UARTEx_SetTxFifoThreshold>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c12:	f7ff ff12 	bl	8000a3a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000c1a:	f004 fb9c 	bl	8005356 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f7ff ff09 	bl	8000a3a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000c2a:	f004 fb1d 	bl	8005268 <HAL_UARTEx_DisableFifoMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f7ff ff01 	bl	8000a3a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000cc 	.word	0x200000cc
 8000c40:	40004400 	.word	0x40004400

08000c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b09e      	sub	sp, #120	; 0x78
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2254      	movs	r2, #84	; 0x54
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f004 fc23 	bl	80054b0 <memset>
  if(uartHandle->Instance==USART2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a23      	ldr	r2, [pc, #140]	; (8000cfc <HAL_UART_MspInit+0xb8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d13e      	bne.n	8000cf2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4618      	mov	r0, r3
 8000c82:	f002 fd5b 	bl	800373c <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f7ff fed5 	bl	8000a3a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <HAL_UART_MspInit+0xbc>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	4a1a      	ldr	r2, [pc, #104]	; (8000d00 <HAL_UART_MspInit+0xbc>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <HAL_UART_MspInit+0xbc>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0xbc>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <HAL_UART_MspInit+0xbc>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_UART_MspInit+0xbc>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cc0:	230c      	movs	r3, #12
 8000cc2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cd8:	4619      	mov	r1, r3
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f000 faab 	bl	8001238 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	2026      	movs	r0, #38	; 0x26
 8000ce8:	f000 f9a3 	bl	8001032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cec:	2026      	movs	r0, #38	; 0x26
 8000cee:	f000 f9ba 	bl	8001066 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3778      	adds	r7, #120	; 0x78
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40021000 	.word	0x40021000

08000d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490e      	ldr	r1, [pc, #56]	; (8000d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0b      	ldr	r4, [pc, #44]	; (8000d50 <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d2e:	f7ff ff2b 	bl	8000b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d32:	f004 fbcb 	bl	80054cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d36:	f7ff fdc7 	bl	80008c8 <main>

08000d3a <LoopForever>:

LoopForever:
    b LoopForever
 8000d3a:	e7fe      	b.n	8000d3a <LoopForever>
  ldr   r0, =_estack
 8000d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d48:	08005e6c 	.word	0x08005e6c
  ldr r2, =_sbss
 8000d4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d50:	200002a8 	.word	0x200002a8

08000d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC1_2_IRQHandler>

08000d56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f95b 	bl	800101c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f80e 	bl	8000d88 <HAL_InitTick>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d002      	beq.n	8000d78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	71fb      	strb	r3, [r7, #7]
 8000d76:	e001      	b.n	8000d7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d78:	f7ff fe64 	bl	8000a44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d7c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_InitTick+0x68>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d022      	beq.n	8000de2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <HAL_InitTick+0x6c>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_InitTick+0x68>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 f966 	bl	8001082 <HAL_SYSTICK_Config>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d10f      	bne.n	8000ddc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b0f      	cmp	r3, #15
 8000dc0:	d809      	bhi.n	8000dd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dca:	f000 f932 	bl	8001032 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_InitTick+0x70>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e007      	b.n	8000de6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	73fb      	strb	r3, [r7, #15]
 8000dda:	e004      	b.n	8000de6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
 8000de0:	e001      	b.n	8000de6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000008 	.word	0x20000008
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000004 	.word	0x20000004

08000dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e00:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <HAL_IncTick+0x1c>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x20>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a03      	ldr	r2, [pc, #12]	; (8000e18 <HAL_IncTick+0x1c>)
 8000e0c:	6013      	str	r3, [r2, #0]
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	2000015c 	.word	0x2000015c
 8000e1c:	20000008 	.word	0x20000008

08000e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return uwTick;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_GetTick+0x14>)
 8000e26:	681b      	ldr	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	2000015c 	.word	0x2000015c

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff ffee 	bl	8000e20 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d004      	beq.n	8000e5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_Delay+0x40>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4413      	add	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5c:	bf00      	nop
 8000e5e:	f7ff ffdf 	bl	8000e20 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d8f7      	bhi.n	8000e5e <HAL_Delay+0x26>
  {
  }
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000008 	.word	0x20000008

08000e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	60d3      	str	r3, [r2, #12]
}
 8000eb4:	bf00      	nop
 8000eb6:	3714      	adds	r7, #20
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_GetPriorityGrouping+0x18>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	f003 0307 	and.w	r3, r3, #7
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	db0b      	blt.n	8000f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f003 021f 	and.w	r2, r3, #31
 8000ef8:	4907      	ldr	r1, [pc, #28]	; (8000f18 <__NVIC_EnableIRQ+0x38>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	095b      	lsrs	r3, r3, #5
 8000f00:	2001      	movs	r0, #1
 8000f02:	fa00 f202 	lsl.w	r2, r0, r2
 8000f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000e100 	.word	0xe000e100

08000f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	6039      	str	r1, [r7, #0]
 8000f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db0a      	blt.n	8000f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	490c      	ldr	r1, [pc, #48]	; (8000f68 <__NVIC_SetPriority+0x4c>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	0112      	lsls	r2, r2, #4
 8000f3c:	b2d2      	uxtb	r2, r2
 8000f3e:	440b      	add	r3, r1
 8000f40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f44:	e00a      	b.n	8000f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2da      	uxtb	r2, r3
 8000f4a:	4908      	ldr	r1, [pc, #32]	; (8000f6c <__NVIC_SetPriority+0x50>)
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 030f 	and.w	r3, r3, #15
 8000f52:	3b04      	subs	r3, #4
 8000f54:	0112      	lsls	r2, r2, #4
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	440b      	add	r3, r1
 8000f5a:	761a      	strb	r2, [r3, #24]
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b089      	sub	sp, #36	; 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f1c3 0307 	rsb	r3, r3, #7
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	bf28      	it	cs
 8000f8e:	2304      	movcs	r3, #4
 8000f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3304      	adds	r3, #4
 8000f96:	2b06      	cmp	r3, #6
 8000f98:	d902      	bls.n	8000fa0 <NVIC_EncodePriority+0x30>
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3b03      	subs	r3, #3
 8000f9e:	e000      	b.n	8000fa2 <NVIC_EncodePriority+0x32>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43da      	mvns	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc8:	4313      	orrs	r3, r2
         );
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fe8:	d301      	bcc.n	8000fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00f      	b.n	800100e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fee:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <SysTick_Config+0x40>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f7ff ff8e 	bl	8000f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <SysTick_Config+0x40>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	4b04      	ldr	r3, [pc, #16]	; (8001018 <SysTick_Config+0x40>)
 8001008:	2207      	movs	r2, #7
 800100a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	e000e010 	.word	0xe000e010

0800101c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff29 	bl	8000e7c <__NVIC_SetPriorityGrouping>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b086      	sub	sp, #24
 8001036:	af00      	add	r7, sp, #0
 8001038:	4603      	mov	r3, r0
 800103a:	60b9      	str	r1, [r7, #8]
 800103c:	607a      	str	r2, [r7, #4]
 800103e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001040:	f7ff ff40 	bl	8000ec4 <__NVIC_GetPriorityGrouping>
 8001044:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f7ff ff90 	bl	8000f70 <NVIC_EncodePriority>
 8001050:	4602      	mov	r2, r0
 8001052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001056:	4611      	mov	r1, r2
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff5f 	bl	8000f1c <__NVIC_SetPriority>
}
 800105e:	bf00      	nop
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b082      	sub	sp, #8
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ff33 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff ffa4 	bl	8000fd8 <SysTick_Config>
 8001090:	4603      	mov	r3, r0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109a:	b480      	push	{r7}
 800109c:	b085      	sub	sp, #20
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d005      	beq.n	80010be <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2204      	movs	r2, #4
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e037      	b.n	800112e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f022 020e 	bic.w	r2, r2, #14
 80010cc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010dc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0201 	bic.w	r2, r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f003 021f 	and.w	r2, r3, #31
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	2101      	movs	r1, #1
 80010fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001100:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800110a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00c      	beq.n	800112e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800111e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001122:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800112c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d00d      	beq.n	8001180 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2204      	movs	r2, #4
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	73fb      	strb	r3, [r7, #15]
 800117e:	e047      	b.n	8001210 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 020e 	bic.w	r2, r2, #14
 800118e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0201 	bic.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	2101      	movs	r1, #1
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	4798      	blx	r3
    }
  }
  return status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001228:	b2db      	uxtb	r3, r3
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001246:	e15a      	b.n	80014fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa01 f303 	lsl.w	r3, r1, r3
 8001254:	4013      	ands	r3, r2
 8001256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 814c 	beq.w	80014f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b01      	cmp	r3, #1
 800126a:	d005      	beq.n	8001278 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001274:	2b02      	cmp	r3, #2
 8001276:	d130      	bne.n	80012da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ae:	2201      	movs	r2, #1
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 0201 	and.w	r2, r3, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d017      	beq.n	8001316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d123      	bne.n	800136a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	220f      	movs	r2, #15
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	691a      	ldr	r2, [r3, #16]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4313      	orrs	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	08da      	lsrs	r2, r3, #3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3208      	adds	r2, #8
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	2203      	movs	r2, #3
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	4013      	ands	r3, r2
 8001380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0203 	and.w	r2, r3, #3
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	693a      	ldr	r2, [r7, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 80a6 	beq.w	80014f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ac:	4b5b      	ldr	r3, [pc, #364]	; (800151c <HAL_GPIO_Init+0x2e4>)
 80013ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b0:	4a5a      	ldr	r2, [pc, #360]	; (800151c <HAL_GPIO_Init+0x2e4>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6613      	str	r3, [r2, #96]	; 0x60
 80013b8:	4b58      	ldr	r3, [pc, #352]	; (800151c <HAL_GPIO_Init+0x2e4>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	60bb      	str	r3, [r7, #8]
 80013c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013c4:	4a56      	ldr	r2, [pc, #344]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	3302      	adds	r3, #2
 80013cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	220f      	movs	r2, #15
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ee:	d01f      	beq.n	8001430 <HAL_GPIO_Init+0x1f8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a4c      	ldr	r2, [pc, #304]	; (8001524 <HAL_GPIO_Init+0x2ec>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d019      	beq.n	800142c <HAL_GPIO_Init+0x1f4>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a4b      	ldr	r2, [pc, #300]	; (8001528 <HAL_GPIO_Init+0x2f0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d013      	beq.n	8001428 <HAL_GPIO_Init+0x1f0>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a4a      	ldr	r2, [pc, #296]	; (800152c <HAL_GPIO_Init+0x2f4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d00d      	beq.n	8001424 <HAL_GPIO_Init+0x1ec>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a49      	ldr	r2, [pc, #292]	; (8001530 <HAL_GPIO_Init+0x2f8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d007      	beq.n	8001420 <HAL_GPIO_Init+0x1e8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a48      	ldr	r2, [pc, #288]	; (8001534 <HAL_GPIO_Init+0x2fc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_GPIO_Init+0x1e4>
 8001418:	2305      	movs	r3, #5
 800141a:	e00a      	b.n	8001432 <HAL_GPIO_Init+0x1fa>
 800141c:	2306      	movs	r3, #6
 800141e:	e008      	b.n	8001432 <HAL_GPIO_Init+0x1fa>
 8001420:	2304      	movs	r3, #4
 8001422:	e006      	b.n	8001432 <HAL_GPIO_Init+0x1fa>
 8001424:	2303      	movs	r3, #3
 8001426:	e004      	b.n	8001432 <HAL_GPIO_Init+0x1fa>
 8001428:	2302      	movs	r3, #2
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x1fa>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_GPIO_Init+0x1fa>
 8001430:	2300      	movs	r3, #0
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	4093      	lsls	r3, r2
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001442:	4937      	ldr	r1, [pc, #220]	; (8001520 <HAL_GPIO_Init+0x2e8>)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001450:	4b39      	ldr	r3, [pc, #228]	; (8001538 <HAL_GPIO_Init+0x300>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001474:	4a30      	ldr	r2, [pc, #192]	; (8001538 <HAL_GPIO_Init+0x300>)
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800147a:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <HAL_GPIO_Init+0x300>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800149e:	4a26      	ldr	r2, [pc, #152]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014c8:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80014ce:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	4013      	ands	r3, r2
 80014dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d003      	beq.n	80014f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014f2:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_GPIO_Init+0x300>)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	fa22 f303 	lsr.w	r3, r2, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	f47f ae9d 	bne.w	8001248 <HAL_GPIO_Init+0x10>
  }
}
 800150e:	bf00      	nop
 8001510:	bf00      	nop
 8001512:	371c      	adds	r7, #28
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40021000 	.word	0x40021000
 8001520:	40010000 	.word	0x40010000
 8001524:	48000400 	.word	0x48000400
 8001528:	48000800 	.word	0x48000800
 800152c:	48000c00 	.word	0x48000c00
 8001530:	48001000 	.word	0x48001000
 8001534:	48001400 	.word	0x48001400
 8001538:	40010400 	.word	0x40010400

0800153c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
 8001548:	4613      	mov	r3, r2
 800154a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800154c:	787b      	ldrb	r3, [r7, #1]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001558:	e002      	b.n	8001560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800155a:	887a      	ldrh	r2, [r7, #2]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	460b      	mov	r3, r1
 8001576:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800157e:	887a      	ldrh	r2, [r7, #2]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4013      	ands	r3, r2
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	43d9      	mvns	r1, r3
 800158a:	887b      	ldrh	r3, [r7, #2]
 800158c:	400b      	ands	r3, r1
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e081      	b.n	80016b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d106      	bne.n	80015cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff f8f6 	bl	80007b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2224      	movs	r2, #36	; 0x24
 80015d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 0201 	bic.w	r2, r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001600:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d107      	bne.n	800161a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	e006      	b.n	8001628 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001626:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d104      	bne.n	800163a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001638:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800165c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691a      	ldr	r2, [r3, #16]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69d9      	ldr	r1, [r3, #28]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1a      	ldr	r2, [r3, #32]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	430a      	orrs	r2, r1
 8001686:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f042 0201 	orr.w	r2, r2, #1
 8001696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2220      	movs	r2, #32
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af02      	add	r7, sp, #8
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	4608      	mov	r0, r1
 80016ca:	4611      	mov	r1, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	817b      	strh	r3, [r7, #10]
 80016d2:	460b      	mov	r3, r1
 80016d4:	813b      	strh	r3, [r7, #8]
 80016d6:	4613      	mov	r3, r2
 80016d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b20      	cmp	r3, #32
 80016e4:	f040 80fd 	bne.w	80018e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <HAL_I2C_Mem_Read+0x34>
 80016ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0f1      	b.n	80018e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_I2C_Mem_Read+0x4e>
 800170a:	2302      	movs	r3, #2
 800170c:	e0ea      	b.n	80018e4 <HAL_I2C_Mem_Read+0x224>
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001716:	f7ff fb83 	bl	8000e20 <HAL_GetTick>
 800171a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2319      	movs	r3, #25
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 ff5e 	bl	80025ea <I2C_WaitOnFlagUntilTimeout>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0d5      	b.n	80018e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2222      	movs	r2, #34	; 0x22
 800173c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2240      	movs	r2, #64	; 0x40
 8001744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2200      	movs	r2, #0
 800174c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a3a      	ldr	r2, [r7, #32]
 8001752:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001758:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001760:	88f8      	ldrh	r0, [r7, #6]
 8001762:	893a      	ldrh	r2, [r7, #8]
 8001764:	8979      	ldrh	r1, [r7, #10]
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	4603      	mov	r3, r0
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 fb73 	bl	8001e5c <I2C_RequestMemoryRead>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e0ad      	b.n	80018e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178c:	b29b      	uxth	r3, r3
 800178e:	2bff      	cmp	r3, #255	; 0xff
 8001790:	d90e      	bls.n	80017b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	22ff      	movs	r2, #255	; 0xff
 8001796:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179c:	b2da      	uxtb	r2, r3
 800179e:	8979      	ldrh	r1, [r7, #10]
 80017a0:	4b52      	ldr	r3, [pc, #328]	; (80018ec <HAL_I2C_Mem_Read+0x22c>)
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f001 f8c7 	bl	800293c <I2C_TransferConfig>
 80017ae:	e00f      	b.n	80017d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	8979      	ldrh	r1, [r7, #10]
 80017c2:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <HAL_I2C_Mem_Read+0x22c>)
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f001 f8b6 	bl	800293c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d6:	2200      	movs	r2, #0
 80017d8:	2104      	movs	r1, #4
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 ff05 	bl	80025ea <I2C_WaitOnFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07c      	b.n	80018e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001812:	b29b      	uxth	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001820:	b29b      	uxth	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d034      	beq.n	8001890 <HAL_I2C_Mem_Read+0x1d0>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	d130      	bne.n	8001890 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	2200      	movs	r2, #0
 8001836:	2180      	movs	r1, #128	; 0x80
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 fed6 	bl	80025ea <I2C_WaitOnFlagUntilTimeout>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e04d      	b.n	80018e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	2bff      	cmp	r3, #255	; 0xff
 8001850:	d90e      	bls.n	8001870 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	22ff      	movs	r2, #255	; 0xff
 8001856:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185c:	b2da      	uxtb	r2, r3
 800185e:	8979      	ldrh	r1, [r7, #10]
 8001860:	2300      	movs	r3, #0
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f001 f867 	bl	800293c <I2C_TransferConfig>
 800186e:	e00f      	b.n	8001890 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800187e:	b2da      	uxtb	r2, r3
 8001880:	8979      	ldrh	r1, [r7, #10]
 8001882:	2300      	movs	r3, #0
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f001 f856 	bl	800293c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d19a      	bne.n	80017d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800189a:	697a      	ldr	r2, [r7, #20]
 800189c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 ff23 	bl	80026ea <I2C_WaitOnSTOPFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e01a      	b.n	80018e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2220      	movs	r2, #32
 80018b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6859      	ldr	r1, [r3, #4]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_I2C_Mem_Read+0x230>)
 80018c2:	400b      	ands	r3, r1
 80018c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2220      	movs	r2, #32
 80018ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	e000      	b.n	80018e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
  }
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	80002400 	.word	0x80002400
 80018f0:	fe00e800 	.word	0xfe00e800

080018f4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	460b      	mov	r3, r1
 8001902:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b20      	cmp	r3, #32
 8001912:	f040 80f1 	bne.w	8001af8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001924:	d101      	bne.n	800192a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001926:	2302      	movs	r3, #2
 8001928:	e0e7      	b.n	8001afa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001930:	2b01      	cmp	r3, #1
 8001932:	d101      	bne.n	8001938 <HAL_I2C_IsDeviceReady+0x44>
 8001934:	2302      	movs	r3, #2
 8001936:	e0e0      	b.n	8001afa <HAL_I2C_IsDeviceReady+0x206>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2224      	movs	r2, #36	; 0x24
 8001944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_I2C_IsDeviceReady+0x72>
 8001956:	897b      	ldrh	r3, [r7, #10]
 8001958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800195c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001960:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001964:	e004      	b.n	8001970 <HAL_I2C_IsDeviceReady+0x7c>
 8001966:	897b      	ldrh	r3, [r7, #10]
 8001968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800196c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001976:	f7ff fa53 	bl	8000e20 <HAL_GetTick>
 800197a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	2b20      	cmp	r3, #32
 8001988:	bf0c      	ite	eq
 800198a:	2301      	moveq	r3, #1
 800198c:	2300      	movne	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b10      	cmp	r3, #16
 800199e:	bf0c      	ite	eq
 80019a0:	2301      	moveq	r3, #1
 80019a2:	2300      	movne	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80019a8:	e034      	b.n	8001a14 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d01a      	beq.n	80019e8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80019b2:	f7ff fa35 	bl	8000e20 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	683a      	ldr	r2, [r7, #0]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d302      	bcc.n	80019c8 <HAL_I2C_IsDeviceReady+0xd4>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10f      	bne.n	80019e8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2220      	movs	r2, #32
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d4:	f043 0220 	orr.w	r2, r3, #32
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e088      	b.n	8001afa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	2b20      	cmp	r3, #32
 80019f4:	bf0c      	ite	eq
 80019f6:	2301      	moveq	r3, #1
 80019f8:	2300      	movne	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	2b10      	cmp	r3, #16
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <HAL_I2C_IsDeviceReady+0x12c>
 8001a1a:	7fbb      	ldrb	r3, [r7, #30]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0c4      	beq.n	80019aa <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0310 	and.w	r3, r3, #16
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	d01a      	beq.n	8001a64 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	2120      	movs	r1, #32
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fdd6 	bl	80025ea <I2C_WaitOnFlagUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e058      	b.n	8001afa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e04a      	b.n	8001afa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2120      	movs	r1, #32
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 fdbb 	bl	80025ea <I2C_WaitOnFlagUntilTimeout>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e03d      	b.n	8001afa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2210      	movs	r2, #16
 8001a84:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d118      	bne.n	8001ac8 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aa4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2200      	movs	r2, #0
 8001aae:	2120      	movs	r1, #32
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fd9a 	bl	80025ea <I2C_WaitOnFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e01c      	b.n	8001afa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	3301      	adds	r3, #1
 8001acc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	f63f af3b 	bhi.w	800194e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d005      	beq.n	8001b2e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	68f9      	ldr	r1, [r7, #12]
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
  }
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00f      	beq.n	8001b78 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00a      	beq.n	8001b78 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00f      	beq.n	8001ba2 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f043 0208 	orr.w	r2, r3, #8
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ba0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00f      	beq.n	8001bcc <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00a      	beq.n	8001bcc <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0202 	orr.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bca:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 030b 	and.w	r3, r3, #11
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8001bdc:	68f9      	ldr	r1, [r7, #12]
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fbca 	bl	8002378 <I2C_ITError>
  }
}
 8001be4:	bf00      	nop
 8001be6:	3718      	adds	r7, #24
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	70fb      	strb	r3, [r7, #3]
 8001c20:	4613      	mov	r3, r2
 8001c22:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <I2C_Slave_ISR_IT+0x24>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e0e1      	b.n	8001e54 <I2C_Slave_ISR_IT+0x1e8>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	f003 0320 	and.w	r3, r3, #32
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d008      	beq.n	8001cb4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001cac:	6939      	ldr	r1, [r7, #16]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f000 fa08 	bl	80020c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04b      	beq.n	8001d56 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d046      	beq.n	8001d56 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d128      	bne.n	8001d24 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b28      	cmp	r3, #40	; 0x28
 8001cdc:	d108      	bne.n	8001cf0 <I2C_Slave_ISR_IT+0x84>
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce4:	d104      	bne.n	8001cf0 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001ce6:	6939      	ldr	r1, [r7, #16]
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 faf1 	bl	80022d0 <I2C_ITListenCplt>
 8001cee:	e031      	b.n	8001d54 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b29      	cmp	r3, #41	; 0x29
 8001cfa:	d10e      	bne.n	8001d1a <I2C_Slave_ISR_IT+0xae>
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d02:	d00a      	beq.n	8001d1a <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2210      	movs	r2, #16
 8001d0a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 fc2a 	bl	8002566 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f000 f97a 	bl	800200c <I2C_ITSlaveSeqCplt>
 8001d18:	e01c      	b.n	8001d54 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2210      	movs	r2, #16
 8001d20:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001d22:	e08f      	b.n	8001e44 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	f043 0204 	orr.w	r2, r3, #4
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <I2C_Slave_ISR_IT+0xda>
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d44:	d17e      	bne.n	8001e44 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f000 fb13 	bl	8002378 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001d52:	e077      	b.n	8001e44 <I2C_Slave_ISR_IT+0x1d8>
 8001d54:	e076      	b.n	8001e44 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d02f      	beq.n	8001dc0 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d02a      	beq.n	8001dc0 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d018      	beq.n	8001da6 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d90:	3b01      	subs	r3, #1
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d14b      	bne.n	8001e48 <I2C_Slave_ISR_IT+0x1dc>
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001db6:	d047      	beq.n	8001e48 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f927 	bl	800200c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001dbe:	e043      	b.n	8001e48 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001dd4:	6939      	ldr	r1, [r7, #16]
 8001dd6:	68f8      	ldr	r0, [r7, #12]
 8001dd8:	f000 f894 	bl	8001f04 <I2C_ITAddrCplt>
 8001ddc:	e035      	b.n	8001e4a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d030      	beq.n	8001e4a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d02b      	beq.n	8001e4a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d018      	beq.n	8001e2e <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
 8001e2c:	e00d      	b.n	8001e4a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e34:	d002      	beq.n	8001e3c <I2C_Slave_ISR_IT+0x1d0>
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d106      	bne.n	8001e4a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f8e5 	bl	800200c <I2C_ITSlaveSeqCplt>
 8001e42:	e002      	b.n	8001e4a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8001e44:	bf00      	nop
 8001e46:	e000      	b.n	8001e4a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8001e48:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af02      	add	r7, sp, #8
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	4608      	mov	r0, r1
 8001e66:	4611      	mov	r1, r2
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	817b      	strh	r3, [r7, #10]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	813b      	strh	r3, [r7, #8]
 8001e72:	4613      	mov	r3, r2
 8001e74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	8979      	ldrh	r1, [r7, #10]
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <I2C_RequestMemoryRead+0xa4>)
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2300      	movs	r3, #0
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 fd5a 	bl	800293c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e88:	69fa      	ldr	r2, [r7, #28]
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 fbec 	bl	800266a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e02c      	b.n	8001ef6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea2:	893b      	ldrh	r3, [r7, #8]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8001eac:	e015      	b.n	8001eda <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eae:	893b      	ldrh	r3, [r7, #8]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	69b9      	ldr	r1, [r7, #24]
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f000 fbd2 	bl	800266a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e012      	b.n	8001ef6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed0:	893b      	ldrh	r3, [r7, #8]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2140      	movs	r1, #64	; 0x40
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f000 fb80 	bl	80025ea <I2C_WaitOnFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	80002000 	.word	0x80002000

08001f04 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f1a:	2b28      	cmp	r3, #40	; 0x28
 8001f1c:	d16a      	bne.n	8001ff4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	0c1b      	lsrs	r3, r3, #16
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001f3c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f4a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001f58:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d138      	bne.n	8001fd4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001f62:	897b      	ldrh	r3, [r7, #10]
 8001f64:	09db      	lsrs	r3, r3, #7
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	89bb      	ldrh	r3, [r7, #12]
 8001f6a:	4053      	eors	r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	f003 0306 	and.w	r3, r3, #6
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d11c      	bne.n	8001fb0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001f76:	897b      	ldrh	r3, [r7, #10]
 8001f78:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d13b      	bne.n	8002004 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2208      	movs	r2, #8
 8001f98:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fa2:	89ba      	ldrh	r2, [r7, #12]
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff fe33 	bl	8001c14 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001fae:	e029      	b.n	8002004 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001fb0:	893b      	ldrh	r3, [r7, #8]
 8001fb2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001fb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 fcf1 	bl	80029a0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fc6:	89ba      	ldrh	r2, [r7, #12]
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fe21 	bl	8001c14 <HAL_I2C_AddrCallback>
}
 8001fd2:	e017      	b.n	8002004 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 fce1 	bl	80029a0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001fe6:	89ba      	ldrh	r2, [r7, #12]
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	4619      	mov	r1, r3
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff fe11 	bl	8001c14 <HAL_I2C_AddrCallback>
}
 8001ff2:	e007      	b.n	8002004 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e00c      	b.n	800205a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d007      	beq.n	800205a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002058:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b29      	cmp	r3, #41	; 0x29
 8002064:	d112      	bne.n	800208c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2228      	movs	r2, #40	; 0x28
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2221      	movs	r2, #33	; 0x21
 8002072:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002074:	2101      	movs	r1, #1
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 fc92 	bl	80029a0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff fdb1 	bl	8001bec <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800208a:	e017      	b.n	80020bc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b2a      	cmp	r3, #42	; 0x2a
 8002096:	d111      	bne.n	80020bc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2228      	movs	r2, #40	; 0x28
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2222      	movs	r2, #34	; 0x22
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020a6:	2102      	movs	r1, #2
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fc79 	bl	80029a0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fda2 	bl	8001c00 <HAL_I2C_SlaveRxCpltCallback>
}
 80020bc:	bf00      	nop
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020e0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2220      	movs	r2, #32
 80020e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b21      	cmp	r3, #33	; 0x21
 80020ee:	d002      	beq.n	80020f6 <I2C_ITSlaveCplt+0x32>
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	2b29      	cmp	r3, #41	; 0x29
 80020f4:	d108      	bne.n	8002108 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80020f6:	f248 0101 	movw	r1, #32769	; 0x8001
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fc50 	bl	80029a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2221      	movs	r2, #33	; 0x21
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
 8002106:	e00d      	b.n	8002124 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002108:	7bfb      	ldrb	r3, [r7, #15]
 800210a:	2b22      	cmp	r3, #34	; 0x22
 800210c:	d002      	beq.n	8002114 <I2C_ITSlaveCplt+0x50>
 800210e:	7bfb      	ldrb	r3, [r7, #15]
 8002110:	2b2a      	cmp	r3, #42	; 0x2a
 8002112:	d107      	bne.n	8002124 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002114:	f248 0102 	movw	r1, #32770	; 0x8002
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fc41 	bl	80029a0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2222      	movs	r2, #34	; 0x22
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002132:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	4b62      	ldr	r3, [pc, #392]	; (80022c8 <I2C_ITSlaveCplt+0x204>)
 8002140:	400b      	ands	r3, r1
 8002142:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fa0e 	bl	8002566 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d013      	beq.n	800217c <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002162:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01f      	beq.n	80021ac <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	b29a      	uxth	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	855a      	strh	r2, [r3, #42]	; 0x2a
 800217a:	e017      	b.n	80021ac <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d012      	beq.n	80021ac <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002194:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d020      	beq.n	80021f8 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00c      	beq.n	80021f8 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	3b01      	subs	r3, #1
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f043 0204 	orr.w	r2, r3, #4
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002220:	2b00      	cmp	r3, #0
 8002222:	d010      	beq.n	8002246 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	4619      	mov	r1, r3
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f8a4 	bl	8002378 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b28      	cmp	r3, #40	; 0x28
 800223a:	d141      	bne.n	80022c0 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800223c:	6979      	ldr	r1, [r7, #20]
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f846 	bl	80022d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002244:	e03c      	b.n	80022c0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800224e:	d014      	beq.n	800227a <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fedb 	bl	800200c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <I2C_ITSlaveCplt+0x208>)
 800225a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2220      	movs	r2, #32
 8002260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2200      	movs	r2, #0
 8002268:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fcdc 	bl	8001c30 <HAL_I2C_ListenCpltCallback>
}
 8002278:	e022      	b.n	80022c0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b22      	cmp	r3, #34	; 0x22
 8002284:	d10e      	bne.n	80022a4 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fcaf 	bl	8001c00 <HAL_I2C_SlaveRxCpltCallback>
}
 80022a2:	e00d      	b.n	80022c0 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2220      	movs	r2, #32
 80022a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fc96 	bl	8001bec <HAL_I2C_SlaveTxCpltCallback>
}
 80022c0:	bf00      	nop
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	fe00e800 	.word	0xfe00e800
 80022cc:	ffff0000 	.word	0xffff0000

080022d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a25      	ldr	r2, [pc, #148]	; (8002374 <I2C_ITListenCplt+0xa4>)
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d022      	beq.n	800234c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002322:	2b00      	cmp	r3, #0
 8002324:	d012      	beq.n	800234c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002344:	f043 0204 	orr.w	r2, r3, #4
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800234c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 fb25 	bl	80029a0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2210      	movs	r2, #16
 800235c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fc62 	bl	8001c30 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	ffff0000 	.word	0xffff0000

08002378 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a5d      	ldr	r2, [pc, #372]	; (800250c <I2C_ITError+0x194>)
 8002396:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	2b28      	cmp	r3, #40	; 0x28
 80023ae:	d005      	beq.n	80023bc <I2C_ITError+0x44>
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b29      	cmp	r3, #41	; 0x29
 80023b4:	d002      	beq.n	80023bc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b2a      	cmp	r3, #42	; 0x2a
 80023ba:	d10b      	bne.n	80023d4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023bc:	2103      	movs	r1, #3
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 faee 	bl	80029a0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2228      	movs	r2, #40	; 0x28
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a50      	ldr	r2, [pc, #320]	; (8002510 <I2C_ITError+0x198>)
 80023d0:	635a      	str	r2, [r3, #52]	; 0x34
 80023d2:	e011      	b.n	80023f8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80023d4:	f248 0103 	movw	r1, #32771	; 0x8003
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fae1 	bl	80029a0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b60      	cmp	r3, #96	; 0x60
 80023e8:	d003      	beq.n	80023f2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	2b00      	cmp	r3, #0
 8002404:	d039      	beq.n	800247a <I2C_ITError+0x102>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	2b11      	cmp	r3, #17
 800240a:	d002      	beq.n	8002412 <I2C_ITError+0x9a>
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b21      	cmp	r3, #33	; 0x21
 8002410:	d133      	bne.n	800247a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002420:	d107      	bne.n	8002432 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002430:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe feef 	bl	800121a <HAL_DMA_GetState>
 800243c:	4603      	mov	r3, r0
 800243e:	2b01      	cmp	r3, #1
 8002440:	d017      	beq.n	8002472 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002446:	4a33      	ldr	r2, [pc, #204]	; (8002514 <I2C_ITError+0x19c>)
 8002448:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fe78 	bl	800114c <HAL_DMA_Abort_IT>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d04d      	beq.n	80024fe <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800246c:	4610      	mov	r0, r2
 800246e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002470:	e045      	b.n	80024fe <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f850 	bl	8002518 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002478:	e041      	b.n	80024fe <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800247e:	2b00      	cmp	r3, #0
 8002480:	d039      	beq.n	80024f6 <I2C_ITError+0x17e>
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b12      	cmp	r3, #18
 8002486:	d002      	beq.n	800248e <I2C_ITError+0x116>
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2b22      	cmp	r3, #34	; 0x22
 800248c:	d133      	bne.n	80024f6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249c:	d107      	bne.n	80024ae <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe feb1 	bl	800121a <HAL_DMA_GetState>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d017      	beq.n	80024ee <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	4a14      	ldr	r2, [pc, #80]	; (8002514 <I2C_ITError+0x19c>)
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe fe3a 	bl	800114c <HAL_DMA_Abort_IT>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d011      	beq.n	8002502 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024e8:	4610      	mov	r0, r2
 80024ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024ec:	e009      	b.n	8002502 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f812 	bl	8002518 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80024f4:	e005      	b.n	8002502 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f80e 	bl	8002518 <I2C_TreatErrorCallback>
  }
}
 80024fc:	e002      	b.n	8002504 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80024fe:	bf00      	nop
 8002500:	e000      	b.n	8002504 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002502:	bf00      	nop
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	ffff0000 	.word	0xffff0000
 8002510:	08001c6d 	.word	0x08001c6d
 8002514:	080025af 	.word	0x080025af

08002518 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b60      	cmp	r3, #96	; 0x60
 800252a:	d10e      	bne.n	800254a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff fb88 	bl	8001c58 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002548:	e009      	b.n	800255e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fb73 	bl	8001c44 <HAL_I2C_ErrorCallback>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b02      	cmp	r3, #2
 800257a:	d103      	bne.n	8002584 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2200      	movs	r2, #0
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d007      	beq.n	80025a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699a      	ldr	r2, [r3, #24]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0201 	orr.w	r2, r2, #1
 80025a0:	619a      	str	r2, [r3, #24]
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b084      	sub	sp, #16
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c8:	2200      	movs	r2, #0
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d8:	2200      	movs	r2, #0
 80025da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff ff9b 	bl	8002518 <I2C_TreatErrorCallback>
}
 80025e2:	bf00      	nop
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	603b      	str	r3, [r7, #0]
 80025f6:	4613      	mov	r3, r2
 80025f8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025fa:	e022      	b.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002602:	d01e      	beq.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002604:	f7fe fc0c 	bl	8000e20 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	429a      	cmp	r2, r3
 8002612:	d302      	bcc.n	800261a <I2C_WaitOnFlagUntilTimeout+0x30>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d113      	bne.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f043 0220 	orr.w	r2, r3, #32
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00f      	b.n	8002662 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	699a      	ldr	r2, [r3, #24]
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	4013      	ands	r3, r2
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	429a      	cmp	r2, r3
 8002650:	bf0c      	ite	eq
 8002652:	2301      	moveq	r3, #1
 8002654:	2300      	movne	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	461a      	mov	r2, r3
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	429a      	cmp	r2, r3
 800265e:	d0cd      	beq.n	80025fc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	60f8      	str	r0, [r7, #12]
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002676:	e02c      	b.n	80026d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	68b9      	ldr	r1, [r7, #8]
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f871 	bl	8002764 <I2C_IsErrorOccurred>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e02a      	b.n	80026e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002692:	d01e      	beq.n	80026d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002694:	f7fe fbc4 	bl	8000e20 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d302      	bcc.n	80026aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d113      	bne.n	80026d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e007      	b.n	80026e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d1cb      	bne.n	8002678 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b084      	sub	sp, #16
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026f6:	e028      	b.n	800274a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f831 	bl	8002764 <I2C_IsErrorOccurred>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e026      	b.n	800275a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7fe fb88 	bl	8000e20 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d113      	bne.n	800274a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f043 0220 	orr.w	r2, r3, #32
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e007      	b.n	800275a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b20      	cmp	r3, #32
 8002756:	d1cf      	bne.n	80026f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	; 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d075      	beq.n	800287c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2210      	movs	r2, #16
 8002796:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002798:	e056      	b.n	8002848 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d052      	beq.n	8002848 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7fe fb3d 	bl	8000e20 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <I2C_IsErrorOccurred+0x54>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d147      	bne.n	8002848 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80027ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	699b      	ldr	r3, [r3, #24]
 80027d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027da:	d12e      	bne.n	800283a <I2C_IsErrorOccurred+0xd6>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027e2:	d02a      	beq.n	800283a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d027      	beq.n	800283a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80027fa:	f7fe fb11 	bl	8000e20 <HAL_GetTick>
 80027fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002800:	e01b      	b.n	800283a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002802:	f7fe fb0d 	bl	8000e20 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b19      	cmp	r3, #25
 800280e:	d914      	bls.n	800283a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002814:	f043 0220 	orr.w	r2, r3, #32
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0320 	and.w	r3, r3, #32
 8002844:	2b20      	cmp	r3, #32
 8002846:	d1dc      	bne.n	8002802 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f003 0320 	and.w	r3, r3, #32
 8002852:	2b20      	cmp	r3, #32
 8002854:	d003      	beq.n	800285e <I2C_IsErrorOccurred+0xfa>
 8002856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800285a:	2b00      	cmp	r3, #0
 800285c:	d09d      	beq.n	800279a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800285e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002862:	2b00      	cmp	r3, #0
 8002864:	d103      	bne.n	800286e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2220      	movs	r2, #32
 800286c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f043 0304 	orr.w	r3, r3, #4
 8002874:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00b      	beq.n	80028c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00b      	beq.n	80028ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80028ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01c      	beq.n	800292c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f7ff fe37 	bl	8002566 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6859      	ldr	r1, [r3, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b0d      	ldr	r3, [pc, #52]	; (8002938 <I2C_IsErrorOccurred+0x1d4>)
 8002904:	400b      	ands	r3, r1
 8002906:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800292c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002930:	4618      	mov	r0, r3
 8002932:	3728      	adds	r7, #40	; 0x28
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	fe00e800 	.word	0xfe00e800

0800293c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	460b      	mov	r3, r1
 8002948:	817b      	strh	r3, [r7, #10]
 800294a:	4613      	mov	r3, r2
 800294c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800294e:	897b      	ldrh	r3, [r7, #10]
 8002950:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002954:	7a7b      	ldrb	r3, [r7, #9]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800295c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	4313      	orrs	r3, r2
 8002966:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800296a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	0d5b      	lsrs	r3, r3, #21
 8002976:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800297a:	4b08      	ldr	r3, [pc, #32]	; (800299c <I2C_TransferConfig+0x60>)
 800297c:	430b      	orrs	r3, r1
 800297e:	43db      	mvns	r3, r3
 8002980:	ea02 0103 	and.w	r1, r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	03ff63ff 	.word	0x03ff63ff

080029a0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029b0:	887b      	ldrh	r3, [r7, #2]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00f      	beq.n	80029da <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80029c0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029ce:	2b28      	cmp	r3, #40	; 0x28
 80029d0:	d003      	beq.n	80029da <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80029d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00f      	beq.n	8002a04 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80029ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029f8:	2b28      	cmp	r3, #40	; 0x28
 80029fa:	d003      	beq.n	8002a04 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002a02:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da03      	bge.n	8002a14 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002a12:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a14:	887b      	ldrh	r3, [r7, #2]
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d103      	bne.n	8002a22 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002a20:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a22:	887b      	ldrh	r3, [r7, #2]
 8002a24:	2b20      	cmp	r3, #32
 8002a26:	d103      	bne.n	8002a30 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f043 0320 	orr.w	r3, r3, #32
 8002a2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a30:	887b      	ldrh	r3, [r7, #2]
 8002a32:	2b40      	cmp	r3, #64	; 0x40
 8002a34:	d103      	bne.n	8002a3e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6819      	ldr	r1, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43da      	mvns	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d138      	bne.n	8002ae4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	e032      	b.n	8002ae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2224      	movs	r2, #36	; 0x24
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0201 	bic.w	r2, r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002aae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6819      	ldr	r1, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f042 0201 	orr.w	r2, r2, #1
 8002ace:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	e000      	b.n	8002ae6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ae4:	2302      	movs	r3, #2
  }
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d139      	bne.n	8002b7c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e033      	b.n	8002b7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2224      	movs	r2, #36	; 0x24
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0201 	bic.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b44:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	021b      	lsls	r3, r3, #8
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
	...

08002b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d141      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b9a:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ba6:	d131      	bne.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba8:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bae:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bb8:	4b43      	ldr	r3, [pc, #268]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bc0:	4a41      	ldr	r2, [pc, #260]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bc8:	4b40      	ldr	r3, [pc, #256]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2232      	movs	r2, #50	; 0x32
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	4a3f      	ldr	r2, [pc, #252]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	0c9b      	lsrs	r3, r3, #18
 8002bda:	3301      	adds	r3, #1
 8002bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bde:	e002      	b.n	8002be6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002be6:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bf2:	d102      	bne.n	8002bfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1f2      	bne.n	8002be0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002bfa:	4b33      	ldr	r3, [pc, #204]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c06:	d158      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e057      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c12:	4a2d      	ldr	r2, [pc, #180]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c1c:	e04d      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c24:	d141      	bne.n	8002caa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c26:	4b28      	ldr	r3, [pc, #160]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c32:	d131      	bne.n	8002c98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c34:	4b24      	ldr	r3, [pc, #144]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3a:	4a23      	ldr	r2, [pc, #140]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c44:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2232      	movs	r2, #50	; 0x32
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	4a1c      	ldr	r2, [pc, #112]	; (8002cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c60:	fba2 2303 	umull	r2, r3, r2, r3
 8002c64:	0c9b      	lsrs	r3, r3, #18
 8002c66:	3301      	adds	r3, #1
 8002c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c6a:	e002      	b.n	8002c72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7e:	d102      	bne.n	8002c86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f2      	bne.n	8002c6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c92:	d112      	bne.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e011      	b.n	8002cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ca8:	e007      	b.n	8002cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002caa:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cb2:	4a05      	ldr	r2, [pc, #20]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	431bde83 	.word	0x431bde83

08002cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e306      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d075      	beq.n	8002dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf2:	4b97      	ldr	r3, [pc, #604]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cfc:	4b94      	ldr	r3, [pc, #592]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	d102      	bne.n	8002d12 <HAL_RCC_OscConfig+0x3e>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_OscConfig+0x44>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d10b      	bne.n	8002d30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d18:	4b8d      	ldr	r3, [pc, #564]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d05b      	beq.n	8002ddc <HAL_RCC_OscConfig+0x108>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d157      	bne.n	8002ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e2e1      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d38:	d106      	bne.n	8002d48 <HAL_RCC_OscConfig+0x74>
 8002d3a:	4b85      	ldr	r3, [pc, #532]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a84      	ldr	r2, [pc, #528]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e01d      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x98>
 8002d52:	4b7f      	ldr	r3, [pc, #508]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a7e      	ldr	r2, [pc, #504]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b7c      	ldr	r3, [pc, #496]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a7b      	ldr	r2, [pc, #492]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0xb0>
 8002d6c:	4b78      	ldr	r3, [pc, #480]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a77      	ldr	r2, [pc, #476]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b75      	ldr	r3, [pc, #468]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a74      	ldr	r2, [pc, #464]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f848 	bl	8000e20 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe f844 	bl	8000e20 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e2a6      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002da6:	4b6a      	ldr	r3, [pc, #424]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0xc0>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7fe f834 	bl	8000e20 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fe f830 	bl	8000e20 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e292      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dce:	4b60      	ldr	r3, [pc, #384]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0xe8>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d075      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dea:	4b59      	ldr	r3, [pc, #356]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df4:	4b56      	ldr	r3, [pc, #344]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0x136>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d002      	beq.n	8002e10 <HAL_RCC_OscConfig+0x13c>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d11f      	bne.n	8002e50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e10:	4b4f      	ldr	r3, [pc, #316]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d005      	beq.n	8002e28 <HAL_RCC_OscConfig+0x154>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e265      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	4946      	ldr	r1, [pc, #280]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e3c:	4b45      	ldr	r3, [pc, #276]	; (8002f54 <HAL_RCC_OscConfig+0x280>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd ffa1 	bl	8000d88 <HAL_InitTick>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d043      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e251      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d023      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e58:	4b3d      	ldr	r3, [pc, #244]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a3c      	ldr	r2, [pc, #240]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fd ffdc 	bl	8000e20 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fd ffd8 	bl	8000e20 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e23a      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	492d      	ldr	r1, [pc, #180]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	604b      	str	r3, [r1, #4]
 8002e9e:	e01a      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea0:	4b2b      	ldr	r3, [pc, #172]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a2a      	ldr	r2, [pc, #168]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fd ffb8 	bl	8000e20 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7fd ffb4 	bl	8000e20 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e216      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ec6:	4b22      	ldr	r3, [pc, #136]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1e0>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d041      	beq.n	8002f66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d01c      	beq.n	8002f24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eea:	4b19      	ldr	r3, [pc, #100]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ef0:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efa:	f7fd ff91 	bl	8000e20 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f02:	f7fd ff8d 	bl	8000e20 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e1ef      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f14:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0ef      	beq.n	8002f02 <HAL_RCC_OscConfig+0x22e>
 8002f22:	e020      	b.n	8002f66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	4a09      	ldr	r2, [pc, #36]	; (8002f50 <HAL_RCC_OscConfig+0x27c>)
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f34:	f7fd ff74 	bl	8000e20 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f3a:	e00d      	b.n	8002f58 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f3c:	f7fd ff70 	bl	8000e20 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d906      	bls.n	8002f58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e1d2      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
 8002f54:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f58:	4b8c      	ldr	r3, [pc, #560]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8002f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1ea      	bne.n	8002f3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 80a6 	beq.w	80030c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f74:	2300      	movs	r3, #0
 8002f76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f78:	4b84      	ldr	r3, [pc, #528]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8002f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2b4>
 8002f84:	2301      	movs	r3, #1
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x2b6>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00d      	beq.n	8002faa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f8e:	4b7f      	ldr	r3, [pc, #508]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f92:	4a7e      	ldr	r2, [pc, #504]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8002f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f98:	6593      	str	r3, [r2, #88]	; 0x58
 8002f9a:	4b7c      	ldr	r3, [pc, #496]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002faa:	4b79      	ldr	r3, [pc, #484]	; (8003190 <HAL_RCC_OscConfig+0x4bc>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d118      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb6:	4b76      	ldr	r3, [pc, #472]	; (8003190 <HAL_RCC_OscConfig+0x4bc>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a75      	ldr	r2, [pc, #468]	; (8003190 <HAL_RCC_OscConfig+0x4bc>)
 8002fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fc2:	f7fd ff2d 	bl	8000e20 <HAL_GetTick>
 8002fc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc8:	e008      	b.n	8002fdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fca:	f7fd ff29 	bl	8000e20 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	1ad3      	subs	r3, r2, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d901      	bls.n	8002fdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	e18b      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	; (8003190 <HAL_RCC_OscConfig+0x4bc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0f0      	beq.n	8002fca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d108      	bne.n	8003002 <HAL_RCC_OscConfig+0x32e>
 8002ff0:	4b66      	ldr	r3, [pc, #408]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	4a65      	ldr	r2, [pc, #404]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003000:	e024      	b.n	800304c <HAL_RCC_OscConfig+0x378>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b05      	cmp	r3, #5
 8003008:	d110      	bne.n	800302c <HAL_RCC_OscConfig+0x358>
 800300a:	4b60      	ldr	r3, [pc, #384]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	4a5e      	ldr	r2, [pc, #376]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003012:	f043 0304 	orr.w	r3, r3, #4
 8003016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800301a:	4b5c      	ldr	r3, [pc, #368]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	4a5a      	ldr	r2, [pc, #360]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800302a:	e00f      	b.n	800304c <HAL_RCC_OscConfig+0x378>
 800302c:	4b57      	ldr	r3, [pc, #348]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 800302e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003032:	4a56      	ldr	r2, [pc, #344]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800303c:	4b53      	ldr	r3, [pc, #332]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	4a52      	ldr	r2, [pc, #328]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003044:	f023 0304 	bic.w	r3, r3, #4
 8003048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d016      	beq.n	8003082 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fd fee4 	bl	8000e20 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305c:	f7fd fee0 	bl	8000e20 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	f241 3288 	movw	r2, #5000	; 0x1388
 800306a:	4293      	cmp	r3, r2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e140      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003072:	4b46      	ldr	r3, [pc, #280]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0ed      	beq.n	800305c <HAL_RCC_OscConfig+0x388>
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7fd fecd 	bl	8000e20 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003088:	e00a      	b.n	80030a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308a:	f7fd fec9 	bl	8000e20 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f241 3288 	movw	r2, #5000	; 0x1388
 8003098:	4293      	cmp	r3, r2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e129      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030a0:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ed      	bne.n	800308a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030ae:	7ffb      	ldrb	r3, [r7, #31]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	4a34      	ldr	r2, [pc, #208]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d03c      	beq.n	8003146 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d01c      	beq.n	800310e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 80030d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030da:	4a2c      	ldr	r2, [pc, #176]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fd fe9c 	bl	8000e20 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ec:	f7fd fe98 	bl	8000e20 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e0fa      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030fe:	4b23      	ldr	r3, [pc, #140]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d0ef      	beq.n	80030ec <HAL_RCC_OscConfig+0x418>
 800310c:	e01b      	b.n	8003146 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800310e:	4b1f      	ldr	r3, [pc, #124]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003110:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003114:	4a1d      	ldr	r2, [pc, #116]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003116:	f023 0301 	bic.w	r3, r3, #1
 800311a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311e:	f7fd fe7f 	bl	8000e20 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003126:	f7fd fe7b 	bl	8000e20 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e0dd      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003138:	4b14      	ldr	r3, [pc, #80]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 800313a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ef      	bne.n	8003126 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80d1 	beq.w	80032f2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003150:	4b0e      	ldr	r3, [pc, #56]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b0c      	cmp	r3, #12
 800315a:	f000 808b 	beq.w	8003274 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d15e      	bne.n	8003224 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a08      	ldr	r2, [pc, #32]	; (800318c <HAL_RCC_OscConfig+0x4b8>)
 800316c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003170:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003172:	f7fd fe55 	bl	8000e20 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003178:	e00c      	b.n	8003194 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800317a:	f7fd fe51 	bl	8000e20 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d905      	bls.n	8003194 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0b3      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
 800318c:	40021000 	.word	0x40021000
 8003190:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003194:	4b59      	ldr	r3, [pc, #356]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ec      	bne.n	800317a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a0:	4b56      	ldr	r3, [pc, #344]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	4b56      	ldr	r3, [pc, #344]	; (8003300 <HAL_RCC_OscConfig+0x62c>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6a11      	ldr	r1, [r2, #32]
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031b0:	3a01      	subs	r2, #1
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	4311      	orrs	r1, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80031ba:	0212      	lsls	r2, r2, #8
 80031bc:	4311      	orrs	r1, r2
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031c2:	0852      	lsrs	r2, r2, #1
 80031c4:	3a01      	subs	r2, #1
 80031c6:	0552      	lsls	r2, r2, #21
 80031c8:	4311      	orrs	r1, r2
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031ce:	0852      	lsrs	r2, r2, #1
 80031d0:	3a01      	subs	r2, #1
 80031d2:	0652      	lsls	r2, r2, #25
 80031d4:	4311      	orrs	r1, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031da:	06d2      	lsls	r2, r2, #27
 80031dc:	430a      	orrs	r2, r1
 80031de:	4947      	ldr	r1, [pc, #284]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e4:	4b45      	ldr	r3, [pc, #276]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a44      	ldr	r2, [pc, #272]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 80031ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031f0:	4b42      	ldr	r3, [pc, #264]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	4a41      	ldr	r2, [pc, #260]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fd fe10 	bl	8000e20 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003204:	f7fd fe0c 	bl	8000e20 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e06e      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003216:	4b39      	ldr	r3, [pc, #228]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x530>
 8003222:	e066      	b.n	80032f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003224:	4b35      	ldr	r3, [pc, #212]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a34      	ldr	r2, [pc, #208]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 800322a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003230:	4b32      	ldr	r3, [pc, #200]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a31      	ldr	r2, [pc, #196]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 8003236:	f023 0303 	bic.w	r3, r3, #3
 800323a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800323c:	4b2f      	ldr	r3, [pc, #188]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	4a2e      	ldr	r2, [pc, #184]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 8003242:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324c:	f7fd fde8 	bl	8000e20 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003254:	f7fd fde4 	bl	8000e20 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e046      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003266:	4b25      	ldr	r3, [pc, #148]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x580>
 8003272:	e03e      	b.n	80032f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e039      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003280:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <HAL_RCC_OscConfig+0x628>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f003 0203 	and.w	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a1b      	ldr	r3, [r3, #32]
 8003290:	429a      	cmp	r2, r3
 8003292:	d12c      	bne.n	80032ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	3b01      	subs	r3, #1
 80032a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d123      	bne.n	80032ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d11b      	bne.n	80032ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d113      	bne.n	80032ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	085b      	lsrs	r3, r3, #1
 80032d2:	3b01      	subs	r3, #1
 80032d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d109      	bne.n	80032ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	085b      	lsrs	r3, r3, #1
 80032e6:	3b01      	subs	r3, #1
 80032e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d001      	beq.n	80032f2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	40021000 	.word	0x40021000
 8003300:	019f800c 	.word	0x019f800c

08003304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e11e      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800331c:	4b91      	ldr	r3, [pc, #580]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 030f 	and.w	r3, r3, #15
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	429a      	cmp	r2, r3
 8003328:	d910      	bls.n	800334c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800332a:	4b8e      	ldr	r3, [pc, #568]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 020f 	bic.w	r2, r3, #15
 8003332:	498c      	ldr	r1, [pc, #560]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b8a      	ldr	r3, [pc, #552]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 030f 	and.w	r3, r3, #15
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e106      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d073      	beq.n	8003440 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d129      	bne.n	80033b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003360:	4b81      	ldr	r3, [pc, #516]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0f4      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003370:	f000 f99e 	bl	80036b0 <RCC_GetSysClockFreqFromPLLSource>
 8003374:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4a7c      	ldr	r2, [pc, #496]	; (800356c <HAL_RCC_ClockConfig+0x268>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d93f      	bls.n	80033fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800337e:	4b7a      	ldr	r3, [pc, #488]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003392:	2b00      	cmp	r3, #0
 8003394:	d033      	beq.n	80033fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800339a:	2b00      	cmp	r3, #0
 800339c:	d12f      	bne.n	80033fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800339e:	4b72      	ldr	r3, [pc, #456]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a6:	4a70      	ldr	r2, [pc, #448]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	e024      	b.n	80033fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033bc:	4b6a      	ldr	r3, [pc, #424]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0c6      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033cc:	4b66      	ldr	r3, [pc, #408]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d101      	bne.n	80033dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0be      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033dc:	f000 f8ce 	bl	800357c <HAL_RCC_GetSysClockFreq>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4a61      	ldr	r2, [pc, #388]	; (800356c <HAL_RCC_ClockConfig+0x268>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d909      	bls.n	80033fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033ea:	4b5f      	ldr	r3, [pc, #380]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033f2:	4a5d      	ldr	r2, [pc, #372]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80033f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b5a      	ldr	r3, [pc, #360]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4957      	ldr	r1, [pc, #348]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003410:	f7fd fd06 	bl	8000e20 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fd fd02 	bl	8000e20 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e095      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d023      	beq.n	8003494 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003458:	4b43      	ldr	r3, [pc, #268]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	4a42      	ldr	r2, [pc, #264]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800345e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003462:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003470:	4b3d      	ldr	r3, [pc, #244]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003478:	4a3b      	ldr	r2, [pc, #236]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800347a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800347e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b39      	ldr	r3, [pc, #228]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	4936      	ldr	r1, [pc, #216]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
 8003492:	e008      	b.n	80034a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b80      	cmp	r3, #128	; 0x80
 8003498:	d105      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800349a:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4a32      	ldr	r2, [pc, #200]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80034a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034a6:	4b2f      	ldr	r3, [pc, #188]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d21d      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 020f 	bic.w	r2, r3, #15
 80034bc:	4929      	ldr	r1, [pc, #164]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034c4:	f7fd fcac 	bl	8000e20 <HAL_GetTick>
 80034c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	e00a      	b.n	80034e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034cc:	f7fd fca8 	bl	8000e20 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034da:	4293      	cmp	r3, r2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e03b      	b.n	800355a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e2:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_RCC_ClockConfig+0x260>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d1ed      	bne.n	80034cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4917      	ldr	r1, [pc, #92]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	490f      	ldr	r1, [pc, #60]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800352e:	f000 f825 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <HAL_RCC_ClockConfig+0x264>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490c      	ldr	r1, [pc, #48]	; (8003570 <HAL_RCC_ClockConfig+0x26c>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	fa22 f303 	lsr.w	r3, r2, r3
 800354a:	4a0a      	ldr	r2, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x270>)
 800354c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x274>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7fd fc18 	bl	8000d88 <HAL_InitTick>
 8003558:	4603      	mov	r3, r0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40022000 	.word	0x40022000
 8003568:	40021000 	.word	0x40021000
 800356c:	04c4b400 	.word	0x04c4b400
 8003570:	08005de8 	.word	0x08005de8
 8003574:	20000000 	.word	0x20000000
 8003578:	20000004 	.word	0x20000004

0800357c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003582:	4b2c      	ldr	r3, [pc, #176]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 030c 	and.w	r3, r3, #12
 800358a:	2b04      	cmp	r3, #4
 800358c:	d102      	bne.n	8003594 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800358e:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	e047      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b08      	cmp	r3, #8
 800359e:	d102      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035a0:	4b26      	ldr	r3, [pc, #152]	; (800363c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	e03e      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035a6:	4b23      	ldr	r3, [pc, #140]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
 80035ae:	2b0c      	cmp	r3, #12
 80035b0:	d136      	bne.n	8003620 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	091b      	lsrs	r3, r3, #4
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	3301      	adds	r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d10c      	bne.n	80035ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035d0:	4a1a      	ldr	r2, [pc, #104]	; (800363c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	4a16      	ldr	r2, [pc, #88]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035da:	68d2      	ldr	r2, [r2, #12]
 80035dc:	0a12      	lsrs	r2, r2, #8
 80035de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035e2:	fb02 f303 	mul.w	r3, r2, r3
 80035e6:	617b      	str	r3, [r7, #20]
      break;
 80035e8:	e00c      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	4a10      	ldr	r2, [pc, #64]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	0a12      	lsrs	r2, r2, #8
 80035f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035fc:	fb02 f303 	mul.w	r3, r2, r3
 8003600:	617b      	str	r3, [r7, #20]
      break;
 8003602:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	0e5b      	lsrs	r3, r3, #25
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	3301      	adds	r3, #1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	613b      	str	r3, [r7, #16]
 800361e:	e001      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003624:	693b      	ldr	r3, [r7, #16]
}
 8003626:	4618      	mov	r0, r3
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40021000 	.word	0x40021000
 8003638:	00f42400 	.word	0x00f42400
 800363c:	007a1200 	.word	0x007a1200

08003640 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <HAL_RCC_GetHCLKFreq+0x14>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000000 	.word	0x20000000

08003658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800365c:	f7ff fff0 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4904      	ldr	r1, [pc, #16]	; (8003680 <HAL_RCC_GetPCLK1Freq+0x28>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	f003 031f 	and.w	r3, r3, #31
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40021000 	.word	0x40021000
 8003680:	08005df8 	.word	0x08005df8

08003684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003688:	f7ff ffda 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	0adb      	lsrs	r3, r3, #11
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4904      	ldr	r1, [pc, #16]	; (80036ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	08005df8 	.word	0x08005df8

080036b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036b6:	4b1e      	ldr	r3, [pc, #120]	; (8003730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3301      	adds	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	2b03      	cmp	r3, #3
 80036d2:	d10c      	bne.n	80036ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d4:	4a17      	ldr	r2, [pc, #92]	; (8003734 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036de:	68d2      	ldr	r2, [r2, #12]
 80036e0:	0a12      	lsrs	r2, r2, #8
 80036e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036e6:	fb02 f303 	mul.w	r3, r2, r3
 80036ea:	617b      	str	r3, [r7, #20]
    break;
 80036ec:	e00c      	b.n	8003708 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036f8:	68d2      	ldr	r2, [r2, #12]
 80036fa:	0a12      	lsrs	r2, r2, #8
 80036fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003700:	fb02 f303 	mul.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
    break;
 8003706:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003708:	4b09      	ldr	r3, [pc, #36]	; (8003730 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	0e5b      	lsrs	r3, r3, #25
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003722:	687b      	ldr	r3, [r7, #4]
}
 8003724:	4618      	mov	r0, r3
 8003726:	371c      	adds	r7, #28
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	40021000 	.word	0x40021000
 8003734:	007a1200 	.word	0x007a1200
 8003738:	00f42400 	.word	0x00f42400

0800373c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003744:	2300      	movs	r3, #0
 8003746:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003748:	2300      	movs	r3, #0
 800374a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8098 	beq.w	800388a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b43      	ldr	r3, [pc, #268]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10d      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	4b40      	ldr	r3, [pc, #256]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4a3f      	ldr	r2, [pc, #252]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003774:	6593      	str	r3, [r2, #88]	; 0x58
 8003776:	4b3d      	ldr	r3, [pc, #244]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003782:	2301      	movs	r3, #1
 8003784:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003786:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a39      	ldr	r2, [pc, #228]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003790:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003792:	f7fd fb45 	bl	8000e20 <HAL_GetTick>
 8003796:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003798:	e009      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379a:	f7fd fb41 	bl	8000e20 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d902      	bls.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	74fb      	strb	r3, [r7, #19]
        break;
 80037ac:	e005      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ae:	4b30      	ldr	r3, [pc, #192]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0ef      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d159      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037c0:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d01e      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d019      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037dc:	4b23      	ldr	r3, [pc, #140]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037e8:	4b20      	ldr	r3, [pc, #128]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	4a1f      	ldr	r2, [pc, #124]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037f8:	4b1c      	ldr	r3, [pc, #112]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	4a1b      	ldr	r2, [pc, #108]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003808:	4a18      	ldr	r2, [pc, #96]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d016      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381a:	f7fd fb01 	bl	8000e20 <HAL_GetTick>
 800381e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003820:	e00b      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fafd 	bl	8000e20 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d902      	bls.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	74fb      	strb	r3, [r7, #19]
            break;
 8003838:	e006      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383a:	4b0c      	ldr	r3, [pc, #48]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ec      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10b      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800384e:	4b07      	ldr	r3, [pc, #28]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800385c:	4903      	ldr	r1, [pc, #12]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003864:	e008      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	74bb      	strb	r3, [r7, #18]
 800386a:	e005      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800386c:	40021000 	.word	0x40021000
 8003870:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003874:	7cfb      	ldrb	r3, [r7, #19]
 8003876:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003878:	7c7b      	ldrb	r3, [r7, #17]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d105      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387e:	4ba7      	ldr	r3, [pc, #668]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	4aa6      	ldr	r2, [pc, #664]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003888:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003896:	4ba1      	ldr	r3, [pc, #644]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f023 0203 	bic.w	r2, r3, #3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	499d      	ldr	r1, [pc, #628]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038b8:	4b98      	ldr	r3, [pc, #608]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f023 020c 	bic.w	r2, r3, #12
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	4995      	ldr	r1, [pc, #596]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038da:	4b90      	ldr	r3, [pc, #576]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	498c      	ldr	r1, [pc, #560]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038fc:	4b87      	ldr	r3, [pc, #540]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003902:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	4984      	ldr	r1, [pc, #528]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800391e:	4b7f      	ldr	r3, [pc, #508]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	497b      	ldr	r1, [pc, #492]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003940:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	4973      	ldr	r1, [pc, #460]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003962:	4b6e      	ldr	r3, [pc, #440]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003968:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	496a      	ldr	r1, [pc, #424]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003972:	4313      	orrs	r3, r2
 8003974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003984:	4b65      	ldr	r3, [pc, #404]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	4962      	ldr	r1, [pc, #392]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003994:	4313      	orrs	r3, r2
 8003996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039a6:	4b5d      	ldr	r3, [pc, #372]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	4959      	ldr	r1, [pc, #356]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039c8:	4b54      	ldr	r3, [pc, #336]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039ce:	f023 0203 	bic.w	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	4951      	ldr	r1, [pc, #324]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039ea:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f8:	4948      	ldr	r1, [pc, #288]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d015      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a0c:	4b43      	ldr	r3, [pc, #268]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1a:	4940      	ldr	r1, [pc, #256]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a2a:	d105      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a2c:	4b3b      	ldr	r3, [pc, #236]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	4a3a      	ldr	r2, [pc, #232]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a36:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d015      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a44:	4b35      	ldr	r3, [pc, #212]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a52:	4932      	ldr	r1, [pc, #200]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a62:	d105      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a64:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4a2c      	ldr	r2, [pc, #176]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a6e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a7c:	4b27      	ldr	r3, [pc, #156]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a8a:	4924      	ldr	r1, [pc, #144]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a9a:	d105      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a9c:	4b1f      	ldr	r3, [pc, #124]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	4a1e      	ldr	r2, [pc, #120]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aa6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d015      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ab4:	4b19      	ldr	r3, [pc, #100]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	4916      	ldr	r1, [pc, #88]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ad2:	d105      	bne.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ade:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d019      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003aec:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	4908      	ldr	r1, [pc, #32]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b0a:	d109      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4a02      	ldr	r2, [pc, #8]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b16:	60d3      	str	r3, [r2, #12]
 8003b18:	e002      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b1a:	bf00      	nop
 8003b1c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d015      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b2c:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3a:	4926      	ldr	r1, [pc, #152]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b4c:	4b21      	ldr	r3, [pc, #132]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	4a20      	ldr	r2, [pc, #128]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b56:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d015      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b72:	4918      	ldr	r1, [pc, #96]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b82:	d105      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b84:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a12      	ldr	r2, [pc, #72]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d015      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b9c:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ba2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003baa:	490a      	ldr	r1, [pc, #40]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a04      	ldr	r2, [pc, #16]	; (8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bc6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40021000 	.word	0x40021000

08003bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e042      	b.n	8003c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fd f821 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2224      	movs	r2, #36	; 0x24
 8003c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fc0c 	bl	8004438 <UART_SetConfig>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e022      	b.n	8003c70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fefc 	bl	8004a30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 ff83 	bl	8004b74 <UART_CheckIdleState>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b091      	sub	sp, #68	; 0x44
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	f040 808c 	bne.w	8003daa <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_UART_Transmit_IT+0x26>
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e084      	b.n	8003dac <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Transmit_IT+0x38>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e07d      	b.n	8003dac <HAL_UART_Transmit_IT+0x134>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	88fa      	ldrh	r2, [r7, #6]
 8003cca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2221      	movs	r2, #33	; 0x21
 8003ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ce8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cec:	d12e      	bne.n	8003d4c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf6:	d107      	bne.n	8003d08 <HAL_UART_Transmit_IT+0x90>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d103      	bne.n	8003d08 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	4a2d      	ldr	r2, [pc, #180]	; (8003db8 <HAL_UART_Transmit_IT+0x140>)
 8003d04:	675a      	str	r2, [r3, #116]	; 0x74
 8003d06:	e002      	b.n	8003d0e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a2c      	ldr	r2, [pc, #176]	; (8003dbc <HAL_UART_Transmit_IT+0x144>)
 8003d0c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3308      	adds	r3, #8
 8003d1c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	e853 3f00 	ldrex	r3, [r3]
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3308      	adds	r3, #8
 8003d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d36:	637a      	str	r2, [r7, #52]	; 0x34
 8003d38:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d3e:	e841 2300 	strex	r3, r2, [r1]
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1e5      	bne.n	8003d16 <HAL_UART_Transmit_IT+0x9e>
 8003d4a:	e02c      	b.n	8003da6 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d54:	d107      	bne.n	8003d66 <HAL_UART_Transmit_IT+0xee>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d103      	bne.n	8003d66 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_UART_Transmit_IT+0x148>)
 8003d62:	675a      	str	r2, [r3, #116]	; 0x74
 8003d64:	e002      	b.n	8003d6c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a16      	ldr	r2, [pc, #88]	; (8003dc4 <HAL_UART_Transmit_IT+0x14c>)
 8003d6a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	e853 3f00 	ldrex	r3, [r3]
 8003d80:	613b      	str	r3, [r7, #16]
   return(result);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d92:	623b      	str	r3, [r7, #32]
 8003d94:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	69f9      	ldr	r1, [r7, #28]
 8003d98:	6a3a      	ldr	r2, [r7, #32]
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e6      	bne.n	8003d74 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e000      	b.n	8003dac <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8003daa:	2302      	movs	r3, #2
  }
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3744      	adds	r7, #68	; 0x44
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	080050ed 	.word	0x080050ed
 8003dbc:	0800500d 	.word	0x0800500d
 8003dc0:	08004f4b 	.word	0x08004f4b
 8003dc4:	08004e93 	.word	0x08004e93

08003dc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b0ba      	sub	sp, #232	; 0xe8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003dee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003df2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003df6:	4013      	ands	r3, r2
 8003df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d11b      	bne.n	8003e3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e08:	f003 0320 	and.w	r3, r3, #32
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 82d6 	beq.w	80043de <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	4798      	blx	r3
      }
      return;
 8003e3a:	e2d0      	b.n	80043de <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 811f 	beq.w	8004084 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003e46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003e4a:	4b8b      	ldr	r3, [pc, #556]	; (8004078 <HAL_UART_IRQHandler+0x2b0>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e56:	4b89      	ldr	r3, [pc, #548]	; (800407c <HAL_UART_IRQHandler+0x2b4>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f000 8112 	beq.w	8004084 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d011      	beq.n	8003e90 <HAL_UART_IRQHandler+0xc8>
 8003e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e86:	f043 0201 	orr.w	r2, r3, #1
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d011      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xf8>
 8003e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00b      	beq.n	8003ec0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2202      	movs	r2, #2
 8003eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb6:	f043 0204 	orr.w	r2, r3, #4
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d011      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x128>
 8003ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2204      	movs	r2, #4
 8003ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee6:	f043 0202 	orr.w	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d017      	beq.n	8003f2c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d105      	bne.n	8003f14 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003f08:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003f0c:	4b5a      	ldr	r3, [pc, #360]	; (8004078 <HAL_UART_IRQHandler+0x2b0>)
 8003f0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00b      	beq.n	8003f2c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2208      	movs	r2, #8
 8003f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f22:	f043 0208 	orr.w	r2, r3, #8
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <HAL_UART_IRQHandler+0x196>
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00c      	beq.n	8003f5e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 823c 	beq.w	80043e2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d013      	beq.n	8003f9e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7a:	f003 0320 	and.w	r3, r3, #32
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d105      	bne.n	8003f8e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb2:	2b40      	cmp	r3, #64	; 0x40
 8003fb4:	d005      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d04f      	beq.n	8004062 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fee9 	bl	8004d9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d141      	bne.n	800405a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	3308      	adds	r3, #8
 8003fdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fe4:	e853 3f00 	ldrex	r3, [r3]
 8003fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004002:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004006:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800400e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800401a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1d9      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d013      	beq.n	8004052 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800402e:	4a14      	ldr	r2, [pc, #80]	; (8004080 <HAL_UART_IRQHandler+0x2b8>)
 8004030:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004036:	4618      	mov	r0, r3
 8004038:	f7fd f888 	bl	800114c <HAL_DMA_Abort_IT>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d017      	beq.n	8004072 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800404c:	4610      	mov	r0, r2
 800404e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004050:	e00f      	b.n	8004072 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9da 	bl	800440c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00b      	b.n	8004072 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9d6 	bl	800440c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e007      	b.n	8004072 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9d2 	bl	800440c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004070:	e1b7      	b.n	80043e2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004072:	bf00      	nop
    return;
 8004074:	e1b5      	b.n	80043e2 <HAL_UART_IRQHandler+0x61a>
 8004076:	bf00      	nop
 8004078:	10000001 	.word	0x10000001
 800407c:	04000120 	.word	0x04000120
 8004080:	08004e67 	.word	0x08004e67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004088:	2b01      	cmp	r3, #1
 800408a:	f040 814a 	bne.w	8004322 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800408e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 8143 	beq.w	8004322 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800409c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 813c 	beq.w	8004322 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2210      	movs	r2, #16
 80040b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	f040 80b5 	bne.w	800422c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8187 	beq.w	80043e6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e2:	429a      	cmp	r2, r3
 80040e4:	f080 817f 	bcs.w	80043e6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0320 	and.w	r3, r3, #32
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f040 8086 	bne.w	8004210 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800411c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800412e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004132:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800413a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1da      	bne.n	8004104 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3308      	adds	r3, #8
 8004154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004158:	e853 3f00 	ldrex	r3, [r3]
 800415c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800415e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004160:	f023 0301 	bic.w	r3, r3, #1
 8004164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	3308      	adds	r3, #8
 800416e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800417a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e1      	bne.n	800414e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3308      	adds	r3, #8
 8004190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800419a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800419c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3308      	adds	r3, #8
 80041aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e3      	bne.n	800418a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e0:	f023 0310 	bic.w	r3, r3, #16
 80041e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80041f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e4      	bne.n	80041d0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800420a:	4618      	mov	r0, r3
 800420c:	f7fc ff45 	bl	800109a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800421c:	b29b      	uxth	r3, r3
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	b29b      	uxth	r3, r3
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f8fb 	bl	8004420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800422a:	e0dc      	b.n	80043e6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004238:	b29b      	uxth	r3, r3
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 80ce 	beq.w	80043ea <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800424e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80c9 	beq.w	80043ea <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800426c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800427a:	647b      	str	r3, [r7, #68]	; 0x44
 800427c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004282:	e841 2300 	strex	r3, r2, [r1]
 8004286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1e4      	bne.n	8004258 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3308      	adds	r3, #8
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	623b      	str	r3, [r7, #32]
   return(result);
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a4:	f023 0301 	bic.w	r3, r3, #1
 80042a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3308      	adds	r3, #8
 80042b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042b6:	633a      	str	r2, [r7, #48]	; 0x30
 80042b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e1      	bne.n	800428e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004300:	61fb      	str	r3, [r7, #28]
 8004302:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	617b      	str	r3, [r7, #20]
   return(result);
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e4      	bne.n	80042de <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004314:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 f880 	bl	8004420 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004320:	e063      	b.n	80043ea <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00e      	beq.n	800434c <HAL_UART_IRQHandler+0x584>
 800432e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d008      	beq.n	800434c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004342:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 ff71 	bl	800522c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800434a:	e051      	b.n	80043f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800434c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d014      	beq.n	8004382 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004368:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004374:	2b00      	cmp	r3, #0
 8004376:	d03a      	beq.n	80043ee <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
    }
    return;
 8004380:	e035      	b.n	80043ee <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d009      	beq.n	80043a2 <HAL_UART_IRQHandler+0x5da>
 800438e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 ff1b 	bl	80051d6 <UART_EndTransmit_IT>
    return;
 80043a0:	e026      	b.n	80043f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80043a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d009      	beq.n	80043c2 <HAL_UART_IRQHandler+0x5fa>
 80043ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 ff4a 	bl	8005254 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043c0:	e016      	b.n	80043f0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80043c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d010      	beq.n	80043f0 <HAL_UART_IRQHandler+0x628>
 80043ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	da0c      	bge.n	80043f0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 ff32 	bl	8005240 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043dc:	e008      	b.n	80043f0 <HAL_UART_IRQHandler+0x628>
      return;
 80043de:	bf00      	nop
 80043e0:	e006      	b.n	80043f0 <HAL_UART_IRQHandler+0x628>
    return;
 80043e2:	bf00      	nop
 80043e4:	e004      	b.n	80043f0 <HAL_UART_IRQHandler+0x628>
      return;
 80043e6:	bf00      	nop
 80043e8:	e002      	b.n	80043f0 <HAL_UART_IRQHandler+0x628>
      return;
 80043ea:	bf00      	nop
 80043ec:	e000      	b.n	80043f0 <HAL_UART_IRQHandler+0x628>
    return;
 80043ee:	bf00      	nop
  }
}
 80043f0:	37e8      	adds	r7, #232	; 0xe8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop

080043f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800443c:	b08c      	sub	sp, #48	; 0x30
 800443e:	af00      	add	r7, sp, #0
 8004440:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	431a      	orrs	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	431a      	orrs	r2, r3
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	4313      	orrs	r3, r2
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4baa      	ldr	r3, [pc, #680]	; (8004710 <UART_SetConfig+0x2d8>)
 8004468:	4013      	ands	r3, r2
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	6812      	ldr	r2, [r2, #0]
 800446e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004470:	430b      	orrs	r3, r1
 8004472:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a9f      	ldr	r2, [pc, #636]	; (8004714 <UART_SetConfig+0x2dc>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a0:	4313      	orrs	r3, r2
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80044ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044b8:	430b      	orrs	r3, r1
 80044ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	f023 010f 	bic.w	r1, r3, #15
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a90      	ldr	r2, [pc, #576]	; (8004718 <UART_SetConfig+0x2e0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d125      	bne.n	8004528 <UART_SetConfig+0xf0>
 80044dc:	4b8f      	ldr	r3, [pc, #572]	; (800471c <UART_SetConfig+0x2e4>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d81a      	bhi.n	8004520 <UART_SetConfig+0xe8>
 80044ea:	a201      	add	r2, pc, #4	; (adr r2, 80044f0 <UART_SetConfig+0xb8>)
 80044ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f0:	08004501 	.word	0x08004501
 80044f4:	08004511 	.word	0x08004511
 80044f8:	08004509 	.word	0x08004509
 80044fc:	08004519 	.word	0x08004519
 8004500:	2301      	movs	r3, #1
 8004502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004506:	e116      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004508:	2302      	movs	r3, #2
 800450a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800450e:	e112      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004510:	2304      	movs	r3, #4
 8004512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004516:	e10e      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004518:	2308      	movs	r3, #8
 800451a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800451e:	e10a      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004520:	2310      	movs	r3, #16
 8004522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004526:	e106      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a7c      	ldr	r2, [pc, #496]	; (8004720 <UART_SetConfig+0x2e8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d138      	bne.n	80045a4 <UART_SetConfig+0x16c>
 8004532:	4b7a      	ldr	r3, [pc, #488]	; (800471c <UART_SetConfig+0x2e4>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b0c      	cmp	r3, #12
 800453e:	d82d      	bhi.n	800459c <UART_SetConfig+0x164>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x110>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	0800457d 	.word	0x0800457d
 800454c:	0800459d 	.word	0x0800459d
 8004550:	0800459d 	.word	0x0800459d
 8004554:	0800459d 	.word	0x0800459d
 8004558:	0800458d 	.word	0x0800458d
 800455c:	0800459d 	.word	0x0800459d
 8004560:	0800459d 	.word	0x0800459d
 8004564:	0800459d 	.word	0x0800459d
 8004568:	08004585 	.word	0x08004585
 800456c:	0800459d 	.word	0x0800459d
 8004570:	0800459d 	.word	0x0800459d
 8004574:	0800459d 	.word	0x0800459d
 8004578:	08004595 	.word	0x08004595
 800457c:	2300      	movs	r3, #0
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004582:	e0d8      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004584:	2302      	movs	r3, #2
 8004586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800458a:	e0d4      	b.n	8004736 <UART_SetConfig+0x2fe>
 800458c:	2304      	movs	r3, #4
 800458e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004592:	e0d0      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004594:	2308      	movs	r3, #8
 8004596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800459a:	e0cc      	b.n	8004736 <UART_SetConfig+0x2fe>
 800459c:	2310      	movs	r3, #16
 800459e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045a2:	e0c8      	b.n	8004736 <UART_SetConfig+0x2fe>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a5e      	ldr	r2, [pc, #376]	; (8004724 <UART_SetConfig+0x2ec>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d125      	bne.n	80045fa <UART_SetConfig+0x1c2>
 80045ae:	4b5b      	ldr	r3, [pc, #364]	; (800471c <UART_SetConfig+0x2e4>)
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80045b8:	2b30      	cmp	r3, #48	; 0x30
 80045ba:	d016      	beq.n	80045ea <UART_SetConfig+0x1b2>
 80045bc:	2b30      	cmp	r3, #48	; 0x30
 80045be:	d818      	bhi.n	80045f2 <UART_SetConfig+0x1ba>
 80045c0:	2b20      	cmp	r3, #32
 80045c2:	d00a      	beq.n	80045da <UART_SetConfig+0x1a2>
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d814      	bhi.n	80045f2 <UART_SetConfig+0x1ba>
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <UART_SetConfig+0x19a>
 80045cc:	2b10      	cmp	r3, #16
 80045ce:	d008      	beq.n	80045e2 <UART_SetConfig+0x1aa>
 80045d0:	e00f      	b.n	80045f2 <UART_SetConfig+0x1ba>
 80045d2:	2300      	movs	r3, #0
 80045d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045d8:	e0ad      	b.n	8004736 <UART_SetConfig+0x2fe>
 80045da:	2302      	movs	r3, #2
 80045dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e0:	e0a9      	b.n	8004736 <UART_SetConfig+0x2fe>
 80045e2:	2304      	movs	r3, #4
 80045e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045e8:	e0a5      	b.n	8004736 <UART_SetConfig+0x2fe>
 80045ea:	2308      	movs	r3, #8
 80045ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f0:	e0a1      	b.n	8004736 <UART_SetConfig+0x2fe>
 80045f2:	2310      	movs	r3, #16
 80045f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80045f8:	e09d      	b.n	8004736 <UART_SetConfig+0x2fe>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a4a      	ldr	r2, [pc, #296]	; (8004728 <UART_SetConfig+0x2f0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d125      	bne.n	8004650 <UART_SetConfig+0x218>
 8004604:	4b45      	ldr	r3, [pc, #276]	; (800471c <UART_SetConfig+0x2e4>)
 8004606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800460e:	2bc0      	cmp	r3, #192	; 0xc0
 8004610:	d016      	beq.n	8004640 <UART_SetConfig+0x208>
 8004612:	2bc0      	cmp	r3, #192	; 0xc0
 8004614:	d818      	bhi.n	8004648 <UART_SetConfig+0x210>
 8004616:	2b80      	cmp	r3, #128	; 0x80
 8004618:	d00a      	beq.n	8004630 <UART_SetConfig+0x1f8>
 800461a:	2b80      	cmp	r3, #128	; 0x80
 800461c:	d814      	bhi.n	8004648 <UART_SetConfig+0x210>
 800461e:	2b00      	cmp	r3, #0
 8004620:	d002      	beq.n	8004628 <UART_SetConfig+0x1f0>
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d008      	beq.n	8004638 <UART_SetConfig+0x200>
 8004626:	e00f      	b.n	8004648 <UART_SetConfig+0x210>
 8004628:	2300      	movs	r3, #0
 800462a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800462e:	e082      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004630:	2302      	movs	r3, #2
 8004632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004636:	e07e      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004638:	2304      	movs	r3, #4
 800463a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800463e:	e07a      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004640:	2308      	movs	r3, #8
 8004642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004646:	e076      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004648:	2310      	movs	r3, #16
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800464e:	e072      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a35      	ldr	r2, [pc, #212]	; (800472c <UART_SetConfig+0x2f4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d12a      	bne.n	80046b0 <UART_SetConfig+0x278>
 800465a:	4b30      	ldr	r3, [pc, #192]	; (800471c <UART_SetConfig+0x2e4>)
 800465c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004668:	d01a      	beq.n	80046a0 <UART_SetConfig+0x268>
 800466a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800466e:	d81b      	bhi.n	80046a8 <UART_SetConfig+0x270>
 8004670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004674:	d00c      	beq.n	8004690 <UART_SetConfig+0x258>
 8004676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800467a:	d815      	bhi.n	80046a8 <UART_SetConfig+0x270>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <UART_SetConfig+0x250>
 8004680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004684:	d008      	beq.n	8004698 <UART_SetConfig+0x260>
 8004686:	e00f      	b.n	80046a8 <UART_SetConfig+0x270>
 8004688:	2300      	movs	r3, #0
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468e:	e052      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004690:	2302      	movs	r3, #2
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004696:	e04e      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004698:	2304      	movs	r3, #4
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469e:	e04a      	b.n	8004736 <UART_SetConfig+0x2fe>
 80046a0:	2308      	movs	r3, #8
 80046a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046a6:	e046      	b.n	8004736 <UART_SetConfig+0x2fe>
 80046a8:	2310      	movs	r3, #16
 80046aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ae:	e042      	b.n	8004736 <UART_SetConfig+0x2fe>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a17      	ldr	r2, [pc, #92]	; (8004714 <UART_SetConfig+0x2dc>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d13a      	bne.n	8004730 <UART_SetConfig+0x2f8>
 80046ba:	4b18      	ldr	r3, [pc, #96]	; (800471c <UART_SetConfig+0x2e4>)
 80046bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80046c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046c8:	d01a      	beq.n	8004700 <UART_SetConfig+0x2c8>
 80046ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046ce:	d81b      	bhi.n	8004708 <UART_SetConfig+0x2d0>
 80046d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d4:	d00c      	beq.n	80046f0 <UART_SetConfig+0x2b8>
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046da:	d815      	bhi.n	8004708 <UART_SetConfig+0x2d0>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d003      	beq.n	80046e8 <UART_SetConfig+0x2b0>
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e4:	d008      	beq.n	80046f8 <UART_SetConfig+0x2c0>
 80046e6:	e00f      	b.n	8004708 <UART_SetConfig+0x2d0>
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ee:	e022      	b.n	8004736 <UART_SetConfig+0x2fe>
 80046f0:	2302      	movs	r3, #2
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f6:	e01e      	b.n	8004736 <UART_SetConfig+0x2fe>
 80046f8:	2304      	movs	r3, #4
 80046fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046fe:	e01a      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004700:	2308      	movs	r3, #8
 8004702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004706:	e016      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004708:	2310      	movs	r3, #16
 800470a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800470e:	e012      	b.n	8004736 <UART_SetConfig+0x2fe>
 8004710:	cfff69f3 	.word	0xcfff69f3
 8004714:	40008000 	.word	0x40008000
 8004718:	40013800 	.word	0x40013800
 800471c:	40021000 	.word	0x40021000
 8004720:	40004400 	.word	0x40004400
 8004724:	40004800 	.word	0x40004800
 8004728:	40004c00 	.word	0x40004c00
 800472c:	40005000 	.word	0x40005000
 8004730:	2310      	movs	r3, #16
 8004732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4aae      	ldr	r2, [pc, #696]	; (80049f4 <UART_SetConfig+0x5bc>)
 800473c:	4293      	cmp	r3, r2
 800473e:	f040 8097 	bne.w	8004870 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004742:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004746:	2b08      	cmp	r3, #8
 8004748:	d823      	bhi.n	8004792 <UART_SetConfig+0x35a>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0x318>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004775 	.word	0x08004775
 8004754:	08004793 	.word	0x08004793
 8004758:	0800477d 	.word	0x0800477d
 800475c:	08004793 	.word	0x08004793
 8004760:	08004783 	.word	0x08004783
 8004764:	08004793 	.word	0x08004793
 8004768:	08004793 	.word	0x08004793
 800476c:	08004793 	.word	0x08004793
 8004770:	0800478b 	.word	0x0800478b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004774:	f7fe ff70 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 8004778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800477a:	e010      	b.n	800479e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b9e      	ldr	r3, [pc, #632]	; (80049f8 <UART_SetConfig+0x5c0>)
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004780:	e00d      	b.n	800479e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fe fefb 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004788:	e009      	b.n	800479e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004790:	e005      	b.n	800479e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004792:	2300      	movs	r3, #0
 8004794:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800479c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8130 	beq.w	8004a06 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	4a94      	ldr	r2, [pc, #592]	; (80049fc <UART_SetConfig+0x5c4>)
 80047ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	685a      	ldr	r2, [r3, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d305      	bcc.n	80047d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d903      	bls.n	80047de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80047dc:	e113      	b.n	8004a06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	2200      	movs	r2, #0
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	60fa      	str	r2, [r7, #12]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	4a84      	ldr	r2, [pc, #528]	; (80049fc <UART_SetConfig+0x5c4>)
 80047ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2200      	movs	r2, #0
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004800:	f7fb fd5e 	bl	80002c0 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	020b      	lsls	r3, r1, #8
 8004816:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800481a:	0202      	lsls	r2, r0, #8
 800481c:	6979      	ldr	r1, [r7, #20]
 800481e:	6849      	ldr	r1, [r1, #4]
 8004820:	0849      	lsrs	r1, r1, #1
 8004822:	2000      	movs	r0, #0
 8004824:	460c      	mov	r4, r1
 8004826:	4605      	mov	r5, r0
 8004828:	eb12 0804 	adds.w	r8, r2, r4
 800482c:	eb43 0905 	adc.w	r9, r3, r5
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	469a      	mov	sl, r3
 8004838:	4693      	mov	fp, r2
 800483a:	4652      	mov	r2, sl
 800483c:	465b      	mov	r3, fp
 800483e:	4640      	mov	r0, r8
 8004840:	4649      	mov	r1, r9
 8004842:	f7fb fd3d 	bl	80002c0 <__aeabi_uldivmod>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4613      	mov	r3, r2
 800484c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004854:	d308      	bcc.n	8004868 <UART_SetConfig+0x430>
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800485c:	d204      	bcs.n	8004868 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a3a      	ldr	r2, [r7, #32]
 8004864:	60da      	str	r2, [r3, #12]
 8004866:	e0ce      	b.n	8004a06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800486e:	e0ca      	b.n	8004a06 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004878:	d166      	bne.n	8004948 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800487a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800487e:	2b08      	cmp	r3, #8
 8004880:	d827      	bhi.n	80048d2 <UART_SetConfig+0x49a>
 8004882:	a201      	add	r2, pc, #4	; (adr r2, 8004888 <UART_SetConfig+0x450>)
 8004884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004888:	080048ad 	.word	0x080048ad
 800488c:	080048b5 	.word	0x080048b5
 8004890:	080048bd 	.word	0x080048bd
 8004894:	080048d3 	.word	0x080048d3
 8004898:	080048c3 	.word	0x080048c3
 800489c:	080048d3 	.word	0x080048d3
 80048a0:	080048d3 	.word	0x080048d3
 80048a4:	080048d3 	.word	0x080048d3
 80048a8:	080048cb 	.word	0x080048cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ac:	f7fe fed4 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 80048b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048b2:	e014      	b.n	80048de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b4:	f7fe fee6 	bl	8003684 <HAL_RCC_GetPCLK2Freq>
 80048b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048ba:	e010      	b.n	80048de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048bc:	4b4e      	ldr	r3, [pc, #312]	; (80049f8 <UART_SetConfig+0x5c0>)
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048c0:	e00d      	b.n	80048de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c2:	f7fe fe5b 	bl	800357c <HAL_RCC_GetSysClockFreq>
 80048c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048c8:	e009      	b.n	80048de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048d0:	e005      	b.n	80048de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f000 8090 	beq.w	8004a06 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	4a44      	ldr	r2, [pc, #272]	; (80049fc <UART_SetConfig+0x5c4>)
 80048ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80048f8:	005a      	lsls	r2, r3, #1
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	085b      	lsrs	r3, r3, #1
 8004900:	441a      	add	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800490c:	6a3b      	ldr	r3, [r7, #32]
 800490e:	2b0f      	cmp	r3, #15
 8004910:	d916      	bls.n	8004940 <UART_SetConfig+0x508>
 8004912:	6a3b      	ldr	r3, [r7, #32]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004918:	d212      	bcs.n	8004940 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	b29b      	uxth	r3, r3
 800491e:	f023 030f 	bic.w	r3, r3, #15
 8004922:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	b29b      	uxth	r3, r3
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	b29a      	uxth	r2, r3
 8004930:	8bfb      	ldrh	r3, [r7, #30]
 8004932:	4313      	orrs	r3, r2
 8004934:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	8bfa      	ldrh	r2, [r7, #30]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	e062      	b.n	8004a06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004946:	e05e      	b.n	8004a06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004948:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800494c:	2b08      	cmp	r3, #8
 800494e:	d828      	bhi.n	80049a2 <UART_SetConfig+0x56a>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0x520>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	0800497d 	.word	0x0800497d
 800495c:	08004985 	.word	0x08004985
 8004960:	0800498d 	.word	0x0800498d
 8004964:	080049a3 	.word	0x080049a3
 8004968:	08004993 	.word	0x08004993
 800496c:	080049a3 	.word	0x080049a3
 8004970:	080049a3 	.word	0x080049a3
 8004974:	080049a3 	.word	0x080049a3
 8004978:	0800499b 	.word	0x0800499b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800497c:	f7fe fe6c 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 8004980:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004982:	e014      	b.n	80049ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004984:	f7fe fe7e 	bl	8003684 <HAL_RCC_GetPCLK2Freq>
 8004988:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800498a:	e010      	b.n	80049ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800498c:	4b1a      	ldr	r3, [pc, #104]	; (80049f8 <UART_SetConfig+0x5c0>)
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004990:	e00d      	b.n	80049ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004992:	f7fe fdf3 	bl	800357c <HAL_RCC_GetSysClockFreq>
 8004996:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004998:	e009      	b.n	80049ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049a0:	e005      	b.n	80049ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049ac:	bf00      	nop
    }

    if (pclk != 0U)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d028      	beq.n	8004a06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	4a10      	ldr	r2, [pc, #64]	; (80049fc <UART_SetConfig+0x5c4>)
 80049ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049be:	461a      	mov	r2, r3
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	441a      	add	r2, r3
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	d910      	bls.n	8004a00 <UART_SetConfig+0x5c8>
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e4:	d20c      	bcs.n	8004a00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60da      	str	r2, [r3, #12]
 80049f0:	e009      	b.n	8004a06 <UART_SetConfig+0x5ce>
 80049f2:	bf00      	nop
 80049f4:	40008000 	.word	0x40008000
 80049f8:	00f42400 	.word	0x00f42400
 80049fc:	08005e00 	.word	0x08005e00
      }
      else
      {
        ret = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004a22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3730      	adds	r7, #48	; 0x30
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01a      	beq.n	8004b46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b2e:	d10a      	bne.n	8004b46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	605a      	str	r2, [r3, #4]
  }
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b84:	f7fc f94c 	bl	8000e20 <HAL_GetTick>
 8004b88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d10e      	bne.n	8004bb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b9c:	9300      	str	r3, [sp, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f82f 	bl	8004c0a <UART_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e025      	b.n	8004c02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d10e      	bne.n	8004be2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 f819 	bl	8004c0a <UART_WaitOnFlagUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e00f      	b.n	8004c02 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b09c      	sub	sp, #112	; 0x70
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	4613      	mov	r3, r2
 8004c18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1a:	e0a9      	b.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c22:	f000 80a5 	beq.w	8004d70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c26:	f7fc f8fb 	bl	8000e20 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d302      	bcc.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x32>
 8004c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d140      	bne.n	8004cbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c44:	e853 3f00 	ldrex	r3, [r3]
 8004c48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c50:	667b      	str	r3, [r7, #100]	; 0x64
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e6      	bne.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3308      	adds	r3, #8
 8004c74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	663b      	str	r3, [r7, #96]	; 0x60
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3308      	adds	r3, #8
 8004c8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c96:	e841 2300 	strex	r3, r2, [r1]
 8004c9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1e5      	bne.n	8004c6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e069      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d051      	beq.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	69db      	ldr	r3, [r3, #28]
 8004cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cda:	d149      	bne.n	8004d70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ce4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	461a      	mov	r2, r3
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	637b      	str	r3, [r7, #52]	; 0x34
 8004d06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e6      	bne.n	8004ce6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3308      	adds	r3, #8
 8004d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	613b      	str	r3, [r7, #16]
   return(result);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d38:	623a      	str	r2, [r7, #32]
 8004d3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	69f9      	ldr	r1, [r7, #28]
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2220      	movs	r2, #32
 8004d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e010      	b.n	8004d92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	69da      	ldr	r2, [r3, #28]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	461a      	mov	r2, r3
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	f43f af46 	beq.w	8004c1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3770      	adds	r7, #112	; 0x70
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b095      	sub	sp, #84	; 0x54
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	e853 3f00 	ldrex	r3, [r3]
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8004dc2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dc8:	e841 2300 	strex	r3, r2, [r1]
 8004dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1e6      	bne.n	8004da2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	3308      	adds	r3, #8
 8004dda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e3      	bne.n	8004dd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d118      	bne.n	8004e46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f023 0310 	bic.w	r3, r3, #16
 8004e28:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6979      	ldr	r1, [r7, #20]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e6      	bne.n	8004e14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004e5a:	bf00      	nop
 8004e5c:	3754      	adds	r7, #84	; 0x54
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b084      	sub	sp, #16
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f7ff fac1 	bl	800440c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b08f      	sub	sp, #60	; 0x3c
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea0:	2b21      	cmp	r3, #33	; 0x21
 8004ea2:	d14c      	bne.n	8004f3e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d132      	bne.n	8004f16 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ed0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e6      	bne.n	8004eb0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ef6:	633b      	str	r3, [r7, #48]	; 0x30
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	461a      	mov	r2, r3
 8004efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6979      	ldr	r1, [r7, #20]
 8004f06:	69ba      	ldr	r2, [r7, #24]
 8004f08:	e841 2300 	strex	r3, r2, [r1]
 8004f0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e6      	bne.n	8004ee2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004f14:	e013      	b.n	8004f3e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004f3e:	bf00      	nop
 8004f40:	373c      	adds	r7, #60	; 0x3c
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b091      	sub	sp, #68	; 0x44
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f58:	2b21      	cmp	r3, #33	; 0x21
 8004f5a:	d151      	bne.n	8005000 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d132      	bne.n	8004fce <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	e853 3f00 	ldrex	r3, [r3]
 8004f74:	623b      	str	r3, [r7, #32]
   return(result);
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	633b      	str	r3, [r7, #48]	; 0x30
 8004f88:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f8e:	e841 2300 	strex	r3, r2, [r1]
 8004f92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1e6      	bne.n	8004f68 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	e853 3f00 	ldrex	r3, [r3]
 8004fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fae:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbc:	69b9      	ldr	r1, [r7, #24]
 8004fbe:	69fa      	ldr	r2, [r7, #28]
 8004fc0:	e841 2300 	strex	r3, r2, [r1]
 8004fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e6      	bne.n	8004f9a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004fcc:	e018      	b.n	8005000 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	461a      	mov	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe8:	1c9a      	adds	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8005000:	bf00      	nop
 8005002:	3744      	adds	r7, #68	; 0x44
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800500c:	b480      	push	{r7}
 800500e:	b091      	sub	sp, #68	; 0x44
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501a:	2b21      	cmp	r3, #33	; 0x21
 800501c:	d160      	bne.n	80050e0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005024:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005026:	e057      	b.n	80050d8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800502e:	b29b      	uxth	r3, r3
 8005030:	2b00      	cmp	r3, #0
 8005032:	d133      	bne.n	800509c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3308      	adds	r3, #8
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	e853 3f00 	ldrex	r3, [r3]
 8005042:	623b      	str	r3, [r7, #32]
   return(result);
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3308      	adds	r3, #8
 8005052:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005054:	633a      	str	r2, [r7, #48]	; 0x30
 8005056:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800505a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800505c:	e841 2300 	strex	r3, r2, [r1]
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1e5      	bne.n	8005034 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	60fb      	str	r3, [r7, #12]
   return(result);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	69b9      	ldr	r1, [r7, #24]
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	617b      	str	r3, [r7, #20]
   return(result);
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e6      	bne.n	8005068 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800509a:	e021      	b.n	80050e0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d013      	beq.n	80050d2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80050d2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80050d4:	3b01      	subs	r3, #1
 80050d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80050d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1a4      	bne.n	8005028 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80050de:	e7ff      	b.n	80050e0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80050e0:	bf00      	nop
 80050e2:	3744      	adds	r7, #68	; 0x44
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b091      	sub	sp, #68	; 0x44
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fa:	2b21      	cmp	r3, #33	; 0x21
 80050fc:	d165      	bne.n	80051ca <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005104:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005106:	e05c      	b.n	80051c2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d133      	bne.n	800517c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3308      	adds	r3, #8
 800511a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	61fb      	str	r3, [r7, #28]
   return(result);
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800512a:	637b      	str	r3, [r7, #52]	; 0x34
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3308      	adds	r3, #8
 8005132:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800513a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	60bb      	str	r3, [r7, #8]
   return(result);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005166:	61bb      	str	r3, [r7, #24]
 8005168:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6979      	ldr	r1, [r7, #20]
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	613b      	str	r3, [r7, #16]
   return(result);
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e6      	bne.n	8005148 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800517a:	e026      	b.n	80051ca <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005186:	2b00      	cmp	r3, #0
 8005188:	d018      	beq.n	80051bc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800518e:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800519e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	1c9a      	adds	r2, r3, #2
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	3b01      	subs	r3, #1
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80051bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051be:	3b01      	subs	r3, #1
 80051c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80051c2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d19f      	bne.n	8005108 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80051c8:	e7ff      	b.n	80051ca <UART_TxISR_16BIT_FIFOEN+0xde>
 80051ca:	bf00      	nop
 80051cc:	3744      	adds	r7, #68	; 0x44
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b088      	sub	sp, #32
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051f2:	61fb      	str	r3, [r7, #28]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6979      	ldr	r1, [r7, #20]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	613b      	str	r3, [r7, #16]
   return(result);
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff f8ea 	bl	80043f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005224:	bf00      	nop
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <HAL_UARTEx_DisableFifoMode+0x16>
 800527a:	2302      	movs	r3, #2
 800527c:	e027      	b.n	80052ce <HAL_UARTEx_DisableFifoMode+0x66>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2224      	movs	r2, #36	; 0x24
 800528a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f022 0201 	bic.w	r2, r2, #1
 80052a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2220      	movs	r2, #32
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d101      	bne.n	80052f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052ee:	2302      	movs	r3, #2
 80052f0:	e02d      	b.n	800534e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2224      	movs	r2, #36	; 0x24
 80052fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0201 	bic.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f850 	bl	80053d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
 800535e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800536a:	2302      	movs	r3, #2
 800536c:	e02d      	b.n	80053ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2201      	movs	r2, #1
 8005372:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2224      	movs	r2, #36	; 0x24
 800537a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f812 	bl	80053d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2220      	movs	r2, #32
 80053bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d108      	bne.n	80053f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053f4:	e031      	b.n	800545a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053f6:	2308      	movs	r3, #8
 80053f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053fa:	2308      	movs	r3, #8
 80053fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	0e5b      	lsrs	r3, r3, #25
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	0f5b      	lsrs	r3, r3, #29
 8005416:	b2db      	uxtb	r3, r3
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800541e:	7bbb      	ldrb	r3, [r7, #14]
 8005420:	7b3a      	ldrb	r2, [r7, #12]
 8005422:	4911      	ldr	r1, [pc, #68]	; (8005468 <UARTEx_SetNbDataToProcess+0x94>)
 8005424:	5c8a      	ldrb	r2, [r1, r2]
 8005426:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800542a:	7b3a      	ldrb	r2, [r7, #12]
 800542c:	490f      	ldr	r1, [pc, #60]	; (800546c <UARTEx_SetNbDataToProcess+0x98>)
 800542e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005430:	fb93 f3f2 	sdiv	r3, r3, r2
 8005434:	b29a      	uxth	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	7b7a      	ldrb	r2, [r7, #13]
 8005440:	4909      	ldr	r1, [pc, #36]	; (8005468 <UARTEx_SetNbDataToProcess+0x94>)
 8005442:	5c8a      	ldrb	r2, [r1, r2]
 8005444:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005448:	7b7a      	ldrb	r2, [r7, #13]
 800544a:	4908      	ldr	r1, [pc, #32]	; (800546c <UARTEx_SetNbDataToProcess+0x98>)
 800544c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800544e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005452:	b29a      	uxth	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800545a:	bf00      	nop
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	08005e18 	.word	0x08005e18
 800546c:	08005e20 	.word	0x08005e20

08005470 <siprintf>:
 8005470:	b40e      	push	{r1, r2, r3}
 8005472:	b500      	push	{lr}
 8005474:	b09c      	sub	sp, #112	; 0x70
 8005476:	ab1d      	add	r3, sp, #116	; 0x74
 8005478:	9002      	str	r0, [sp, #8]
 800547a:	9006      	str	r0, [sp, #24]
 800547c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005480:	4809      	ldr	r0, [pc, #36]	; (80054a8 <siprintf+0x38>)
 8005482:	9107      	str	r1, [sp, #28]
 8005484:	9104      	str	r1, [sp, #16]
 8005486:	4909      	ldr	r1, [pc, #36]	; (80054ac <siprintf+0x3c>)
 8005488:	f853 2b04 	ldr.w	r2, [r3], #4
 800548c:	9105      	str	r1, [sp, #20]
 800548e:	6800      	ldr	r0, [r0, #0]
 8005490:	9301      	str	r3, [sp, #4]
 8005492:	a902      	add	r1, sp, #8
 8005494:	f000 f992 	bl	80057bc <_svfiprintf_r>
 8005498:	9b02      	ldr	r3, [sp, #8]
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	b01c      	add	sp, #112	; 0x70
 80054a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054a4:	b003      	add	sp, #12
 80054a6:	4770      	bx	lr
 80054a8:	20000058 	.word	0x20000058
 80054ac:	ffff0208 	.word	0xffff0208

080054b0 <memset>:
 80054b0:	4402      	add	r2, r0
 80054b2:	4603      	mov	r3, r0
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d100      	bne.n	80054ba <memset+0xa>
 80054b8:	4770      	bx	lr
 80054ba:	f803 1b01 	strb.w	r1, [r3], #1
 80054be:	e7f9      	b.n	80054b4 <memset+0x4>

080054c0 <__errno>:
 80054c0:	4b01      	ldr	r3, [pc, #4]	; (80054c8 <__errno+0x8>)
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000058 	.word	0x20000058

080054cc <__libc_init_array>:
 80054cc:	b570      	push	{r4, r5, r6, lr}
 80054ce:	4d0d      	ldr	r5, [pc, #52]	; (8005504 <__libc_init_array+0x38>)
 80054d0:	4c0d      	ldr	r4, [pc, #52]	; (8005508 <__libc_init_array+0x3c>)
 80054d2:	1b64      	subs	r4, r4, r5
 80054d4:	10a4      	asrs	r4, r4, #2
 80054d6:	2600      	movs	r6, #0
 80054d8:	42a6      	cmp	r6, r4
 80054da:	d109      	bne.n	80054f0 <__libc_init_array+0x24>
 80054dc:	4d0b      	ldr	r5, [pc, #44]	; (800550c <__libc_init_array+0x40>)
 80054de:	4c0c      	ldr	r4, [pc, #48]	; (8005510 <__libc_init_array+0x44>)
 80054e0:	f000 fc6a 	bl	8005db8 <_init>
 80054e4:	1b64      	subs	r4, r4, r5
 80054e6:	10a4      	asrs	r4, r4, #2
 80054e8:	2600      	movs	r6, #0
 80054ea:	42a6      	cmp	r6, r4
 80054ec:	d105      	bne.n	80054fa <__libc_init_array+0x2e>
 80054ee:	bd70      	pop	{r4, r5, r6, pc}
 80054f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054f4:	4798      	blx	r3
 80054f6:	3601      	adds	r6, #1
 80054f8:	e7ee      	b.n	80054d8 <__libc_init_array+0xc>
 80054fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80054fe:	4798      	blx	r3
 8005500:	3601      	adds	r6, #1
 8005502:	e7f2      	b.n	80054ea <__libc_init_array+0x1e>
 8005504:	08005e64 	.word	0x08005e64
 8005508:	08005e64 	.word	0x08005e64
 800550c:	08005e64 	.word	0x08005e64
 8005510:	08005e68 	.word	0x08005e68

08005514 <__retarget_lock_acquire_recursive>:
 8005514:	4770      	bx	lr

08005516 <__retarget_lock_release_recursive>:
 8005516:	4770      	bx	lr

08005518 <_free_r>:
 8005518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800551a:	2900      	cmp	r1, #0
 800551c:	d044      	beq.n	80055a8 <_free_r+0x90>
 800551e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005522:	9001      	str	r0, [sp, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	f1a1 0404 	sub.w	r4, r1, #4
 800552a:	bfb8      	it	lt
 800552c:	18e4      	addlt	r4, r4, r3
 800552e:	f000 f8df 	bl	80056f0 <__malloc_lock>
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <_free_r+0x94>)
 8005534:	9801      	ldr	r0, [sp, #4]
 8005536:	6813      	ldr	r3, [r2, #0]
 8005538:	b933      	cbnz	r3, 8005548 <_free_r+0x30>
 800553a:	6063      	str	r3, [r4, #4]
 800553c:	6014      	str	r4, [r2, #0]
 800553e:	b003      	add	sp, #12
 8005540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005544:	f000 b8da 	b.w	80056fc <__malloc_unlock>
 8005548:	42a3      	cmp	r3, r4
 800554a:	d908      	bls.n	800555e <_free_r+0x46>
 800554c:	6825      	ldr	r5, [r4, #0]
 800554e:	1961      	adds	r1, r4, r5
 8005550:	428b      	cmp	r3, r1
 8005552:	bf01      	itttt	eq
 8005554:	6819      	ldreq	r1, [r3, #0]
 8005556:	685b      	ldreq	r3, [r3, #4]
 8005558:	1949      	addeq	r1, r1, r5
 800555a:	6021      	streq	r1, [r4, #0]
 800555c:	e7ed      	b.n	800553a <_free_r+0x22>
 800555e:	461a      	mov	r2, r3
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	b10b      	cbz	r3, 8005568 <_free_r+0x50>
 8005564:	42a3      	cmp	r3, r4
 8005566:	d9fa      	bls.n	800555e <_free_r+0x46>
 8005568:	6811      	ldr	r1, [r2, #0]
 800556a:	1855      	adds	r5, r2, r1
 800556c:	42a5      	cmp	r5, r4
 800556e:	d10b      	bne.n	8005588 <_free_r+0x70>
 8005570:	6824      	ldr	r4, [r4, #0]
 8005572:	4421      	add	r1, r4
 8005574:	1854      	adds	r4, r2, r1
 8005576:	42a3      	cmp	r3, r4
 8005578:	6011      	str	r1, [r2, #0]
 800557a:	d1e0      	bne.n	800553e <_free_r+0x26>
 800557c:	681c      	ldr	r4, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	6053      	str	r3, [r2, #4]
 8005582:	440c      	add	r4, r1
 8005584:	6014      	str	r4, [r2, #0]
 8005586:	e7da      	b.n	800553e <_free_r+0x26>
 8005588:	d902      	bls.n	8005590 <_free_r+0x78>
 800558a:	230c      	movs	r3, #12
 800558c:	6003      	str	r3, [r0, #0]
 800558e:	e7d6      	b.n	800553e <_free_r+0x26>
 8005590:	6825      	ldr	r5, [r4, #0]
 8005592:	1961      	adds	r1, r4, r5
 8005594:	428b      	cmp	r3, r1
 8005596:	bf04      	itt	eq
 8005598:	6819      	ldreq	r1, [r3, #0]
 800559a:	685b      	ldreq	r3, [r3, #4]
 800559c:	6063      	str	r3, [r4, #4]
 800559e:	bf04      	itt	eq
 80055a0:	1949      	addeq	r1, r1, r5
 80055a2:	6021      	streq	r1, [r4, #0]
 80055a4:	6054      	str	r4, [r2, #4]
 80055a6:	e7ca      	b.n	800553e <_free_r+0x26>
 80055a8:	b003      	add	sp, #12
 80055aa:	bd30      	pop	{r4, r5, pc}
 80055ac:	200002a0 	.word	0x200002a0

080055b0 <sbrk_aligned>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	4e0e      	ldr	r6, [pc, #56]	; (80055ec <sbrk_aligned+0x3c>)
 80055b4:	460c      	mov	r4, r1
 80055b6:	6831      	ldr	r1, [r6, #0]
 80055b8:	4605      	mov	r5, r0
 80055ba:	b911      	cbnz	r1, 80055c2 <sbrk_aligned+0x12>
 80055bc:	f000 fba6 	bl	8005d0c <_sbrk_r>
 80055c0:	6030      	str	r0, [r6, #0]
 80055c2:	4621      	mov	r1, r4
 80055c4:	4628      	mov	r0, r5
 80055c6:	f000 fba1 	bl	8005d0c <_sbrk_r>
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d00a      	beq.n	80055e4 <sbrk_aligned+0x34>
 80055ce:	1cc4      	adds	r4, r0, #3
 80055d0:	f024 0403 	bic.w	r4, r4, #3
 80055d4:	42a0      	cmp	r0, r4
 80055d6:	d007      	beq.n	80055e8 <sbrk_aligned+0x38>
 80055d8:	1a21      	subs	r1, r4, r0
 80055da:	4628      	mov	r0, r5
 80055dc:	f000 fb96 	bl	8005d0c <_sbrk_r>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d101      	bne.n	80055e8 <sbrk_aligned+0x38>
 80055e4:	f04f 34ff 	mov.w	r4, #4294967295
 80055e8:	4620      	mov	r0, r4
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	200002a4 	.word	0x200002a4

080055f0 <_malloc_r>:
 80055f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055f4:	1ccd      	adds	r5, r1, #3
 80055f6:	f025 0503 	bic.w	r5, r5, #3
 80055fa:	3508      	adds	r5, #8
 80055fc:	2d0c      	cmp	r5, #12
 80055fe:	bf38      	it	cc
 8005600:	250c      	movcc	r5, #12
 8005602:	2d00      	cmp	r5, #0
 8005604:	4607      	mov	r7, r0
 8005606:	db01      	blt.n	800560c <_malloc_r+0x1c>
 8005608:	42a9      	cmp	r1, r5
 800560a:	d905      	bls.n	8005618 <_malloc_r+0x28>
 800560c:	230c      	movs	r3, #12
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	2600      	movs	r6, #0
 8005612:	4630      	mov	r0, r6
 8005614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005618:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056ec <_malloc_r+0xfc>
 800561c:	f000 f868 	bl	80056f0 <__malloc_lock>
 8005620:	f8d8 3000 	ldr.w	r3, [r8]
 8005624:	461c      	mov	r4, r3
 8005626:	bb5c      	cbnz	r4, 8005680 <_malloc_r+0x90>
 8005628:	4629      	mov	r1, r5
 800562a:	4638      	mov	r0, r7
 800562c:	f7ff ffc0 	bl	80055b0 <sbrk_aligned>
 8005630:	1c43      	adds	r3, r0, #1
 8005632:	4604      	mov	r4, r0
 8005634:	d155      	bne.n	80056e2 <_malloc_r+0xf2>
 8005636:	f8d8 4000 	ldr.w	r4, [r8]
 800563a:	4626      	mov	r6, r4
 800563c:	2e00      	cmp	r6, #0
 800563e:	d145      	bne.n	80056cc <_malloc_r+0xdc>
 8005640:	2c00      	cmp	r4, #0
 8005642:	d048      	beq.n	80056d6 <_malloc_r+0xe6>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	4631      	mov	r1, r6
 8005648:	4638      	mov	r0, r7
 800564a:	eb04 0903 	add.w	r9, r4, r3
 800564e:	f000 fb5d 	bl	8005d0c <_sbrk_r>
 8005652:	4581      	cmp	r9, r0
 8005654:	d13f      	bne.n	80056d6 <_malloc_r+0xe6>
 8005656:	6821      	ldr	r1, [r4, #0]
 8005658:	1a6d      	subs	r5, r5, r1
 800565a:	4629      	mov	r1, r5
 800565c:	4638      	mov	r0, r7
 800565e:	f7ff ffa7 	bl	80055b0 <sbrk_aligned>
 8005662:	3001      	adds	r0, #1
 8005664:	d037      	beq.n	80056d6 <_malloc_r+0xe6>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	442b      	add	r3, r5
 800566a:	6023      	str	r3, [r4, #0]
 800566c:	f8d8 3000 	ldr.w	r3, [r8]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d038      	beq.n	80056e6 <_malloc_r+0xf6>
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	42a2      	cmp	r2, r4
 8005678:	d12b      	bne.n	80056d2 <_malloc_r+0xe2>
 800567a:	2200      	movs	r2, #0
 800567c:	605a      	str	r2, [r3, #4]
 800567e:	e00f      	b.n	80056a0 <_malloc_r+0xb0>
 8005680:	6822      	ldr	r2, [r4, #0]
 8005682:	1b52      	subs	r2, r2, r5
 8005684:	d41f      	bmi.n	80056c6 <_malloc_r+0xd6>
 8005686:	2a0b      	cmp	r2, #11
 8005688:	d917      	bls.n	80056ba <_malloc_r+0xca>
 800568a:	1961      	adds	r1, r4, r5
 800568c:	42a3      	cmp	r3, r4
 800568e:	6025      	str	r5, [r4, #0]
 8005690:	bf18      	it	ne
 8005692:	6059      	strne	r1, [r3, #4]
 8005694:	6863      	ldr	r3, [r4, #4]
 8005696:	bf08      	it	eq
 8005698:	f8c8 1000 	streq.w	r1, [r8]
 800569c:	5162      	str	r2, [r4, r5]
 800569e:	604b      	str	r3, [r1, #4]
 80056a0:	4638      	mov	r0, r7
 80056a2:	f104 060b 	add.w	r6, r4, #11
 80056a6:	f000 f829 	bl	80056fc <__malloc_unlock>
 80056aa:	f026 0607 	bic.w	r6, r6, #7
 80056ae:	1d23      	adds	r3, r4, #4
 80056b0:	1af2      	subs	r2, r6, r3
 80056b2:	d0ae      	beq.n	8005612 <_malloc_r+0x22>
 80056b4:	1b9b      	subs	r3, r3, r6
 80056b6:	50a3      	str	r3, [r4, r2]
 80056b8:	e7ab      	b.n	8005612 <_malloc_r+0x22>
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	6862      	ldr	r2, [r4, #4]
 80056be:	d1dd      	bne.n	800567c <_malloc_r+0x8c>
 80056c0:	f8c8 2000 	str.w	r2, [r8]
 80056c4:	e7ec      	b.n	80056a0 <_malloc_r+0xb0>
 80056c6:	4623      	mov	r3, r4
 80056c8:	6864      	ldr	r4, [r4, #4]
 80056ca:	e7ac      	b.n	8005626 <_malloc_r+0x36>
 80056cc:	4634      	mov	r4, r6
 80056ce:	6876      	ldr	r6, [r6, #4]
 80056d0:	e7b4      	b.n	800563c <_malloc_r+0x4c>
 80056d2:	4613      	mov	r3, r2
 80056d4:	e7cc      	b.n	8005670 <_malloc_r+0x80>
 80056d6:	230c      	movs	r3, #12
 80056d8:	603b      	str	r3, [r7, #0]
 80056da:	4638      	mov	r0, r7
 80056dc:	f000 f80e 	bl	80056fc <__malloc_unlock>
 80056e0:	e797      	b.n	8005612 <_malloc_r+0x22>
 80056e2:	6025      	str	r5, [r4, #0]
 80056e4:	e7dc      	b.n	80056a0 <_malloc_r+0xb0>
 80056e6:	605b      	str	r3, [r3, #4]
 80056e8:	deff      	udf	#255	; 0xff
 80056ea:	bf00      	nop
 80056ec:	200002a0 	.word	0x200002a0

080056f0 <__malloc_lock>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__malloc_lock+0x8>)
 80056f2:	f7ff bf0f 	b.w	8005514 <__retarget_lock_acquire_recursive>
 80056f6:	bf00      	nop
 80056f8:	2000029c 	.word	0x2000029c

080056fc <__malloc_unlock>:
 80056fc:	4801      	ldr	r0, [pc, #4]	; (8005704 <__malloc_unlock+0x8>)
 80056fe:	f7ff bf0a 	b.w	8005516 <__retarget_lock_release_recursive>
 8005702:	bf00      	nop
 8005704:	2000029c 	.word	0x2000029c

08005708 <__ssputs_r>:
 8005708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800570c:	688e      	ldr	r6, [r1, #8]
 800570e:	461f      	mov	r7, r3
 8005710:	42be      	cmp	r6, r7
 8005712:	680b      	ldr	r3, [r1, #0]
 8005714:	4682      	mov	sl, r0
 8005716:	460c      	mov	r4, r1
 8005718:	4690      	mov	r8, r2
 800571a:	d82c      	bhi.n	8005776 <__ssputs_r+0x6e>
 800571c:	898a      	ldrh	r2, [r1, #12]
 800571e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005722:	d026      	beq.n	8005772 <__ssputs_r+0x6a>
 8005724:	6965      	ldr	r5, [r4, #20]
 8005726:	6909      	ldr	r1, [r1, #16]
 8005728:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800572c:	eba3 0901 	sub.w	r9, r3, r1
 8005730:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005734:	1c7b      	adds	r3, r7, #1
 8005736:	444b      	add	r3, r9
 8005738:	106d      	asrs	r5, r5, #1
 800573a:	429d      	cmp	r5, r3
 800573c:	bf38      	it	cc
 800573e:	461d      	movcc	r5, r3
 8005740:	0553      	lsls	r3, r2, #21
 8005742:	d527      	bpl.n	8005794 <__ssputs_r+0x8c>
 8005744:	4629      	mov	r1, r5
 8005746:	f7ff ff53 	bl	80055f0 <_malloc_r>
 800574a:	4606      	mov	r6, r0
 800574c:	b360      	cbz	r0, 80057a8 <__ssputs_r+0xa0>
 800574e:	6921      	ldr	r1, [r4, #16]
 8005750:	464a      	mov	r2, r9
 8005752:	f000 faeb 	bl	8005d2c <memcpy>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	6126      	str	r6, [r4, #16]
 8005764:	6165      	str	r5, [r4, #20]
 8005766:	444e      	add	r6, r9
 8005768:	eba5 0509 	sub.w	r5, r5, r9
 800576c:	6026      	str	r6, [r4, #0]
 800576e:	60a5      	str	r5, [r4, #8]
 8005770:	463e      	mov	r6, r7
 8005772:	42be      	cmp	r6, r7
 8005774:	d900      	bls.n	8005778 <__ssputs_r+0x70>
 8005776:	463e      	mov	r6, r7
 8005778:	6820      	ldr	r0, [r4, #0]
 800577a:	4632      	mov	r2, r6
 800577c:	4641      	mov	r1, r8
 800577e:	f000 faab 	bl	8005cd8 <memmove>
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	1b9b      	subs	r3, r3, r6
 8005786:	60a3      	str	r3, [r4, #8]
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	4433      	add	r3, r6
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	2000      	movs	r0, #0
 8005790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005794:	462a      	mov	r2, r5
 8005796:	f000 fad7 	bl	8005d48 <_realloc_r>
 800579a:	4606      	mov	r6, r0
 800579c:	2800      	cmp	r0, #0
 800579e:	d1e0      	bne.n	8005762 <__ssputs_r+0x5a>
 80057a0:	6921      	ldr	r1, [r4, #16]
 80057a2:	4650      	mov	r0, sl
 80057a4:	f7ff feb8 	bl	8005518 <_free_r>
 80057a8:	230c      	movs	r3, #12
 80057aa:	f8ca 3000 	str.w	r3, [sl]
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	f04f 30ff 	mov.w	r0, #4294967295
 80057ba:	e7e9      	b.n	8005790 <__ssputs_r+0x88>

080057bc <_svfiprintf_r>:
 80057bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	4698      	mov	r8, r3
 80057c2:	898b      	ldrh	r3, [r1, #12]
 80057c4:	061b      	lsls	r3, r3, #24
 80057c6:	b09d      	sub	sp, #116	; 0x74
 80057c8:	4607      	mov	r7, r0
 80057ca:	460d      	mov	r5, r1
 80057cc:	4614      	mov	r4, r2
 80057ce:	d50e      	bpl.n	80057ee <_svfiprintf_r+0x32>
 80057d0:	690b      	ldr	r3, [r1, #16]
 80057d2:	b963      	cbnz	r3, 80057ee <_svfiprintf_r+0x32>
 80057d4:	2140      	movs	r1, #64	; 0x40
 80057d6:	f7ff ff0b 	bl	80055f0 <_malloc_r>
 80057da:	6028      	str	r0, [r5, #0]
 80057dc:	6128      	str	r0, [r5, #16]
 80057de:	b920      	cbnz	r0, 80057ea <_svfiprintf_r+0x2e>
 80057e0:	230c      	movs	r3, #12
 80057e2:	603b      	str	r3, [r7, #0]
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	e0d0      	b.n	800598c <_svfiprintf_r+0x1d0>
 80057ea:	2340      	movs	r3, #64	; 0x40
 80057ec:	616b      	str	r3, [r5, #20]
 80057ee:	2300      	movs	r3, #0
 80057f0:	9309      	str	r3, [sp, #36]	; 0x24
 80057f2:	2320      	movs	r3, #32
 80057f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80057fc:	2330      	movs	r3, #48	; 0x30
 80057fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80059a4 <_svfiprintf_r+0x1e8>
 8005802:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005806:	f04f 0901 	mov.w	r9, #1
 800580a:	4623      	mov	r3, r4
 800580c:	469a      	mov	sl, r3
 800580e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005812:	b10a      	cbz	r2, 8005818 <_svfiprintf_r+0x5c>
 8005814:	2a25      	cmp	r2, #37	; 0x25
 8005816:	d1f9      	bne.n	800580c <_svfiprintf_r+0x50>
 8005818:	ebba 0b04 	subs.w	fp, sl, r4
 800581c:	d00b      	beq.n	8005836 <_svfiprintf_r+0x7a>
 800581e:	465b      	mov	r3, fp
 8005820:	4622      	mov	r2, r4
 8005822:	4629      	mov	r1, r5
 8005824:	4638      	mov	r0, r7
 8005826:	f7ff ff6f 	bl	8005708 <__ssputs_r>
 800582a:	3001      	adds	r0, #1
 800582c:	f000 80a9 	beq.w	8005982 <_svfiprintf_r+0x1c6>
 8005830:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005832:	445a      	add	r2, fp
 8005834:	9209      	str	r2, [sp, #36]	; 0x24
 8005836:	f89a 3000 	ldrb.w	r3, [sl]
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80a1 	beq.w	8005982 <_svfiprintf_r+0x1c6>
 8005840:	2300      	movs	r3, #0
 8005842:	f04f 32ff 	mov.w	r2, #4294967295
 8005846:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800584a:	f10a 0a01 	add.w	sl, sl, #1
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	9307      	str	r3, [sp, #28]
 8005852:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005856:	931a      	str	r3, [sp, #104]	; 0x68
 8005858:	4654      	mov	r4, sl
 800585a:	2205      	movs	r2, #5
 800585c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005860:	4850      	ldr	r0, [pc, #320]	; (80059a4 <_svfiprintf_r+0x1e8>)
 8005862:	f7fa fcdd 	bl	8000220 <memchr>
 8005866:	9a04      	ldr	r2, [sp, #16]
 8005868:	b9d8      	cbnz	r0, 80058a2 <_svfiprintf_r+0xe6>
 800586a:	06d0      	lsls	r0, r2, #27
 800586c:	bf44      	itt	mi
 800586e:	2320      	movmi	r3, #32
 8005870:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005874:	0711      	lsls	r1, r2, #28
 8005876:	bf44      	itt	mi
 8005878:	232b      	movmi	r3, #43	; 0x2b
 800587a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800587e:	f89a 3000 	ldrb.w	r3, [sl]
 8005882:	2b2a      	cmp	r3, #42	; 0x2a
 8005884:	d015      	beq.n	80058b2 <_svfiprintf_r+0xf6>
 8005886:	9a07      	ldr	r2, [sp, #28]
 8005888:	4654      	mov	r4, sl
 800588a:	2000      	movs	r0, #0
 800588c:	f04f 0c0a 	mov.w	ip, #10
 8005890:	4621      	mov	r1, r4
 8005892:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005896:	3b30      	subs	r3, #48	; 0x30
 8005898:	2b09      	cmp	r3, #9
 800589a:	d94d      	bls.n	8005938 <_svfiprintf_r+0x17c>
 800589c:	b1b0      	cbz	r0, 80058cc <_svfiprintf_r+0x110>
 800589e:	9207      	str	r2, [sp, #28]
 80058a0:	e014      	b.n	80058cc <_svfiprintf_r+0x110>
 80058a2:	eba0 0308 	sub.w	r3, r0, r8
 80058a6:	fa09 f303 	lsl.w	r3, r9, r3
 80058aa:	4313      	orrs	r3, r2
 80058ac:	9304      	str	r3, [sp, #16]
 80058ae:	46a2      	mov	sl, r4
 80058b0:	e7d2      	b.n	8005858 <_svfiprintf_r+0x9c>
 80058b2:	9b03      	ldr	r3, [sp, #12]
 80058b4:	1d19      	adds	r1, r3, #4
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	9103      	str	r1, [sp, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bfbb      	ittet	lt
 80058be:	425b      	neglt	r3, r3
 80058c0:	f042 0202 	orrlt.w	r2, r2, #2
 80058c4:	9307      	strge	r3, [sp, #28]
 80058c6:	9307      	strlt	r3, [sp, #28]
 80058c8:	bfb8      	it	lt
 80058ca:	9204      	strlt	r2, [sp, #16]
 80058cc:	7823      	ldrb	r3, [r4, #0]
 80058ce:	2b2e      	cmp	r3, #46	; 0x2e
 80058d0:	d10c      	bne.n	80058ec <_svfiprintf_r+0x130>
 80058d2:	7863      	ldrb	r3, [r4, #1]
 80058d4:	2b2a      	cmp	r3, #42	; 0x2a
 80058d6:	d134      	bne.n	8005942 <_svfiprintf_r+0x186>
 80058d8:	9b03      	ldr	r3, [sp, #12]
 80058da:	1d1a      	adds	r2, r3, #4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	9203      	str	r2, [sp, #12]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bfb8      	it	lt
 80058e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80058e8:	3402      	adds	r4, #2
 80058ea:	9305      	str	r3, [sp, #20]
 80058ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80059b4 <_svfiprintf_r+0x1f8>
 80058f0:	7821      	ldrb	r1, [r4, #0]
 80058f2:	2203      	movs	r2, #3
 80058f4:	4650      	mov	r0, sl
 80058f6:	f7fa fc93 	bl	8000220 <memchr>
 80058fa:	b138      	cbz	r0, 800590c <_svfiprintf_r+0x150>
 80058fc:	9b04      	ldr	r3, [sp, #16]
 80058fe:	eba0 000a 	sub.w	r0, r0, sl
 8005902:	2240      	movs	r2, #64	; 0x40
 8005904:	4082      	lsls	r2, r0
 8005906:	4313      	orrs	r3, r2
 8005908:	3401      	adds	r4, #1
 800590a:	9304      	str	r3, [sp, #16]
 800590c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005910:	4825      	ldr	r0, [pc, #148]	; (80059a8 <_svfiprintf_r+0x1ec>)
 8005912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005916:	2206      	movs	r2, #6
 8005918:	f7fa fc82 	bl	8000220 <memchr>
 800591c:	2800      	cmp	r0, #0
 800591e:	d038      	beq.n	8005992 <_svfiprintf_r+0x1d6>
 8005920:	4b22      	ldr	r3, [pc, #136]	; (80059ac <_svfiprintf_r+0x1f0>)
 8005922:	bb1b      	cbnz	r3, 800596c <_svfiprintf_r+0x1b0>
 8005924:	9b03      	ldr	r3, [sp, #12]
 8005926:	3307      	adds	r3, #7
 8005928:	f023 0307 	bic.w	r3, r3, #7
 800592c:	3308      	adds	r3, #8
 800592e:	9303      	str	r3, [sp, #12]
 8005930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005932:	4433      	add	r3, r6
 8005934:	9309      	str	r3, [sp, #36]	; 0x24
 8005936:	e768      	b.n	800580a <_svfiprintf_r+0x4e>
 8005938:	fb0c 3202 	mla	r2, ip, r2, r3
 800593c:	460c      	mov	r4, r1
 800593e:	2001      	movs	r0, #1
 8005940:	e7a6      	b.n	8005890 <_svfiprintf_r+0xd4>
 8005942:	2300      	movs	r3, #0
 8005944:	3401      	adds	r4, #1
 8005946:	9305      	str	r3, [sp, #20]
 8005948:	4619      	mov	r1, r3
 800594a:	f04f 0c0a 	mov.w	ip, #10
 800594e:	4620      	mov	r0, r4
 8005950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005954:	3a30      	subs	r2, #48	; 0x30
 8005956:	2a09      	cmp	r2, #9
 8005958:	d903      	bls.n	8005962 <_svfiprintf_r+0x1a6>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d0c6      	beq.n	80058ec <_svfiprintf_r+0x130>
 800595e:	9105      	str	r1, [sp, #20]
 8005960:	e7c4      	b.n	80058ec <_svfiprintf_r+0x130>
 8005962:	fb0c 2101 	mla	r1, ip, r1, r2
 8005966:	4604      	mov	r4, r0
 8005968:	2301      	movs	r3, #1
 800596a:	e7f0      	b.n	800594e <_svfiprintf_r+0x192>
 800596c:	ab03      	add	r3, sp, #12
 800596e:	9300      	str	r3, [sp, #0]
 8005970:	462a      	mov	r2, r5
 8005972:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <_svfiprintf_r+0x1f4>)
 8005974:	a904      	add	r1, sp, #16
 8005976:	4638      	mov	r0, r7
 8005978:	f3af 8000 	nop.w
 800597c:	1c42      	adds	r2, r0, #1
 800597e:	4606      	mov	r6, r0
 8005980:	d1d6      	bne.n	8005930 <_svfiprintf_r+0x174>
 8005982:	89ab      	ldrh	r3, [r5, #12]
 8005984:	065b      	lsls	r3, r3, #25
 8005986:	f53f af2d 	bmi.w	80057e4 <_svfiprintf_r+0x28>
 800598a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800598c:	b01d      	add	sp, #116	; 0x74
 800598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005992:	ab03      	add	r3, sp, #12
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	462a      	mov	r2, r5
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <_svfiprintf_r+0x1f4>)
 800599a:	a904      	add	r1, sp, #16
 800599c:	4638      	mov	r0, r7
 800599e:	f000 f879 	bl	8005a94 <_printf_i>
 80059a2:	e7eb      	b.n	800597c <_svfiprintf_r+0x1c0>
 80059a4:	08005e28 	.word	0x08005e28
 80059a8:	08005e32 	.word	0x08005e32
 80059ac:	00000000 	.word	0x00000000
 80059b0:	08005709 	.word	0x08005709
 80059b4:	08005e2e 	.word	0x08005e2e

080059b8 <_printf_common>:
 80059b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059bc:	4616      	mov	r6, r2
 80059be:	4699      	mov	r9, r3
 80059c0:	688a      	ldr	r2, [r1, #8]
 80059c2:	690b      	ldr	r3, [r1, #16]
 80059c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059c8:	4293      	cmp	r3, r2
 80059ca:	bfb8      	it	lt
 80059cc:	4613      	movlt	r3, r2
 80059ce:	6033      	str	r3, [r6, #0]
 80059d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059d4:	4607      	mov	r7, r0
 80059d6:	460c      	mov	r4, r1
 80059d8:	b10a      	cbz	r2, 80059de <_printf_common+0x26>
 80059da:	3301      	adds	r3, #1
 80059dc:	6033      	str	r3, [r6, #0]
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	0699      	lsls	r1, r3, #26
 80059e2:	bf42      	ittt	mi
 80059e4:	6833      	ldrmi	r3, [r6, #0]
 80059e6:	3302      	addmi	r3, #2
 80059e8:	6033      	strmi	r3, [r6, #0]
 80059ea:	6825      	ldr	r5, [r4, #0]
 80059ec:	f015 0506 	ands.w	r5, r5, #6
 80059f0:	d106      	bne.n	8005a00 <_printf_common+0x48>
 80059f2:	f104 0a19 	add.w	sl, r4, #25
 80059f6:	68e3      	ldr	r3, [r4, #12]
 80059f8:	6832      	ldr	r2, [r6, #0]
 80059fa:	1a9b      	subs	r3, r3, r2
 80059fc:	42ab      	cmp	r3, r5
 80059fe:	dc26      	bgt.n	8005a4e <_printf_common+0x96>
 8005a00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a04:	1e13      	subs	r3, r2, #0
 8005a06:	6822      	ldr	r2, [r4, #0]
 8005a08:	bf18      	it	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	0692      	lsls	r2, r2, #26
 8005a0e:	d42b      	bmi.n	8005a68 <_printf_common+0xb0>
 8005a10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a14:	4649      	mov	r1, r9
 8005a16:	4638      	mov	r0, r7
 8005a18:	47c0      	blx	r8
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	d01e      	beq.n	8005a5c <_printf_common+0xa4>
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	6922      	ldr	r2, [r4, #16]
 8005a22:	f003 0306 	and.w	r3, r3, #6
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	bf02      	ittt	eq
 8005a2a:	68e5      	ldreq	r5, [r4, #12]
 8005a2c:	6833      	ldreq	r3, [r6, #0]
 8005a2e:	1aed      	subeq	r5, r5, r3
 8005a30:	68a3      	ldr	r3, [r4, #8]
 8005a32:	bf0c      	ite	eq
 8005a34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a38:	2500      	movne	r5, #0
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	bfc4      	itt	gt
 8005a3e:	1a9b      	subgt	r3, r3, r2
 8005a40:	18ed      	addgt	r5, r5, r3
 8005a42:	2600      	movs	r6, #0
 8005a44:	341a      	adds	r4, #26
 8005a46:	42b5      	cmp	r5, r6
 8005a48:	d11a      	bne.n	8005a80 <_printf_common+0xc8>
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	e008      	b.n	8005a60 <_printf_common+0xa8>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	4652      	mov	r2, sl
 8005a52:	4649      	mov	r1, r9
 8005a54:	4638      	mov	r0, r7
 8005a56:	47c0      	blx	r8
 8005a58:	3001      	adds	r0, #1
 8005a5a:	d103      	bne.n	8005a64 <_printf_common+0xac>
 8005a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a64:	3501      	adds	r5, #1
 8005a66:	e7c6      	b.n	80059f6 <_printf_common+0x3e>
 8005a68:	18e1      	adds	r1, r4, r3
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	2030      	movs	r0, #48	; 0x30
 8005a6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a72:	4422      	add	r2, r4
 8005a74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a7c:	3302      	adds	r3, #2
 8005a7e:	e7c7      	b.n	8005a10 <_printf_common+0x58>
 8005a80:	2301      	movs	r3, #1
 8005a82:	4622      	mov	r2, r4
 8005a84:	4649      	mov	r1, r9
 8005a86:	4638      	mov	r0, r7
 8005a88:	47c0      	blx	r8
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	d0e6      	beq.n	8005a5c <_printf_common+0xa4>
 8005a8e:	3601      	adds	r6, #1
 8005a90:	e7d9      	b.n	8005a46 <_printf_common+0x8e>
	...

08005a94 <_printf_i>:
 8005a94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a98:	7e0f      	ldrb	r7, [r1, #24]
 8005a9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a9c:	2f78      	cmp	r7, #120	; 0x78
 8005a9e:	4691      	mov	r9, r2
 8005aa0:	4680      	mov	r8, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	469a      	mov	sl, r3
 8005aa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005aaa:	d807      	bhi.n	8005abc <_printf_i+0x28>
 8005aac:	2f62      	cmp	r7, #98	; 0x62
 8005aae:	d80a      	bhi.n	8005ac6 <_printf_i+0x32>
 8005ab0:	2f00      	cmp	r7, #0
 8005ab2:	f000 80d4 	beq.w	8005c5e <_printf_i+0x1ca>
 8005ab6:	2f58      	cmp	r7, #88	; 0x58
 8005ab8:	f000 80c0 	beq.w	8005c3c <_printf_i+0x1a8>
 8005abc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ac0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ac4:	e03a      	b.n	8005b3c <_printf_i+0xa8>
 8005ac6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005aca:	2b15      	cmp	r3, #21
 8005acc:	d8f6      	bhi.n	8005abc <_printf_i+0x28>
 8005ace:	a101      	add	r1, pc, #4	; (adr r1, 8005ad4 <_printf_i+0x40>)
 8005ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ad4:	08005b2d 	.word	0x08005b2d
 8005ad8:	08005b41 	.word	0x08005b41
 8005adc:	08005abd 	.word	0x08005abd
 8005ae0:	08005abd 	.word	0x08005abd
 8005ae4:	08005abd 	.word	0x08005abd
 8005ae8:	08005abd 	.word	0x08005abd
 8005aec:	08005b41 	.word	0x08005b41
 8005af0:	08005abd 	.word	0x08005abd
 8005af4:	08005abd 	.word	0x08005abd
 8005af8:	08005abd 	.word	0x08005abd
 8005afc:	08005abd 	.word	0x08005abd
 8005b00:	08005c45 	.word	0x08005c45
 8005b04:	08005b6d 	.word	0x08005b6d
 8005b08:	08005bff 	.word	0x08005bff
 8005b0c:	08005abd 	.word	0x08005abd
 8005b10:	08005abd 	.word	0x08005abd
 8005b14:	08005c67 	.word	0x08005c67
 8005b18:	08005abd 	.word	0x08005abd
 8005b1c:	08005b6d 	.word	0x08005b6d
 8005b20:	08005abd 	.word	0x08005abd
 8005b24:	08005abd 	.word	0x08005abd
 8005b28:	08005c07 	.word	0x08005c07
 8005b2c:	682b      	ldr	r3, [r5, #0]
 8005b2e:	1d1a      	adds	r2, r3, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	602a      	str	r2, [r5, #0]
 8005b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e09f      	b.n	8005c80 <_printf_i+0x1ec>
 8005b40:	6820      	ldr	r0, [r4, #0]
 8005b42:	682b      	ldr	r3, [r5, #0]
 8005b44:	0607      	lsls	r7, r0, #24
 8005b46:	f103 0104 	add.w	r1, r3, #4
 8005b4a:	6029      	str	r1, [r5, #0]
 8005b4c:	d501      	bpl.n	8005b52 <_printf_i+0xbe>
 8005b4e:	681e      	ldr	r6, [r3, #0]
 8005b50:	e003      	b.n	8005b5a <_printf_i+0xc6>
 8005b52:	0646      	lsls	r6, r0, #25
 8005b54:	d5fb      	bpl.n	8005b4e <_printf_i+0xba>
 8005b56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	da03      	bge.n	8005b66 <_printf_i+0xd2>
 8005b5e:	232d      	movs	r3, #45	; 0x2d
 8005b60:	4276      	negs	r6, r6
 8005b62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b66:	485a      	ldr	r0, [pc, #360]	; (8005cd0 <_printf_i+0x23c>)
 8005b68:	230a      	movs	r3, #10
 8005b6a:	e012      	b.n	8005b92 <_printf_i+0xfe>
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	6820      	ldr	r0, [r4, #0]
 8005b70:	1d19      	adds	r1, r3, #4
 8005b72:	6029      	str	r1, [r5, #0]
 8005b74:	0605      	lsls	r5, r0, #24
 8005b76:	d501      	bpl.n	8005b7c <_printf_i+0xe8>
 8005b78:	681e      	ldr	r6, [r3, #0]
 8005b7a:	e002      	b.n	8005b82 <_printf_i+0xee>
 8005b7c:	0641      	lsls	r1, r0, #25
 8005b7e:	d5fb      	bpl.n	8005b78 <_printf_i+0xe4>
 8005b80:	881e      	ldrh	r6, [r3, #0]
 8005b82:	4853      	ldr	r0, [pc, #332]	; (8005cd0 <_printf_i+0x23c>)
 8005b84:	2f6f      	cmp	r7, #111	; 0x6f
 8005b86:	bf0c      	ite	eq
 8005b88:	2308      	moveq	r3, #8
 8005b8a:	230a      	movne	r3, #10
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b92:	6865      	ldr	r5, [r4, #4]
 8005b94:	60a5      	str	r5, [r4, #8]
 8005b96:	2d00      	cmp	r5, #0
 8005b98:	bfa2      	ittt	ge
 8005b9a:	6821      	ldrge	r1, [r4, #0]
 8005b9c:	f021 0104 	bicge.w	r1, r1, #4
 8005ba0:	6021      	strge	r1, [r4, #0]
 8005ba2:	b90e      	cbnz	r6, 8005ba8 <_printf_i+0x114>
 8005ba4:	2d00      	cmp	r5, #0
 8005ba6:	d04b      	beq.n	8005c40 <_printf_i+0x1ac>
 8005ba8:	4615      	mov	r5, r2
 8005baa:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bae:	fb03 6711 	mls	r7, r3, r1, r6
 8005bb2:	5dc7      	ldrb	r7, [r0, r7]
 8005bb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005bb8:	4637      	mov	r7, r6
 8005bba:	42bb      	cmp	r3, r7
 8005bbc:	460e      	mov	r6, r1
 8005bbe:	d9f4      	bls.n	8005baa <_printf_i+0x116>
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d10b      	bne.n	8005bdc <_printf_i+0x148>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	07de      	lsls	r6, r3, #31
 8005bc8:	d508      	bpl.n	8005bdc <_printf_i+0x148>
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	6861      	ldr	r1, [r4, #4]
 8005bce:	4299      	cmp	r1, r3
 8005bd0:	bfde      	ittt	le
 8005bd2:	2330      	movle	r3, #48	; 0x30
 8005bd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bdc:	1b52      	subs	r2, r2, r5
 8005bde:	6122      	str	r2, [r4, #16]
 8005be0:	f8cd a000 	str.w	sl, [sp]
 8005be4:	464b      	mov	r3, r9
 8005be6:	aa03      	add	r2, sp, #12
 8005be8:	4621      	mov	r1, r4
 8005bea:	4640      	mov	r0, r8
 8005bec:	f7ff fee4 	bl	80059b8 <_printf_common>
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	d14a      	bne.n	8005c8a <_printf_i+0x1f6>
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	b004      	add	sp, #16
 8005bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	f043 0320 	orr.w	r3, r3, #32
 8005c04:	6023      	str	r3, [r4, #0]
 8005c06:	4833      	ldr	r0, [pc, #204]	; (8005cd4 <_printf_i+0x240>)
 8005c08:	2778      	movs	r7, #120	; 0x78
 8005c0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	6829      	ldr	r1, [r5, #0]
 8005c12:	061f      	lsls	r7, r3, #24
 8005c14:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c18:	d402      	bmi.n	8005c20 <_printf_i+0x18c>
 8005c1a:	065f      	lsls	r7, r3, #25
 8005c1c:	bf48      	it	mi
 8005c1e:	b2b6      	uxthmi	r6, r6
 8005c20:	07df      	lsls	r7, r3, #31
 8005c22:	bf48      	it	mi
 8005c24:	f043 0320 	orrmi.w	r3, r3, #32
 8005c28:	6029      	str	r1, [r5, #0]
 8005c2a:	bf48      	it	mi
 8005c2c:	6023      	strmi	r3, [r4, #0]
 8005c2e:	b91e      	cbnz	r6, 8005c38 <_printf_i+0x1a4>
 8005c30:	6823      	ldr	r3, [r4, #0]
 8005c32:	f023 0320 	bic.w	r3, r3, #32
 8005c36:	6023      	str	r3, [r4, #0]
 8005c38:	2310      	movs	r3, #16
 8005c3a:	e7a7      	b.n	8005b8c <_printf_i+0xf8>
 8005c3c:	4824      	ldr	r0, [pc, #144]	; (8005cd0 <_printf_i+0x23c>)
 8005c3e:	e7e4      	b.n	8005c0a <_printf_i+0x176>
 8005c40:	4615      	mov	r5, r2
 8005c42:	e7bd      	b.n	8005bc0 <_printf_i+0x12c>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	6826      	ldr	r6, [r4, #0]
 8005c48:	6961      	ldr	r1, [r4, #20]
 8005c4a:	1d18      	adds	r0, r3, #4
 8005c4c:	6028      	str	r0, [r5, #0]
 8005c4e:	0635      	lsls	r5, r6, #24
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	d501      	bpl.n	8005c58 <_printf_i+0x1c4>
 8005c54:	6019      	str	r1, [r3, #0]
 8005c56:	e002      	b.n	8005c5e <_printf_i+0x1ca>
 8005c58:	0670      	lsls	r0, r6, #25
 8005c5a:	d5fb      	bpl.n	8005c54 <_printf_i+0x1c0>
 8005c5c:	8019      	strh	r1, [r3, #0]
 8005c5e:	2300      	movs	r3, #0
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	4615      	mov	r5, r2
 8005c64:	e7bc      	b.n	8005be0 <_printf_i+0x14c>
 8005c66:	682b      	ldr	r3, [r5, #0]
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	602a      	str	r2, [r5, #0]
 8005c6c:	681d      	ldr	r5, [r3, #0]
 8005c6e:	6862      	ldr	r2, [r4, #4]
 8005c70:	2100      	movs	r1, #0
 8005c72:	4628      	mov	r0, r5
 8005c74:	f7fa fad4 	bl	8000220 <memchr>
 8005c78:	b108      	cbz	r0, 8005c7e <_printf_i+0x1ea>
 8005c7a:	1b40      	subs	r0, r0, r5
 8005c7c:	6060      	str	r0, [r4, #4]
 8005c7e:	6863      	ldr	r3, [r4, #4]
 8005c80:	6123      	str	r3, [r4, #16]
 8005c82:	2300      	movs	r3, #0
 8005c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c88:	e7aa      	b.n	8005be0 <_printf_i+0x14c>
 8005c8a:	6923      	ldr	r3, [r4, #16]
 8005c8c:	462a      	mov	r2, r5
 8005c8e:	4649      	mov	r1, r9
 8005c90:	4640      	mov	r0, r8
 8005c92:	47d0      	blx	sl
 8005c94:	3001      	adds	r0, #1
 8005c96:	d0ad      	beq.n	8005bf4 <_printf_i+0x160>
 8005c98:	6823      	ldr	r3, [r4, #0]
 8005c9a:	079b      	lsls	r3, r3, #30
 8005c9c:	d413      	bmi.n	8005cc6 <_printf_i+0x232>
 8005c9e:	68e0      	ldr	r0, [r4, #12]
 8005ca0:	9b03      	ldr	r3, [sp, #12]
 8005ca2:	4298      	cmp	r0, r3
 8005ca4:	bfb8      	it	lt
 8005ca6:	4618      	movlt	r0, r3
 8005ca8:	e7a6      	b.n	8005bf8 <_printf_i+0x164>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4632      	mov	r2, r6
 8005cae:	4649      	mov	r1, r9
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	47d0      	blx	sl
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d09d      	beq.n	8005bf4 <_printf_i+0x160>
 8005cb8:	3501      	adds	r5, #1
 8005cba:	68e3      	ldr	r3, [r4, #12]
 8005cbc:	9903      	ldr	r1, [sp, #12]
 8005cbe:	1a5b      	subs	r3, r3, r1
 8005cc0:	42ab      	cmp	r3, r5
 8005cc2:	dcf2      	bgt.n	8005caa <_printf_i+0x216>
 8005cc4:	e7eb      	b.n	8005c9e <_printf_i+0x20a>
 8005cc6:	2500      	movs	r5, #0
 8005cc8:	f104 0619 	add.w	r6, r4, #25
 8005ccc:	e7f5      	b.n	8005cba <_printf_i+0x226>
 8005cce:	bf00      	nop
 8005cd0:	08005e39 	.word	0x08005e39
 8005cd4:	08005e4a 	.word	0x08005e4a

08005cd8 <memmove>:
 8005cd8:	4288      	cmp	r0, r1
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	eb01 0402 	add.w	r4, r1, r2
 8005ce0:	d902      	bls.n	8005ce8 <memmove+0x10>
 8005ce2:	4284      	cmp	r4, r0
 8005ce4:	4623      	mov	r3, r4
 8005ce6:	d807      	bhi.n	8005cf8 <memmove+0x20>
 8005ce8:	1e43      	subs	r3, r0, #1
 8005cea:	42a1      	cmp	r1, r4
 8005cec:	d008      	beq.n	8005d00 <memmove+0x28>
 8005cee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cf6:	e7f8      	b.n	8005cea <memmove+0x12>
 8005cf8:	4402      	add	r2, r0
 8005cfa:	4601      	mov	r1, r0
 8005cfc:	428a      	cmp	r2, r1
 8005cfe:	d100      	bne.n	8005d02 <memmove+0x2a>
 8005d00:	bd10      	pop	{r4, pc}
 8005d02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d0a:	e7f7      	b.n	8005cfc <memmove+0x24>

08005d0c <_sbrk_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	4d06      	ldr	r5, [pc, #24]	; (8005d28 <_sbrk_r+0x1c>)
 8005d10:	2300      	movs	r3, #0
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f7fa ff00 	bl	8000b1c <_sbrk>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_sbrk_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_sbrk_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	20000298 	.word	0x20000298

08005d2c <memcpy>:
 8005d2c:	440a      	add	r2, r1
 8005d2e:	4291      	cmp	r1, r2
 8005d30:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d34:	d100      	bne.n	8005d38 <memcpy+0xc>
 8005d36:	4770      	bx	lr
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d42:	4291      	cmp	r1, r2
 8005d44:	d1f9      	bne.n	8005d3a <memcpy+0xe>
 8005d46:	bd10      	pop	{r4, pc}

08005d48 <_realloc_r>:
 8005d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d4c:	4680      	mov	r8, r0
 8005d4e:	4614      	mov	r4, r2
 8005d50:	460e      	mov	r6, r1
 8005d52:	b921      	cbnz	r1, 8005d5e <_realloc_r+0x16>
 8005d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d58:	4611      	mov	r1, r2
 8005d5a:	f7ff bc49 	b.w	80055f0 <_malloc_r>
 8005d5e:	b92a      	cbnz	r2, 8005d6c <_realloc_r+0x24>
 8005d60:	f7ff fbda 	bl	8005518 <_free_r>
 8005d64:	4625      	mov	r5, r4
 8005d66:	4628      	mov	r0, r5
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6c:	f000 f81b 	bl	8005da6 <_malloc_usable_size_r>
 8005d70:	4284      	cmp	r4, r0
 8005d72:	4607      	mov	r7, r0
 8005d74:	d802      	bhi.n	8005d7c <_realloc_r+0x34>
 8005d76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005d7a:	d812      	bhi.n	8005da2 <_realloc_r+0x5a>
 8005d7c:	4621      	mov	r1, r4
 8005d7e:	4640      	mov	r0, r8
 8005d80:	f7ff fc36 	bl	80055f0 <_malloc_r>
 8005d84:	4605      	mov	r5, r0
 8005d86:	2800      	cmp	r0, #0
 8005d88:	d0ed      	beq.n	8005d66 <_realloc_r+0x1e>
 8005d8a:	42bc      	cmp	r4, r7
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	4631      	mov	r1, r6
 8005d90:	bf28      	it	cs
 8005d92:	463a      	movcs	r2, r7
 8005d94:	f7ff ffca 	bl	8005d2c <memcpy>
 8005d98:	4631      	mov	r1, r6
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	f7ff fbbc 	bl	8005518 <_free_r>
 8005da0:	e7e1      	b.n	8005d66 <_realloc_r+0x1e>
 8005da2:	4635      	mov	r5, r6
 8005da4:	e7df      	b.n	8005d66 <_realloc_r+0x1e>

08005da6 <_malloc_usable_size_r>:
 8005da6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005daa:	1f18      	subs	r0, r3, #4
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	bfbc      	itt	lt
 8005db0:	580b      	ldrlt	r3, [r1, r0]
 8005db2:	18c0      	addlt	r0, r0, r3
 8005db4:	4770      	bx	lr
	...

08005db8 <_init>:
 8005db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dba:	bf00      	nop
 8005dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dbe:	bc08      	pop	{r3}
 8005dc0:	469e      	mov	lr, r3
 8005dc2:	4770      	bx	lr

08005dc4 <_fini>:
 8005dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc6:	bf00      	nop
 8005dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dca:	bc08      	pop	{r3}
 8005dcc:	469e      	mov	lr, r3
 8005dce:	4770      	bx	lr
